                                                                             
                 ########            Lehrstuhl D fuer Mathematik             
               ###    ####           RWTH Aachen                             
              ##         ##                                                  
             ##          #             #######            #########          
            ##                        #      ##          ## #     ##         
            ##           #           #       ##             #      ##        
            ####        ##           ##       #             #      ##        
             #####     ###           ##      ##             ##    ##         
               ######### #            #########             #######          
                         #                                  #                
                        ##           Version 3              #                
                       ###           Release 4              #                
                      ## #           10 Jul 94              #                
                     ##  #                                                   
                    ##   #  Alice Niemeyer, Werner Nickel,  Martin Schoenert 
                   ##    #  Johannes Meier, Alex Wegner,    Thomas Bischops  
                  ##     #  Frank Celler,   Juergen Mnich,  Udo Polis        
                  ###   ##  Thomas Breuer,  Goetz Pfeiffer, Hans U. Besche   
                   ######   Volkmar Felsch, Heiko Theissen, Alexander Hulpke 
                            Ansgar Kaup,    Akos Seress,    Erzsebet Horvath 
                            Bettina Eick                                     
                            For help enter: ?<return>                        
gap> RequirePackage("pcqa");
gap> F := FreeGroup(3);
Group( f.1, f.2, f.3 )
gap> G := F/[F.1^2,F.2^2,F.3^2,(F.1*F.2)^3,(F.1*F.3)^2,(F.2*F.3)^3];
Group( f.1, f.2, f.3 )
gap> result1 := CallPCQA(G,2);
rec(
  isDerivedSeries := true,
  DerivedLength := 2,
  QuotientStatus := 0,
  PolycyclicPresentation := rec(
      Generators := 2,
      ExponentList := [ 2, 3 ],
      ppRelations := [ [ [ 0, 2 ] ] ],
      pnRelations := [ [ [ 0, 1 ] ] ],
      npRelations := [ [ [ 0, 2 ] ] ],
      nnRelations := [ [ [ 0, 1 ] ] ],
      PowerRelations := [ [ 0, 0 ], [ 1, 0 ], [ 0, 0 ], [ 0, 2 ] ] ),
  Homomorphisms := rec(
      Epimorphism := [ [ 1, 0 ], [ 1, 1 ], [ 1, 0 ] ],
      InverseMap := [ [ [ 3, 1 ] ], [ [ 4, -1 ], [ 2, 1 ] ] ] ),
  MembershipArray := [ 1, 2 ] )
gap> result2 := ExtendPCQA(G, result1.PolycyclicPresentation,
                              result1.Homomorphisms);
rec(
  QuotientStatus := 0,
  PolycyclicPresentation := rec(
      Generators := 4,
      ExponentList := [ 2, 3, 2, 2 ],
      ppRelations := [ [ [ 0, 2, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 1, 1 ] ], 
          [ [ 0, 0, 1, 1 ], [ 0, 0, 1, 0 ] ], [ [ 0, 0, 0, 1 ] ] ],
      pnRelations := [ [ [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 1, 1 ] ], 
          [ [ 0, 0, 1, 1 ], [ 0, 0, 1, 0 ] ], [ [ 0, 0, 0, 1 ] ] ],
      npRelations := [ [ [ 0, 2, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 1, 1 ] ], 
          [ [ 0, 0, 0, 1 ], [ 0, 0, 1, 1 ] ], [ [ 0, 0, 0, 1 ] ] ],
      nnRelations := [ [ [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 1, 1 ] ], 
          [ [ 0, 0, 0, 1 ], [ 0, 0, 1, 1 ] ], [ [ 0, 0, 0, 1 ] ] ],
      PowerRelations := [ [ 0, 0, 0, 0 ], [ 1, 0, 0, 0 ], [ 0, 0, 0, 0 ], 
          [ 0, 2, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 0 ], 
          [ 0, 0, 0, 1 ] ] ),
  Homomorphisms := rec(
      Epimorphism := [ [ 1, 0, 1, 0 ], [ 1, 1, 0, 0 ], [ 1, 0, 0, 0 ] ],
      InverseMap := 
       [ [ [ 3, 1 ] ], [ [ 4, -1 ], [ 2, 1 ] ], [ [ 4, -1 ], [ 1, 1 ] ], 
          [ [ 5, 1 ], [ 4, -1 ], [ 1, 1 ], [ 5, -1 ] ] ] ),
  Next := 3 )
gap> ModuleAction(result2);
[ [ [ 1, 0 ], [ 1, 1 ] ], [ [ 1, 1 ], [ 1, 0 ] ] ]
gap> quit;


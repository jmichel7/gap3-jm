
def eylf41(arg):
    if len(arg)==1 :
        type_=arg[1-1]
    else:
        type_=1
    a=ChevieData["A"]["CartanMat"](4)
    a[2-1][3-1]=-type_
    a[3-1][2-1]=GAPDiv(2,a[2-1][3-1])
    return a

ChevieData["F4"]["CartanMat"]=eylf41

def eylf42(indices,title,type_):
    print title," ",indices[1-1]," - ",indices[2-1],
    if type_==1 :
        print " >=> ",
    else:
        if type_==ER(2) :
            print " == ",
        else:
            print " ?==? ",
    print indices[3-1]," - ",indices[4-1],"\n",

ChevieData["F4"]["PrintDiagram"]=eylf42

def eylf43(arg):
    if len(arg)==1 :
        return "F4(?)"
    type_=arg[1-1]
    opt=arg[2-1]
    if type_==1 :
        if "TeX" in opt :
            return "F_4"
        else:
            if "arg" in opt :
                return "\"F\",4"
            else:
                return "F4"
    else:
        if type_==ER(2) :
            if "TeX" in opt :
                return "F_{\\hbox{sym}4}"
            else:
                if "arg" in opt :
                    return "\"Fsym\",4"
                else:
                    return "Fsym4"
        else:
            if "TeX" in opt :
                return SPrint("F_4(",Format(GAPDiv(type_**2,2),opt),")")
            else:
                if "arg" in opt :
                    return SPrint("\"F\",",4,",",Format(GAPDiv(type_**2,2),opt))
                else:
                    return SPrint("F4(",Format(GAPDiv(type_**2,2)),")")

ChevieData["F4"]["ReflectionName"]=eylf43

ChevieData["F4"]["GeneratingRoots"]=[[0,1,-1,0],[0,0,1,-1],[0,0,0,1],GAPDiv([1,-1,-1,-1],2)]

ChevieData["F4"]["HyperplaneRepresentatives"]=[1,3]

def eylf44(s):
    t=[[[]],[[1],[3]],[[1,2],[1,3],[2,3],[3,4]],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]],[range(1,4+1)]]
    return t[s+1-1]

ChevieData["F4"]["ParabolicRepresentatives"]=eylf44

ChevieData["F4"]["Size"]=1152

ChevieData["F4"]["ReflectionDegrees"]=[2,6,8,12]

ChevieData["F4"]["NrConjugacyClasses"]=25

def eylf45():
    res={"classtext":map(lambda x: Replace(x,[0],range(1,4+1)),[[],[0,0,0,0,0,0],[2,3,2,3],[2,1],[0,2,3,2,3,4,3],[0,0,0],[4,3],[1,2,1,3,2,3,0],[0,0,0,0],[0,0],[0],[1],[2,3,2,3,4,3,2,3,4],[1,4,3],[4,3,2],[2,3,2,1,3],[3],[1,2,1,3,2,1,3,2,3],[2,1,4],[3,2,1],[2,4,3,2,3],[1,3],[3,2],[0,0,0,2,3],[0,2,3]]),
        "classnames":["A_0","4A_1","2A_1","A_2","D_4","D_4(a_1)","\\tilde A_2","C_3+A_1","A_2+\\tilde A_2","F_4(a_1)","F_4","A_1","3A_1","\\tilde A_2+A_1","C_3","A_3","\\tilde A_1","2A_1+\\tilde A_1","A_2+\\tilde A_1","B_3","B_2+A_1","A_1+\\tilde A_1","B_2","A_3+\\tilde A_1","B_4"],
        "classes":[1,1,18,32,32,12,32,32,16,16,96,12,12,96,96,72,12,12,96,96,72,72,36,36,144],
        "orders":[1,2,2,3,6,4,3,6,3,6,12,2,2,6,6,4,2,2,6,6,4,2,4,4,8]}
    res["classparams"]=res["classnames"]
    return res

ChevieData["F4"]["ClassInfo"]=eylf45

def eylf46():
    res={"charparams":[[1,0],[1,12,2],[1,12,1],[1,24],[2,4,2],[2,16,1],[2,4,1],[2,16,2],[4,8],[9,2],[9,6,2],[9,6,1],[9,10],[6,6,1],[6,6,2],[12,4],[4,1],[4,7,2],[4,7,1],[4,13],[8,3,2],[8,9,1],[8,3,1],[8,9,2],[16,5]],
        "kondo":["1_1","1_2","1_3","1_4","2_1","2_2","2_3","2_4","4_1","9_1","9_2","9_3","9_4","6_1","6_2","12","4_2","4_3","4_4","4_5","8_1","8_2","8_3","8_4","16"],
        "spaltenstein":["1_1","1_2","1_3","1_4","2_1","2_2","2_3","2_4","4","9_1","9_2","9_3","9_4","6_1","6_2","12","4_1","4_2","4_3","4_4","8_1","8_2","8_3","8_4","16"],
        "extRefl":[1,17,15,20,4],
        "a":[0,4,4,24,1,13,1,13,4,2,4,4,10,4,4,4,1,4,4,13,3,9,3,9,4],
        "A":[0,20,20,24,11,23,11,23,20,14,20,20,22,20,20,20,11,20,20,23,15,21,15,21,20]}
    res["b"]=map(lambda x: x[2-1],res["charparams"])
    return res

ChevieData["F4"]["CharInfo"]=eylf46

ChevieData["F4"]["cyclestructure"]=[[[],[]],[[12],[12]],[[10],[10]],[[None,8],[None,6]],[[None,None,None,None,4],[3,None,None,None,3]],[[None,None,6],[None,None,6]],[[None,6],[None,8]],[[3,None,None,None,3],[None,None,None,None,4]],[[None,8],[None,8]],[[None,None,None,None,4],[None,None,None,None,4]],[[None,None,None,None,None,None,None,None,None,None,2],[None,None,None,None,None,None,None,None,None,None,2]],[[9],[6]],[[11],[12]],[[3,2,None,None,2],[None,4,None,None,2]],[[2,None,None,None,3],[None,None,None,None,4]],[[2,None,5],[1,None,5]],[[6],[9]],[[12],[11]],[[None,4,None,None,2],[3,2,None,None,2]],[[None,None,None,None,4],[2,None,None,None,3]],[[1,None,5],[2,None,5]],[[11],[11]],[[None,None,5],[None,None,5]],[[2,None,5],[2,None,5]],[[None,None,None,None,None,None,3],[None,None,None,None,None,None,3]]]

ChevieData["F4"]["generators"]=[Permutation("(1,25)(2,5)(6,8)(9,11)(10,12)(13,15)(16,18)(23,24)(26,29)(30,32)(33,35)(34,36)(37,39)(40,42)(47,48)"),Permutation("(1,5)(2,26)(3,6)(7,10)(11,14)(15,17)(18,20)(22,23)(25,29)(27,30)(31,34)(35,38)(39,41)(42,44)(46,47)"),Permutation("(2,9)(3,27)(4,7)(5,11)(10,13)(12,15)(17,19)(20,22)(26,33)(28,31)(29,35)(34,37)(36,39)(41,43)(44,46)"),Permutation("(3,7)(4,28)(6,10)(8,12)(9,16)(11,18)(14,20)(19,21)(27,31)(30,34)(32,36)(33,40)(35,42)(38,44)(43,45)")]

ChevieData["F4"]["orbits"]=[[1,25,5,29,2,11,26,35,9,14,18,33,38,42,16,20,40,44,22,46,23,47,24,48],[3,6,27,7,8,10,30,31,4,12,13,32,34,28,15,36,37,17,39,19,41,21,43,45]]

ChevieData["F4"]["PowerMaps"]=[None,[1,1,1,4,4,2,7,7,9,9,10,1,1,7,7,3,1,1,4,4,3,1,3,3,6],[1,2,3,1,2,6,1,2,1,2,6,12,13,12,13,16,17,18,17,18,21,22,23,24,25]]

ChevieData["F4"]["sparseFakeDegrees"]=[[1,0],[1,12],[1,12],[1,24],[1,4,1,8],[1,16,1,20],[1,4,1,8],[1,16,1,20],[1,8,2,12,1,16],[1,2,1,4,2,6,1,8,2,10,1,12,1,14],[1,6,1,8,2,10,1,12,2,14,1,16,1,18],[1,6,1,8,2,10,1,12,2,14,1,16,1,18],[1,10,1,12,2,14,1,16,2,18,1,20,1,22],[1,6,1,8,2,12,1,16,1,18],[1,6,1,8,2,12,1,16,1,18],[1,4,2,8,2,10,2,12,2,14,2,16,1,20],[1,1,1,5,1,7,1,11],[1,7,1,11,1,13,1,17],[1,7,1,11,1,13,1,17],[1,13,1,17,1,19,1,23],[1,3,1,5,1,7,2,9,1,11,1,13,1,15],[1,9,1,11,1,13,2,15,1,17,1,19,1,21],[1,3,1,5,1,7,2,9,1,11,1,13,1,15],[1,9,1,11,1,13,2,15,1,17,1,19,1,21],[1,5,2,7,2,9,3,11,3,13,2,15,2,17,1,19]]

def eylf47(w):
    if w==[] :
        return " "
    x=prod([ChevieData["F4"]["generators"][k-1] for k in w])
    return ChevieData["F4"]["classparams"][ChevieData["F4"]["cyclestructure"].index([CycleStructurePerm(RestrictedPerm(x,ChevieData["F4"]["orbits"][1-1])),CycleStructurePerm(RestrictedPerm(x,ChevieData["F4"]["orbits"][2-1]))])+1-1]

ChevieData["F4"]["ClassParameter"]=eylf47

def eylf48(param,sqrtparam):
    u=GAPDiv(-param[1-1][1-1],param[1-1][2-1])
    v=GAPDiv(-param[3-1][1-1],param[3-1][2-1])
    tbl={"identifier":"H(F4)",
        "text":"origin: Meinolf Geck, April 1992",
        "parameter":[u,u,v,v],
        "size":1152,
        "powermap":ChevieData["F4"]["PowerMaps"]}
    tbl.update(ChevieData["F4"]["ClassInfo"]())
    tbl["centralizers"]=map(lambda x: GAPDiv(tbl["size"],x),tbl["classes"])
    dual=lambda f: Zip(f(u**-1,v**-1),tbl["classtext"],eylf49)
    def f4(u,v):
        return [1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1]
    
    
    def f2(u,v):
        return [1,u**12,u**2,u**2,u**4,u**6,1,u**6,u**8,u**4,u**2,u,u**3,u,u,u**3,-1,-u**6,-u**2,-u**2,-u**2,-u,-u,-u**7,-u**3]
    
    
    def f6(u,v):
        return [2,GAPMul(2,v**6),v**2+1,2,GAPMul(2,v**3),GAPMul(2,v**3),-v,-v**2,-v**4,-v**2,-v,-2,GAPMul(-2,v**3),v,v,-1-v**2,v-1,-1+v**3,v-1,v-1,0,1-v,1-v,v**3-v**4,0]
    
    
    def f8(u,v):
        return [2,GAPMul(2,u**6),u**2+1,-u,-u**2,GAPMul(2,u**3),2,GAPMul(2,u**3),-u**4,-u**2,-u,-1+u,u**3-1,-1+u,-1+u,0,-2,GAPMul(-2,u**3),u,u,-u**2-1,-u+1,-u+1,-u**4+u**3,0]
    
    
    def f11(u,v):
        return [9,GAPMul(9,v**4),GAPMul(v**2,u**2)+1-GAPMul(4,u)+GAPMul(3,u**2),GAPMul(-3,u)+GAPMul(3,u**2),0,GAPMul(-3,v**2),3-GAPMul(3,v),0,0,0,0,GAPMul(6,u)-3,GAPMul(-3,v**2)+GAPMul(2,v**3),GAPMul(2,u)-GAPMul(2,u)-1+v,GAPMul(-u,v)+u,u**3-GAPMul(2,u**2),-6+GAPMul(3,v),GAPMul(3,u**4)-GAPMul(3,v**2)-u**6-GAPMul(2,u**3),GAPMul(u**2,v)-GAPMul(2,u**2)-GAPMul(u,v)+GAPMul(2,u),u-u**2,-u**2+GAPMul(2,u),GAPMul(-4,u)+GAPMul(2,u)-v,GAPMul(-3,u)+GAPMul(u,v),GAPMul(-v**3,u**5)+GAPMul(v**2,u**5)-GAPMul(v**2,u**4),GAPMul(u**2,v)]
    
    
    def f13(u,v):
        return [9,GAPMul(9,v**4),3-GAPMul(4,u)+u**2,GAPMul(-3,u)+3,0,GAPMul(-3,v**2),3-GAPMul(3,v),0,0,0,0,-6+GAPMul(3,u),-1+GAPMul(3,u)-GAPMul(3,v**2)-GAPMul(2,v**3),GAPMul(-u,v)+u-2+GAPMul(2,v),v-1,-1+GAPMul(2,u),-6+GAPMul(3,v),-1+GAPMul(3,u**2)-GAPMul(2,u**3)-GAPMul(3,v**2),GAPMul(-u,v)+GAPMul(2,u)-2,-1+u,-1+GAPMul(2,u),4-GAPMul(2,v)+GAPMul(u,v)-GAPMul(2,u),3-v-u,GAPMul(v**3,u**2)-GAPMul(v**2,u**2)+GAPMul(v**2,u**3),GAPMul(-u,v)]
    
    
    def f18(u,v):
        return [4,GAPMul(-4,v**3),GAPMul(2,u**2)-GAPMul(2,u),GAPMul(2,u**2)-u,GAPMul(u**3,v)-GAPMul(2,v**2),0,-v+2,GAPMul(-2,u**4)+GAPMul(u**5,v),GAPMul(-2,v**2),GAPMul(2,u**3),0,GAPMul(3,u)-1,u**3-GAPMul(3,v**2),GAPMul(-u,v)+u-1,u,u**3-GAPMul(u**2,v),-3+v,-u**6+GAPMul(3,u**4),GAPMul(u**2,v)-u**2+u,-u**2,-u**2+GAPMul(u,v),GAPMul(u,v)-GAPMul(2,u)+1,GAPMul(-2,u),GAPMul(2,v**2),0]
    
    
    def f20(u,v):
        return [4,GAPMul(-4,v**3),2-GAPMul(2,u),2-u,GAPMul(-2,u)+GAPMul(u,v),0,-v+2,GAPMul(u,v)-GAPMul(2,u**2),GAPMul(-2,v**2),GAPMul(2,u),0,-3+u,GAPMul(3,u)-1,v-1+u,-1,-1+GAPMul(u,v),-3+v,-1+GAPMul(3,u**2),v-1+u,-1,-1+GAPMul(u,v),2-v-u,2,GAPMul(-2,v**2),0]
    
    
    def f22(u,v):
        return [8,GAPMul(-8,v**6),GAPMul(2,v**2)-GAPMul(4,u)+2,4-GAPMul(2,u),GAPMul(-v**4,u)-GAPMul(u,v**2),0,GAPMul(-3,v)+1,GAPMul(2,v**2)-GAPMul(u,v**2),GAPMul(2,v**4),GAPMul(-2,u),0,-6+GAPMul(2,u),GAPMul(-2,v**3)+GAPMul(3,u),GAPMul(-u,v)-1-v**2+GAPMul(2,v),v,GAPMul(2,u)-1-v**2,GAPMul(4,v)-4,v**3-GAPMul(3,v**2)+GAPMul(3,u**2)-1,GAPMul(-u,v)+u-2+GAPMul(2,v),v-1,GAPMul(-u,v**2)+GAPMul(u,v),GAPMul(u,v)-u-GAPMul(3,v)+3,2-GAPMul(2,v),0,0]
    
    
    def f24(u,v):
        return [8,GAPMul(-8,v**3),GAPMul(2,u**2)-GAPMul(4,u)+2,GAPMul(-3,u)+1,GAPMul(-u**2,v)+GAPMul(2,v**2),0,GAPMul(-2,v)+4,GAPMul(-u**4,v)-GAPMul(u**2,v),GAPMul(2,v**2),GAPMul(-2,u**2),0,-4+GAPMul(4,u),u**3-GAPMul(3,v**2)+GAPMul(3,u)-1,GAPMul(-u,v)+GAPMul(2,u)-2,-1+u,GAPMul(u,v)-GAPMul(u**2,v),-6+GAPMul(2,v),GAPMul(-2,u**3)+GAPMul(3,u**2),-u**2-GAPMul(u,v)+GAPMul(2,u)-1,u,-u**2+GAPMul(2,u)-1,GAPMul(-3,u)+GAPMul(u,v)-v+3,GAPMul(-2,u)+2,0,0]
    
    
    tbl["irreducibles"]=GAPMul([dual(f4),f2(u,v),dual(f2),f4(u,v),dual(f6),f6(u,v),dual(f8),f8(u,v),[4,GAPMul(4,u**6),v**2+GAPMul(v**2,u**2),GAPMul(-2,u),GAPMul(-2,v**3),GAPMul(4,v**3),GAPMul(-2,v),GAPMul(-2,v**2),GAPMul(v**4,u**4),GAPMul(v**2,u**2),GAPMul(u,v),GAPMul(2,u)-2,GAPMul(-2,v**3)+GAPMul(2,v**3),v-GAPMul(u,v),v-GAPMul(u,v),0,GAPMul(2,v)-2,GAPMul(2,v**3)-GAPMul(2,u**3),GAPMul(-u,v)+u,GAPMul(-u,v)+u,0,GAPMul(u,v)-v+1-u,GAPMul(u,v)-v+1-u,GAPMul(-v**4,u**3)+GAPMul(v**4,u**4)-GAPMul(v**3,u**4)+GAPMul(v**3,u**3),0],dual(f13),f11(u,v),dual(f11),f13(u,v),[6,GAPMul(6,u**6),u**2-GAPMul(4,u)+v**2,1-GAPMul(2,u)+u**2,GAPMul(v**2,u**2)+GAPMul(v**4,u**2)-GAPMul(2,v**3),GAPMul(2,v**3),1+v**2-GAPMul(2,v),GAPMul(v**2,u**2)-GAPMul(2,v**2)+GAPMul(v**2,u**4),GAPMul(3,v**4),GAPMul(3,v**2),GAPMul(-u,v),-3+GAPMul(3,u),GAPMul(-3,v**2)+GAPMul(3,v**4),GAPMul(u,v**2)-GAPMul(u,v)+v-1,0,GAPMul(u,v)-GAPMul(u**2,v),-3+GAPMul(3,v),GAPMul(-3,v**2)+GAPMul(3,u**4),GAPMul(u**2,v)-GAPMul(u,v)+u-1,0,GAPMul(-u,v**2)+GAPMul(u,v),-u+GAPMul(2,u)-v+2,-v-u,GAPMul(-v**4,u**3)-GAPMul(v**3,u**4),0],[6,GAPMul(6,u**6),GAPMul(-4,u)+GAPMul(v**2,u**2),1-GAPMul(2,u)+u**2,GAPMul(v**2,u**2)+GAPMul(v**4,u**2)-GAPMul(2,v**3),GAPMul(2,v**3),1+v**2-GAPMul(2,v),GAPMul(v**2,u**2)-GAPMul(2,v**2)+GAPMul(v**2,u**4),GAPMul(3,v**4),GAPMul(3,v**2),GAPMul(-u,v),-3+GAPMul(3,u),GAPMul(3,u)-GAPMul(3,v**4),-v**2+v-GAPMul(u,v)+u,0,GAPMul(u,v)-GAPMul(u**2,v),-3+GAPMul(3,v),GAPMul(-3,v**2)+GAPMul(3,u**2),-u**2-GAPMul(u,v)+u,0,GAPMul(-u,v**2)+GAPMul(u,v),GAPMul(-2,u)+GAPMul(u,v)-GAPMul(2,v)+1,GAPMul(u,v)+1,GAPMul(v**4,u**4)+GAPMul(v**3,u**3),0],[12,GAPMul(12,u**6),1+GAPMul(v**2,u**2)-GAPMul(8,u)+u**2,GAPMul(2,u**2)-GAPMul(4,u)+2,GAPMul(2,v**3)-GAPMul(v**4,u**2)-GAPMul(v**2,u**2),GAPMul(4,v**3),2-GAPMul(4,v)+GAPMul(2,v**2),GAPMul(2,v**2)-GAPMul(v**2,u**4)-GAPMul(v**2,u**2),GAPMul(-3,v**4),GAPMul(-3,v**2),GAPMul(u,v),-6+GAPMul(6,u),GAPMul(-3,v**2)+GAPMul(3,u)-GAPMul(3,v**4)+GAPMul(3,v**4),GAPMul(-2,u)+u-v**2+GAPMul(2,v)-1,0,GAPMul(2,u)-GAPMul(2,u**2),-6+GAPMul(6,v),GAPMul(-3,v**2)+GAPMul(3,u**2)-GAPMul(3,v**2)+GAPMul(3,u**4),GAPMul(u**2,v)-u**2-GAPMul(2,u)+GAPMul(2,u)-1,0,GAPMul(-2,u)+GAPMul(2,u),3-GAPMul(3,u)-GAPMul(3,v)+GAPMul(3,u),GAPMul(u,v)-v+1-u,GAPMul(-v**4,u**3)+GAPMul(v**4,u**4)-GAPMul(v**3,u**4)+GAPMul(v**3,u**3),0],dual(f20),f18(u,v),dual(f18),f20(u,v),dual(f22),f22(u,v),dual(f24),f24(u,v),[16,GAPMul(-16,u**6),2+GAPMul(2,v**2)-GAPMul(8,u)+GAPMul(2,v**2),GAPMul(-6,u)+GAPMul(2,u**2),GAPMul(v**4,u**2)+GAPMul(v**2,u**2),0,GAPMul(2,v**2)-GAPMul(6,v)+2,GAPMul(v**2,u**4)+GAPMul(v**2,u**2),GAPMul(-2,v**4),GAPMul(2,v**2),0,-8+GAPMul(8,u),GAPMul(v**2,u-1),GAPMul(u,v**2)-GAPMul(3,u)-v**2+GAPMul(3,v)-1+u,v-GAPMul(u,v),GAPMul(2,u)-GAPMul(2,u**2),-8+GAPMul(8,v),GAPMul(-u**2,v-1),GAPMul(u**2-GAPMul(3,u)+1,v-1),GAPMul(-u,v)+u,GAPMul(-2,u),GAPMul(4,v-1),GAPMul(2,v-1),0,0]],u**0)
    tbl["irredinfo"]=map(lambda x: {"charparam":x,
        "charname":ChevieData["F4"]["CharName"](x,{})},ChevieData["F4"]["CharInfo"]()["charparams"])
    tbl=ChevieData["compat"]["MakeCharacterTable"](tbl)
    ChevieData["compat"]["AdjustHeckeCharTable"](tbl,param)
    return tbl

def eylf49(a,w):
    return GAPMul(a,-u**Number(w,lambda j: j in [1,2]))

ChevieData["F4"]["HeckeCharTable"]=eylf48

def eylf410(param):
    return ChevieData["F4"]["SchurElement"]([1,0],param,false)

ChevieData["F4"]["PoincarePolynomial"]=eylf410

ChevieData["F4"]["SchurModels"]={"f1_0":{"vcyc":[[[0,0,1,-1],1],[[0,0,1,-1],6],[[1,-1,0,0],1],[[1,-1,0,0],6],[[1,-1,2,-2],1],[[1,-1,1,-1],6],[[2,-2,1,-1],1],[[1,-1,1,-1],4],[[1,-1,1,-1],2],[[1,-1,1,-1],2]]},
    "f2_4s":{"coeff":-1,
    "factor":[0,0,-1,1],
    "vcyc":[[[0,0,1,-1],6],[[1,-1,0,0],3],[[1,-1,0,0],6],[[1,-1,0,0],1],[[1,-1,0,0],1],[[2,-2,1,-1],1],[[1,-1,1,-1],2],[[1,-1,-1,1],2],[[2,-2,-1,1],1]]},
    "f4_8":{"coeff":2,
    "vcyc":[[[0,0,1,-1],6],[[-1,1,0,0],6],[[1,-1,-1,1],2],[[1,-1,-1,1],2],[[-1,1,-1,1],2],[[1,-1,1,-1],2]]},
    "f9_2":{"vcyc":[[[0,0,1,-1],1],[[1,-1,0,0],1],[[1,-1,-2,2],1],[[1,-1,1,-1],4],[[-2,2,1,-1],1],[[1,-1,1,-1],2],[[1,-1,1,-1],2]]},
    "f6_6s":{"coeff":3,
    "vcyc":[[[0,0,-1,1],1],[[0,0,-1,1],1],[[-1,1,0,0],1],[[-1,1,0,0],1],[[1,-1,1,-1],6],[[1,-1,-1,1],2],[[-1,1,1,-1],2]]},
    "f12_4":{"coeff":6,
    "vcyc":[[[0,0,1,-1],3],[[-1,1,0,0],3],[[1,-1,-1,1],2],[[1,-1,-1,1],2],[[1,-1,1,-1],2],[[-1,1,-1,1],2]]},
    "f4_1":{"vcyc":[[[0,0,1,-1],1],[[0,0,1,-1],6],[[-1,1,0,0],1],[[1,-1,0,0],6],[[1,-1,-1,1],2],[[1,-1,1,-1],6],[[1,-1,1,-1],2],[[1,-1,1,-1],2]]},
    "f8_3s":{"coeff":-1,
    "factor":[0,0,-1,1],
    "vcyc":[[[0,0,1,-1],6],[[1,-1,0,0],6],[[1,-1,0,0],1],[[-1,1,0,0],1],[[1,-1,0,0],3],[[1,-1,-2,2],1],[[1,-1,2,-2],1]]},
    "f16_5":{"coeff":2,
    "factor":[-1,1,-1,1],
    "vcyc":[[[0,0,1,-1],6],[[-1,1,0,0],6],[[1,-1,-1,1],4],[[1,-1,1,-1],4]]}}

ChevieData["F4"]["SchurData"]=[{"name":"f1_0",
    "order":[1,2,3,4]},{"name":"f1_0",
    "order":[1,2,4,3]},{"name":"f1_0",
    "order":[2,1,3,4]},{"name":"f1_0",
    "order":[2,1,4,3]},{"name":"f2_4s",
    "order":[1,2,3,4]},{"name":"f2_4s",
    "order":[2,1,3,4]},{"name":"f2_4s",
    "order":[3,4,1,2]},{"name":"f2_4s",
    "order":[4,3,1,2]},{"name":"f4_8",
    "order":[1,2,3,4]},{"name":"f9_2",
    "order":[1,2,3,4]},{"name":"f9_2",
    "order":[1,2,4,3]},{"name":"f9_2",
    "order":[2,1,3,4]},{"name":"f9_2",
    "order":[2,1,4,3]},{"name":"f6_6s",
    "order":[1,2,4,3]},{"name":"f6_6s",
    "order":[1,2,3,4]},{"name":"f12_4",
    "order":[1,2,3,4]},{"name":"f4_1",
    "order":[1,2,3,4]},{"name":"f4_1",
    "order":[1,2,4,3]},{"name":"f4_1",
    "order":[2,1,3,4]},{"name":"f4_1",
    "order":[2,1,4,3]},{"name":"f8_3s",
    "order":[1,2,3,4]},{"name":"f8_3s",
    "order":[2,1,3,4]},{"name":"f8_3s",
    "order":[3,4,1,2]},{"name":"f8_3s",
    "order":[4,3,1,2]},{"name":"f16_5",
    "order":[1,2,3,4]}]

def eylf411(i):
    return ChevieData["F4"]["HeckeRepresentation"](map(lambda x: [1,-1],range(1,4+1)),[1,1,1,1],i)

ChevieData["F4"]["Representation"]=eylf411

ChevieData["F4"]["WGraphs"]=[[[[]],[]],[[[3,4]],[]],2,1,[[[3],[4]],[[1,[[1,2]]]]],5,[[[1],[2]],[[1,[[1,2]]]]],7,[[[1,3],[1,4],[2,3],[2,4]],[[1,[[1,2,3],[2,4],[3,4]]]]],[[[1],[1,3],[1,4],[2],1,[2,4],[3],1,[4]],[[1,[[1,2,5],[2,3,4,8],[3,6],[4,6,7],[5,8],[6,8,9],[7,9]]]]],[[[1,3],[1,3,4],[1,4],[2,3],[2,4],1,[3],[3,4],1],[[[2,1],[[5,8]]],[-2,[[2,9]]],[1,[[1,3,4],[2,3,6,8],[3,5],[4,5],[6,7],[7,8,9]]],[2,[[4,7]]]]],11,10,[[[1,2,4],[1,3],[1,3,4],[2],[2,4],[3]],[[1,[[1,2,5],[2,3,4,6],[3,5],[4,5],[5,6]]]]],[[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]],[[[2,1],[[1,2],[5,6]]],[1,[[2,3,4],[3,5],[4,5]]]]],[[[1,2],[1,2,4],[1,3],1,[1,3,4],[1,4],[2],[2,3],[2,4],1,[3],[3,4]],[[[1,2],[[1,4]]],[[2,1],[[9,12]]],[1,[[1,7],[2,3],[3,7],[4,6,8],[5,10],[6,9],[8,9],[10,11],[11,12]]],[2,[[2,10],[3,5,11],[7,8,10],[8,11]]],[3,[[1,2],[2,6],[5,6,12]]]]],[[[1],[2],[3],[4]],[[[-1,-2],[[2,3]]],[-1,[[1,2],[3,4]]]]],[[[1,3,4],[2,4],[3],[3,4]],[[-1,[[3,4]]],[1,[[1,2,4],[2,3]]]]],18,17,[[[1,3],[1,4],[2],[2,4],[3],1,[3,4],[4]],[[1,[[1,2,3,5],[2,4],[3,4,6],[4,5,7],[6,7,8]]]]],21,[[[1],[1,2],[1,3],[1,4],[2],1,[2,4],[3]],[[1,[[1,6],[2,3,6],[3,4,5,8],[4,7],[5,7],[6,8],[7,8]]]]],23,[[[1,2],[1,2,4],[1,3],2,[1,3,4],[1,4],1,[2],[2,3],1,[2,4],2,[3],[3,4]],[[[1,2],[[13,16]]],[1,[[1,2,4,5,9],[2,3,7,8,14],[3,9,15],[4,7,10],[5,8,11],[6,14,16],[7,12],[8,13],[9,10,11],[10,12],[11,13,15],[14,15],[15,16]]],[2,[[3,6],[6,8],[9,14]]]]]]

def eylf412(i):
    gr=ChevieData["F4"]["WGraphs"]
    if IsInt(gr[i-1]) :
        return DualWGraph(4,gr[gr[i-1]-1])
    else:
        return gr[i-1]

ChevieData["F4"]["WGraph"]=eylf412

def eylf413(param,sqrtparam,i):
    u=GAPDiv(-param[1-1][1-1],param[1-1][2-1])
    v=GAPDiv(-param[3-1][1-1],param[3-1][2-1])
    if not sqrtparam[1]==None :
        u=GetRoot(u,2,"Representation(Hecke(F4),[",i,"])")
    else:
        u=sqrtparam[1-1]
    if not sqrtparam[3]==None :
        v=GetRoot(v,2,"Representation(Hecke(F4),[",i,"])")
    else:
        v=sqrtparam[3-1]
    if u==v :
        return GAPMul(-param[1-1][2-1],WGraphToRepresentation(4,ChevieData["F4"]["WGraph"](i),v))
    else:
        r=[[[[u**2]],[[u**2]],[[v**2]],[[v**2]]],[[[u**2]],[[u**2]],[[-1]],[[-1]]],[[[-1]],[[-1]],[[v**2]],[[v**2]]],[[[-1]],[[-1]],[[-1]],[[-1]]],[[[u**2,0],[0,u**2]],[[u**2,0],[0,u**2]],[[-1,0],[v,v**2]],[[v**2,v],[0,-1]]],[[[-1,0],[0,-1]],[[-1,0],[0,-1]],[[-1,0],[v,v**2]],[[v**2,v],[0,-1]]],[[[-1,0],[u,u**2]],[[u**2,u],[0,-1]],[[v**2,0],[0,v**2]],[[v**2,0],[0,v**2]]],[[[-1,0],[u,u**2]],[[u**2,u],[0,-1]],[[-1,0],[0,-1]],[[-1,0],[0,-1]]],[[[-1,0,0,0],[u,u**2,0,0],[0,0,-1,0],[0,0,u,u**2]],[[u**2,u,0,0],[0,-1,0,0],[0,0,u**2,u],[0,0,0,-1]],[[-1,0,0,0],[0,-1,0,0],[v,0,v**2,0],[0,v,0,v**2]],[[v**2,0,v,0],[0,v**2,0,v],[0,0,-1,0],[0,0,0,-1]]],[[[u**2,0,u,0,0,0,0,0,0],[0,u**2,0,0,u,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,0,u,u**2,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,u,u**2,0,0,0],[0,0,u,0,0,0,u**2,0,0],[0,0,0,0,0,0,0,u**2,u],[0,0,0,0,0,0,0,0,-1]],[[u**2,0,0,0,0,0,0,0,0],[0,u**2,0,0,0,0,0,0,0],[0,0,u**2,u,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,0,u**2,u,0,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,u**2,u,0],[0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,u,u**2]],[[-1,0,0,0,0,0,0,0,0],[v,v**2,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[GAPMul(GAPDiv(1,u**2),v**2)+u**2,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,0,0,0,0],[0,0,v,0,v**2,0,0,0,0],[0,0,0,0,0,v**2,v,0,0],[0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0],[0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,0,0,0,0,v**2]],[[v**2,v,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,0,v**2,0,v,0,0,0,0],[0,0,0,v**2,0,v,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,v,v**2,0,0],[0,0,0,0,0,GAPMul(-u-GAPDiv(1,u),v),0,v**2,0],[0,0,0,0,GAPMul(-u-GAPDiv(1,u),v),0,0,0,v**2]]],[[[u**2,u,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,u,u**2,0,0,0,0,0,0],[0,0,0,u**2,0,0,0,0,0],[0,u,0,0,u**2,0,0,0,0],[0,0,0,0,0,u**2,0,u,0],[0,0,0,0,0,0,u**2,0,u],[0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,-1]],[[u**2,0,0,0,0,0,0,0,0],[0,u**2,u,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,0,0,u**2,0,u,0,0,0],[0,0,0,0,u**2,0,u,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,u,0,u**2,0],[0,0,0,0,0,0,u,0,u**2]],[[-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[GAPMul(GAPDiv(1,u**2),v**2)+u**2,GAPMul(GAPDiv(1,u),v**2)+u,v**2,v,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v,v**2,0,0],[0,0,0,0,0,0,0,-1,0],[0,GAPMul(GAPDiv(1,u),v**2)+u,0,0,0,0,0,v,v**2]],[[-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[GAPMul(u**2+GAPDiv(1,u**2),v),GAPMul(u+GAPDiv(1,u),v),v,v**2,v,0,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,v**2,v,0,0],[0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,v**2,v],[0,0,0,0,0,0,0,0,-1]]],[[[u**2,0,u,0,0,0,0,0,0],[0,u**2,0,0,u,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,-1,0,0],[0,0,0,u,0,0,u,u**2,u],[0,0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[u,0,u**2,u,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,u,0,0,u**2,u,0,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,u**2,u,0],[0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0,0],[v,v**2,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,0,0,0,0],[0,0,v,0,v**2,0,0,0,0],[0,0,0,0,0,v**2,v,0,0],[0,0,0,0,0,0,-1,0,0],[GAPMul(GAPDiv(1,u),v**2)+u,0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0],[0,0,0,0,0,0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,v**2]],[[v**2,v,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,0,v**2,0,v,0,0,0,0],[0,0,0,v**2,0,v,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,v,v**2,0,0],[0,0,0,0,0,GAPMul(-u-GAPDiv(1,u),v),0,v**2,0],[0,0,0,0,0,GAPMul(u**2+GAPDiv(1,u**2),v),0,0,v**2]]],[[[u**2,u,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,u,u**2,0,0,u,0],[0,0,0,0,0,-1,0,0,0],[0,0,u,0,0,u,u**2,0,u],[0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0,0],[u,u**2,u,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,0,0,u**2,u,0,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,u**2,u,0,0],[0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,v,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,-1,0,0,0],[GAPMul(GAPDiv(1,u),v**2)+u,0,0,0,v,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,0],[0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,v,v**2]],[[-1,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0],[0,GAPMul(u+GAPDiv(1,u),v),v,v**2,0,v,0,0,0],[GAPMul(u+GAPDiv(1,u),v),0,0,0,v**2,0,v,0,0],[0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,v**2,v],[0,0,0,0,0,0,0,0,-1]]],[[[-1,0,0,0,0,0],[u,u**2,0,u,0,0],[0,0,u**2,0,u,0],[0,0,0,-1,0,0],[0,0,0,0,-1,0],[0,0,0,0,u,u**2]],[[u**2,u,0,0,0,0],[0,-1,0,0,0,0],[0,0,u**2,0,0,0],[0,0,0,-1,0,0],[0,0,0,0,u**2,u],[0,0,0,0,0,-1]],[[-1,0,0,0,0,0],[GAPMul(GAPDiv(1,u),v**2)+u,v**2,v,0,0,0],[0,0,-1,0,0,0],[GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,0,v**2,v,0],[0,0,0,0,-1,0],[0,0,GAPMul(GAPDiv(1,u**2),v**2)+u**2,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2]],[[-1,0,0,0,0,0],[0,-1,0,0,0,0],[GAPMul(u+GAPDiv(1,u),v),v,v**2,0,0,0],[0,0,0,-1,0,0],[GAPMul(-u**2-1-GAPDiv(1,u**2),v),0,0,v,v**2,0],[0,GAPMul(-u**2-1-GAPDiv(1,u**2),v),0,GAPMul(-u-GAPDiv(1,u),v),0,v**2]]],[[[u**2,0,0,0,0,0],[0,u**2,u,0,0,0],[0,0,-1,0,0,0],[0,0,0,u**2,u,0],[0,0,0,0,-1,0],[0,0,0,0,0,-1]],[[u**2,0,0,-u,0,0],[0,-1,0,0,0,0],[0,u,u**2,0,0,u],[0,0,0,-1,0,0],[0,0,0,u,u**2,0],[0,0,0,0,0,-1]],[[-1,0,0,0,0,0],[0,-1,0,0,0,0],[0,0,-1,0,0,0],[GAPMul(GAPDiv(-1,u),v**2)-u,v,0,v**2,0,0],[0,0,v,0,v**2,0],[0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,0,v**2]],[[-1,0,0,0,0,0],[0,v**2,0,v,0,0],[0,0,v**2,0,v,0],[0,0,0,-1,0,0],[0,0,0,0,-1,0],[0,0,0,0,0,v**2]]],[[[u**2,0,0,u,0,0,0,0,0,0,0,0],[0,u**2,0,0,u,0,0,0,0,0,0,0],[0,0,u**2,0,0,0,0,u,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,u,0,u**2,0,0,0,u,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,u**2,0,u,0],[0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,GAPMul(3,u),0,0,0,u,u**2]],[[u**2,0,u,0,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,u**2,0,u,0,0,0,0,0,0],[0,u,0,0,u**2,0,u,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,u,0,0,0,0,u**2,0,u,0,0],[0,GAPMul(3,u),0,0,0,0,0,0,u**2,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,u**2,u],[0,0,0,0,0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0],[GAPMul(GAPDiv(1,u),v**2)+u,v,v**2,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,0,0,v,0,0,0],[0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,0,0,0,0,0],[0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v,0,0,v**2,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,0,0,0,0,v**2,v,0],[0,0,0,0,0,0,0,0,0,0,-1,0],[0,GAPMul(GAPDiv(3,u),v**2)+GAPMul(3,u),0,0,0,0,0,0,GAPMul(GAPDiv(1,u**2),v**2)+u**2,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2]],[[-1,0,0,0,0,0,0,0,0,0,0,0],[0,v**2,v,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,v**2,0,0,v,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,v**2,0,0,v,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0],[GAPMul(3,v),0,0,GAPMul(u+GAPDiv(1,u),v),0,v,0,0,v**2,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,GAPMul(-u**2+2-GAPDiv(1,u**2),v),0,0,0,0,0,v,v**2,0],[0,0,0,0,0,GAPMul(-u**2+2-GAPDiv(1,u**2),v),0,0,0,GAPMul(-u-GAPDiv(1,u),v),0,v**2]]],[[[u**2,0,0,0],[0,u**2,0,0],[0,0,u**2,u],[0,0,0,-1]],[[u**2,0,u,0],[0,u**2,0,0],[0,0,-1,0],[0,0,u,u**2]],[[-1,0,0,0],[v,v**2,0,0],[GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,0],[0,0,0,v**2]],[[v**2,v,0,0],[0,-1,0,0],[0,0,v**2,0],[0,0,0,v**2]]],[[[u**2,u,0,0],[0,-1,0,0],[0,u,u**2,0],[0,0,0,u**2]],[[u**2,0,0,0],[0,u**2,u,0],[0,0,-1,0],[0,0,0,u**2]],[[-1,0,0,0],[0,-1,0,0],[GAPMul(GAPDiv(1,u**2),v**2)+u**2,GAPMul(GAPDiv(1,u),v**2)+u,v**2,v],[0,0,0,-1]],[[-1,0,0,0],[0,-1,0,0],[0,0,-1,0],[GAPMul(u**2+1,v),GAPMul(u+GAPDiv(1,u),v),v,v**2]]],[[[-1,0,0,0],[0,-1,0,0],[0,u,u**2,u],[0,0,0,-1]],[[-1,0,0,0],[0,u**2,u,0],[0,0,-1,0],[0,0,0,-1]],[[v**2,v,0,0],[0,-1,0,0],[0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0],[0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,v**2]],[[-1,0,0,0],[v,v**2,0,0],[GAPMul(-u-GAPDiv(1,u),v),0,v**2,0],[GAPMul(u**2+1,v),0,0,v**2]]],[[[u**2,0,u,0],[0,-1,0,0],[0,0,-1,0],[0,0,0,-1]],[[-1,0,0,0],[0,-1,0,0],[u,0,u**2,u],[0,0,0,-1]],[[-1,0,0,0],[0,-1,0,0],[0,0,-1,0],[0,v,GAPMul(GAPDiv(1,u),v**2)+u,v**2]],[[-1,0,0,0],[0,v**2,0,v],[0,0,-1,0],[0,0,0,-1]]],[[[u**2,0,0,0,0,0,0,0],[0,u**2,0,u,0,0,0,0],[0,0,u**2,0,u,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,0],[0,0,0,0,u,u**2,0,0],[0,0,0,0,0,0,u**2,0],[0,0,0,0,0,0,0,u**2]],[[u**2,u,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,u**2,0,0,0,0,0],[0,u,0,u**2,0,0,0,0],[0,0,0,0,u**2,u,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,u**2,0],[0,0,0,0,0,0,0,u**2]],[[-1,0,0,0,0,0,0,0],[GAPMul(GAPDiv(1,u),v**2)+u,v**2,v,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,0,v**2,v,0,0,0],[0,0,0,0,-1,0,0,0],[0,0,GAPMul(GAPDiv(1,u**2),v**2)+u**2,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,v,0],[0,0,0,0,0,0,-1,0],[GAPMul(u**3+GAPDiv(1,u**3),v),0,0,0,0,0,v,v**2]],[[-1,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[GAPMul(u+GAPDiv(1,u),v),v,v**2,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,v,v**2,0,0,0],[0,v,0,0,0,v**2,0,0],[0,0,0,0,0,0,v**2,v],[0,0,0,0,0,0,0,-1]]],[[[-1,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,u,u**2,0,u,0,0],[0,0,0,0,u**2,0,u,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,u**2,u,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,u,0,u**2,u],[0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0],[v,v**2,v,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,v,0,0,0],[0,0,0,0,-1,0,0,0],[0,0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,0,v**2,v,0],[0,0,0,0,0,0,-1,0],[GAPMul(-u**3-GAPDiv(1,u**3),v),0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2]],[[v**2,v,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,v,v**2,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,v,0,0,v,v**2,0],[0,0,0,0,0,GAPMul(-u-GAPDiv(1,u),v),0,v**2]]],[[[u**2,0,u,0,0,0,0,0],[0,u**2,0,0,u,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,0,u**2,0,0,u,0],[0,0,0,0,-1,0,0,0],[0,0,0,0,u,u**2,0,u],[0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0],[0,u**2,0,u,0,0,0,0],[u,0,u**2,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,u**2,u,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,u,0,0,u**2,u],[0,0,0,0,0,0,0,-1]],[[v**2,v,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,v**2,0,v,0,0,0],[0,GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,0,0,0,0],[0,0,0,0,-1,0,0,0],[0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,0],[0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,0],[0,0,0,0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,0,v**2]],[[-1,0,0,0,0,0,0,0],[v,v**2,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[GAPMul(-u-GAPDiv(1,u),v),0,0,v**2,0,0,0,0],[0,0,v,0,v**2,0,0,0],[v,0,0,0,0,v**2,0,0],[0,0,GAPMul(-u-GAPDiv(1,u),v),0,0,0,v**2,0],[0,0,0,0,0,0,0,v**2]]],[[[u**2,0,u,0,0,0,0,0],[0,u**2,0,0,u,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,u,u**2,0,0,u,0],[0,0,0,0,-1,0,0,0],[0,0,0,0,0,u**2,0,u],[0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,-1]],[[u**2,u,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,u**2,u,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,u,0,0,u**2,0,u,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,-1,0],[0,0,0,0,0,u,0,u**2]],[[-1,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[GAPMul(GAPDiv(1,u**2),v**2)+u**2,GAPMul(GAPDiv(1,u),v**2)+u,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,v,0,0],[0,0,0,0,-1,0,0,0],[0,0,0,0,0,-1,0,0],[0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,v],[0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,-1,0,0,0],[0,GAPMul(u+GAPDiv(1,u),v),0,v,0,v**2,0,0],[0,0,0,0,0,0,-1,0],[0,0,v,0,GAPMul(u+GAPDiv(1,u),v),0,v,v**2]]],[[[u**2,0,u,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,u**2,0,0,u,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,u**2,0,0,u,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,u**2,0,0,0,u,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,u,u**2,0,0,0,u,0,0,0,0],[0,0,0,0,0,0,0,0,u**2,0,0,0,u,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,u**2,0,0,0,u,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,u,u,u**2]],[[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[u,0,u**2,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,u**2,0,u,0,0,0,0,0,0,0,0,0,0],[0,u,0,0,u**2,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,u**2,u,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,u,0,0,0,u**2,0,u,0,0,0,0],[0,0,0,0,0,0,0,0,u,0,u**2,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,u,0,0,0,u**2,u,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,u**2,u],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1]],[[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[v,v**2,0,GAPMul(2,v),0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,v,0,v**2,0,GAPMul(2,v),0,0,0,0,0,0,0,0,0],[0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,v**2,0,0,v,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,0,v,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,0,v**2,0,0,v,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,GAPMul(GAPDiv(-1,u**2),v**2)-u**2,0,0,0,0,v**2,0,0,v,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],[0,0,-v,0,0,0,0,0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0],[-v,0,0,0,0,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,0,GAPMul(GAPDiv(1,u**2),v**2)+u**2,0,0,0,GAPMul(GAPDiv(1,u),v**2)+u,v**2]],[[v**2,v,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,v**2,0,v,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,v,0,0,v**2,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,v,0,0,GAPMul(u+GAPDiv(1,u),v),v,0,0,v**2,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,v,0,0,v**2,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,v,0,v**2,0,0],[0,0,0,0,0,0,GAPMul(-u**2-GAPDiv(1,u**2),v),0,0,0,0,v,0,0,v**2,0],[0,0,0,0,0,0,0,GAPMul(-u**2-GAPDiv(1,u**2),v),0,0,0,GAPMul(-u-GAPDiv(1,u),v),0,0,0,v**2]]]]
        return GAPMul(r[i-1],u**0)

ChevieData["F4"]["HeckeRepresentation"]=eylf413

if not "families" in ChevieData :
    ReadChv("unip/families")

ChevieData["families"]["S4"]={"group":PermutationGroup([Permutation("(1,4)"),Permutation("(2,4)"),Permutation("(3,4)")]),
    "lusztig":true,
    "charLabels":["(1,1)","(1,\\lambda^{\\wedge3})","(1,\\sigma)","(1,\\lambda^{\\wedge2})","(1,\\lambda)","(g_2,1)","(g_2,\\varepsilon')","(g_2,\\varepsilon'')","(g_2,\\varepsilon)","(g'_2,1)","(g'_2,\\varepsilon)","(g'_2,\\varepsilon')","(g'_2,\\varepsilon'')","(g'_2,r)","(g_3,1)","(g_3,\\zeta_3)","(g_3,\\zeta_3^2)","(g_4,1)","(g_4,-1)","(g_4,-i)","(g_4,i)"],
    "size":21,
    "eigenvalues":[1,1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,ER(3),ER(3)**2,1,-1,ER(4),-ER(4)],
    "name":"D(S_4)",
    "explanation":"Lusztig'sDrinfeldDouble(S_4)",
    "mellin":DiagonalMat(*[[[1,1,2,3,3],[1,-1,0,-1,1],[1,1,2,-1,-1],[1,1,-1,0,0],[1,-1,0,1,-1]],[[1,1,1,1],[1,1,-1,-1],[1,-1,1,-1],[1,-1,-1,1]],[[1,1,1,1,2],[1,-1,-1,1,0],[1,1,1,1,-2],[1,-1,1,-1,0],[1,1,-1,-1,0]],[[1,1,1],[1,ER(3),ER(3)**2],[1,ER(3)**2,ER(3)]],[[1,1,1,1],[1,-1,ER(4),-ER(4)],[1,1,-1,-1],[1,-1,-ER(4),ER(4)]]]),
    "mellinLabels":["(1,1)","(1,g_2)","(1,g'_2)","(1,g_3)","(1,g_4)","(g_2,1)","(g_2,g_2)","(g_2,g'_2)","(g_2,2c)","(g'_2,1)","(g'_2,g_2)","(g'_2,g'_2)","(g'_2,2c)","(g'_2,g_4)","(g_3,1)","(g_3,g_3)","(g_3,g_3^2)","(g_4,1)","(g_4,g_4)","(g_4,g_2)","(g_4,g_4^{-1})"],
    "fourierMat":GAPDiv([[1,1,2,3,3,6,6,6,6,3,3,3,3,6,8,8,8,6,6,6,6],[1,1,2,3,3,-6,-6,-6,-6,3,3,3,3,6,8,8,8,-6,-6,-6,-6],[2,2,4,6,6,0,0,0,0,6,6,6,6,12,-8,-8,-8,0,0,0,0],[3,3,6,9,9,-6,-6,-6,-6,-3,-3,-3,-3,-6,0,0,0,6,6,6,6],[3,3,6,9,9,6,6,6,6,-3,-3,-3,-3,-6,0,0,0,-6,-6,-6,-6],[6,-6,0,-6,6,12,0,0,-12,6,-6,-6,6,0,0,0,0,0,0,0,0],[6,-6,0,-6,6,0,12,-12,0,-6,6,6,-6,0,0,0,0,0,0,0,0],[6,-6,0,-6,6,0,-12,12,0,-6,6,6,-6,0,0,0,0,0,0,0,0],[6,-6,0,-6,6,-12,0,0,12,6,-6,-6,6,0,0,0,0,0,0,0,0],[3,3,6,-3,-3,6,-6,-6,6,9,-3,9,-3,-6,0,0,0,6,6,-6,-6],[3,3,6,-3,-3,-6,6,6,-6,-3,9,-3,9,-6,0,0,0,6,6,-6,-6],[3,3,6,-3,-3,-6,6,6,-6,9,-3,9,-3,-6,0,0,0,-6,-6,6,6],[3,3,6,-3,-3,6,-6,-6,6,-3,9,-3,9,-6,0,0,0,-6,-6,6,6],[6,6,12,-6,-6,0,0,0,0,-6,-6,-6,-6,12,0,0,0,0,0,0,0],[8,8,-8,0,0,0,0,0,0,0,0,0,0,0,16,-8,-8,0,0,0,0],[8,8,-8,0,0,0,0,0,0,0,0,0,0,0,-8,16,-8,0,0,0,0],[8,8,-8,0,0,0,0,0,0,0,0,0,0,0,-8,-8,16,0,0,0,0],[6,-6,0,6,-6,0,0,0,0,6,6,-6,-6,0,0,0,0,12,-12,0,0],[6,-6,0,6,-6,0,0,0,0,6,6,-6,-6,0,0,0,0,-12,12,0,0],[6,-6,0,6,-6,0,0,0,0,-6,-6,6,6,0,0,0,0,0,0,12,-12],[6,-6,0,6,-6,0,0,0,0,-6,-6,6,6,0,0,0,0,0,0,-12,12]],24),
    "perm":Permutation("(16,17)(20,21)"),
    "x":[Permutation("()"),Permutation("()"),Permutation("()"),Permutation("()"),Permutation("()"),Permutation("(1,2)"),Permutation("(1,2)"),Permutation("(1,2)"),Permutation("(1,2)"),Permutation("(1,2)(3,4)"),Permutation("(1,2)(3,4)"),Permutation("(1,2)(3,4)"),Permutation("(1,2)(3,4)"),Permutation("(1,2)(3,4)"),Permutation("(1,2,3)"),Permutation("(1,2,3)"),Permutation("(1,2,3)"),Permutation("(1,2,3,4)"),Permutation("(1,2,3,4)"),Permutation("(1,2,3,4)"),Permutation("(1,2,3,4)")],
    "y":[Permutation("()"),Permutation("(1,2)"),Permutation("(1,2)(3,4)"),Permutation("(1,2,3)"),Permutation("(1,2,3,4)"),Permutation("()"),Permutation("(3,4)"),Permutation("(1,2)"),Permutation("(1,2)(3,4)"),Permutation("()"),Permutation("(3,4)"),Permutation("(1,2)(3,4)"),Permutation("(1,3)(2,4)"),Permutation("(1,3,2,4)"),Permutation("()"),Permutation("(1,2,3)"),Permutation("(1,3,2)"),Permutation("()"),Permutation("(1,2,3,4)"),Permutation("(1,3)(2,4)"),Permutation("(1,4,3,2)")],
    "special":1}

def eylf414():
    return {"harishChandra":[{"relativeType":{"series":"F",
        "indices":range(1,4+1),
        "rank":4},
        "levi":[],
        "eigenvalue":1,
        "parameterExponents":[1,1,1,1],
        "cuspidalName":"",
        "charNumbers":range(1,25+1)},{"relativeType":{"series":"B",
        "cartanType":2,
        "indices":[4,1],
        "rank":2},
        "levi":range(2,3+1),
        "eigenvalue":-1,
        "parameterExponents":[3,3],
        "cuspidalName":"B_2",
        "charNumbers":[29,27,26,30,28]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":-1,
        "parameterExponents":[],
        "cuspidalName":"F_4[-1]",
        "charNumbers":[31]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":-ER(4),
        "parameterExponents":[],
        "cuspidalName":"F_4[-i]",
        "charNumbers":[32]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":ER(4),
        "parameterExponents":[],
        "cuspidalName":"F_4[i]",
        "charNumbers":[33]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":ER(3),
        "parameterExponents":[],
        "cuspidalName":"F_4[\\zeta_3]",
        "charNumbers":[34]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":ER(3)**2,
        "parameterExponents":[],
        "cuspidalName":"F_4[\\zeta_3^2]",
        "charNumbers":[35]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":1,
        "parameterExponents":[],
        "cuspidalName":"F_4[1]",
        "charNumbers":[36]},{"relativeType":{"series":"A",
        "indices":[],
        "rank":0},
        "levi":range(1,4+1),
        "eigenvalue":1,
        "parameterExponents":[],
        "cuspidalName":"F_4^2[1]",
        "charNumbers":[37]}],
        "families":[Family("C1",[1]),Family("C1",[4]),Family("C1",[10]),Family("C1",[13]),Family("C1",[21]),Family("C1",[22]),Family("C1",[23]),Family("C1",[24]),Family("C2",[17,5,7,30]),Family("C2",[20,8,6,26]),Family("S4",[16,37,15,3,12,25,29,19,31,11,36,2,9,27,14,34,35,18,28,33,32])],
        "a":[0,4,4,24,1,13,1,13,4,2,4,4,10,4,4,4,1,4,4,13,3,9,3,9,4,13,4,4,4,1,4,4,4,4,4,4,4],
        "A":[0,20,20,24,11,23,11,23,20,14,20,20,22,20,20,20,11,20,20,23,15,21,15,21,20,23,20,20,20,11,20,20,20,20,20,20,20]}

ChevieData["F4"]["UnipotentCharacters"]=eylf414

def eylf415(x,y,z,t):
    return GAPMul(-t,z)-GAPMul(2,x)-GAPMul(2,y)+t**2

def eylf416(x,y,z,t):
    return GAPMul(16,t)-GAPMul(12,t)-GAPMul(8,t)-GAPMul(4,t)-GAPMul(8,x)+GAPMul(12,t)-GAPMul(16,t)+GAPMul(8,t)-GAPMul(8,t)-GAPMul(8,t)-GAPMul(64,x)+GAPMul(4,t)-GAPMul(24,x)-GAPMul(24,t**2)+GAPMul(12,t**2)-GAPMul(4,t**2)-GAPMul(32,x**2)-GAPMul(12,t**2)-GAPMul(12,t**2)+GAPMul(24,t**2)-GAPMul(56,x**2)-GAPMul(4,t**2)-GAPMul(4,t**2)+GAPMul(3,t**2)-GAPMul(16,t**3)-GAPMul(16,t**3)-GAPMul(16,x**3)-GAPMul(6,t**3)-GAPMul(8,x**3)-GAPMul(16,y**3)-GAPMul(8,t**4)-GAPMul(8,t**4)+GAPMul(8,x**4)-GAPMul(4,x**4)+GAPMul(28,y**4)-GAPMul(24,x**5)-GAPMul(24,y**5)+GAPMul(8,x**6)

def eylf417(x,y,z,t):
    return GAPMul(-24,t)+GAPMul(180,t)-GAPMul(416,t)+GAPMul(360,t)-GAPMul(96,t)+GAPMul(4,t)-GAPMul(180,t)+GAPMul(408,t)-GAPMul(288,t)+GAPMul(24,t)-GAPMul(12,t)-GAPMul(48,x)+GAPMul(16,t)-GAPMul(144,t)+GAPMul(112,t)-GAPMul(16,t)+GAPMul(88,x)-GAPMul(8,t)+GAPMul(88,t)-GAPMul(32,x)-GAPMul(96,t)-GAPMul(96,t)-GAPMul(48,x)+GAPMul(32,t)-GAPMul(144,t**2)+GAPMul(408,t**2)-GAPMul(360,t**2)+GAPMul(96,t**2)-GAPMul(396,t**2)+GAPMul(288,t**2)-GAPMul(24,t**2)-GAPMul(6,t**2)+GAPMul(6,t**2)-GAPMul(84,x**2)-GAPMul(24,t**2)+GAPMul(144,t**2)-GAPMul(112,t**2)+GAPMul(8,t**2)-GAPMul(72,t**2)-GAPMul(24,t**2)+GAPMul(12,t**2)-GAPMul(84,t**2)+GAPMul(24,x**2)-GAPMul(32,t**2)-GAPMul(32,t**2)-GAPMul(3,t**2)-GAPMul(48,x**2)-GAPMul(8,x**2)-GAPMul(4,y**2)+GAPMul(28,t**3)-GAPMul(72,t**3)+GAPMul(16,t**3)-GAPMul(28,t**3)-GAPMul(8,x**3)+GAPMul(72,t**3)-GAPMul(24,t**3)-GAPMul(28,t**3)+GAPMul(20,t**3)-GAPMul(8,t**3)-GAPMul(8,t**3)-GAPMul(224,x**3)+GAPMul(9,t**3)-GAPMul(8,t**4)+GAPMul(34,t**4)-GAPMul(16,x**4)-GAPMul(36,t**4)+GAPMul(12,t**4)-GAPMul(6,t**4)-GAPMul(30,t**4)-GAPMul(120,x**4)-GAPMul(8,t**4)-GAPMul(8,t**4)+GAPMul(272,x**4)-GAPMul(12,t**4)-GAPMul(192,x**4)+GAPMul(4,x**4)-GAPMul(52,y**4)-GAPMul(24,t**5)-GAPMul(24,t**5)+GAPMul(96,x**5)-GAPMul(192,x**5)+GAPMul(9,t**5)-GAPMul(8,t**6)-GAPMul(8,t**6)-GAPMul(3,t**6)-GAPMul(48,x**6)-GAPMul(32,x**6)-GAPMul(16,y**6)

def eylf418(x,y,z,t):
    return GAPMul(200,t)+GAPMul(4812,t)-GAPMul(46976,t)+GAPMul(172024,t)-GAPMul(338160,t)+GAPMul(383248,t)-GAPMul(235264,t)+GAPMul(60096,t)-GAPMul(20,t)-GAPMul(40,x)-GAPMul(4812,t)+GAPMul(75984,t)-GAPMul(369808,t)+GAPMul(891240,t)-GAPMul(1178544,t)+GAPMul(815104,t)-GAPMul(225024,t)-GAPMul(3840,t)-GAPMul(200,t)+GAPMul(100,t)-GAPMul(58016,t)+GAPMul(395568,t)-GAPMul(1063008,t)+GAPMul(1483824,t)-GAPMul(1110112,t)+GAPMul(336544,t)-GAPMul(1480,x)-GAPMul(197784,t)+GAPMul(423624,t)-GAPMul(474992,t)+GAPMul(486112,t)-GAPMul(237408,t)-GAPMul(30720,t)+GAPMul(29008,t)-GAPMul(2160,t)+GAPMul(2240,x)-GAPMul(320304,t)-GAPMul(71200,t)+GAPMul(229728,t)-GAPMul(160,x)+GAPMul(106768,t)-GAPMul(321184,t)-GAPMul(30720,t)-GAPMul(43152,t)-GAPMul(8000,t)-GAPMul(3520,x)-GAPMul(219904,t)+GAPMul(209664,t)-GAPMul(52416,t)-GAPMul(3840,t)+GAPMul(54976,t)-GAPMul(1280,t)-GAPMul(1280,x)-GAPMul(210,t**2)-GAPMul(24768,t**2)+GAPMul(179696,t**2)-GAPMul(530472,t**2)+GAPMul(839160,t**2)-GAPMul(748576,t**2)+GAPMul(345216,t**2)-GAPMul(60096,t**2)-GAPMul(50,t**2)-GAPMul(400,x**2)+GAPMul(24768,t**2)-GAPMul(218172,t**2)+GAPMul(745512,t**2)-GAPMul(1404624,t**2)+GAPMul(1592304,t**2)-GAPMul(972528,t**2)+GAPMul(225024,t**2)-GAPMul(3666,t**2)-GAPMul(5772,x**2)+GAPMul(76952,t**2)-GAPMul(430080,t**2)+GAPMul(1027368,t**2)-GAPMul(1491200,t**2)+GAPMul(1197552,t**2)-GAPMul(336544,t**2)-GAPMul(15360,t**2)+GAPMul(28688,t**2)-GAPMul(254784,t**2)+GAPMul(254960,t**2)-GAPMul(538560,t**2)+GAPMul(237408,t**2)-GAPMul(38476,t**2)-GAPMul(93692,t**2)-GAPMul(194744,x**2)-GAPMul(310680,t**2)+GAPMul(588768,t**2)-GAPMul(229728,t**2)-GAPMul(38400,t**2)+GAPMul(168600,t**2)-GAPMul(196256,t**2)-GAPMul(437712,t**2)+GAPMul(321184,t**2)-GAPMul(178504,t**2)-GAPMul(383728,x**2)+GAPMul(329856,t**2)-GAPMul(209664,t**2)-GAPMul(15360,t**2)+GAPMul(104832,t**2)-GAPMul(82464,t**2)-GAPMul(26208,t**2)-GAPMul(54336,x**2)+GAPMul(15,t**2)-GAPMul(360,t**3)+GAPMul(45388,t**3)-GAPMul(261608,t**3)+GAPMul(668712,t**3)-GAPMul(958848,t**3)+GAPMul(730656,t**3)-GAPMul(219904,t**3)+GAPMul(4036,t**3)-GAPMul(45388,t**3)+GAPMul(275508,t**3)-GAPMul(648800,t**3)+GAPMul(915768,t**3)-GAPMul(827520,t**3)+GAPMul(314848,t**3)-GAPMul(15224,t**3)-GAPMul(116032,x**3)-GAPMul(27800,t**3)-GAPMul(39824,t**3)+GAPMul(221360,t**3)-GAPMul(174880,t**3)-GAPMul(6392,t**3)+GAPMul(375424,x**3)-GAPMul(448680,t**3)+GAPMul(440064,t**3)-GAPMul(628096,x**3)+GAPMul(405600,t**3)-GAPMul(536928,t**3)-GAPMul(174880,t**3)-GAPMul(306208,t**3)+GAPMul(517008,x**3)-GAPMul(135200,t**3)+GAPMul(358624,t**3)-GAPMul(46656,x**3)-GAPMul(219904,t**3)-GAPMul(219904,t**3)-GAPMul(227584,x**3)+GAPMul(54976,t**3)-GAPMul(75,t**3)-GAPMul(200,y**3)+GAPMul(1320,t**4)-GAPMul(43956,t**4)+GAPMul(135728,t**4)-GAPMul(213896,t**4)+GAPMul(371544,t**4)-GAPMul(365328,t**4)+GAPMul(109952,t**4)-GAPMul(4636,t**4)+GAPMul(58016,x**4)-GAPMul(137340,t**4)+GAPMul(67880,t**4)-GAPMul(180384,t**4)+GAPMul(413760,t**4)-GAPMul(157424,t**4)-GAPMul(1320,t**4)+GAPMul(49128,t**4)-GAPMul(151752,x**4)+GAPMul(3224,t**4)-GAPMul(485880,t**4)-GAPMul(7376,t**4)+GAPMul(87440,t**4)-GAPMul(110560,t**4)+GAPMul(98288,x**4)-GAPMul(146016,t**4)+GAPMul(501840,t**4)-GAPMul(220032,t**4)-GAPMul(52448,t**4)-GAPMul(1612,t**4)+GAPMul(81732,t**4)-GAPMul(310680,t**4)+GAPMul(268464,t**4)-GAPMul(856000,x**4)-GAPMul(89488,t**4)-GAPMul(157424,t**4)+GAPMul(103560,t**4)-GAPMul(143352,t**4)+GAPMul(733248,x**4)-GAPMul(111232,x**4)-GAPMul(27488,t**4)-GAPMul(27488,t**4)-GAPMul(1176,t**4)-GAPMul(83424,x**4)-GAPMul(7252,x**4)+GAPMul(820,y**4)-GAPMul(1860,t**5)+GAPMul(46716,t**5)-GAPMul(46520,t**5)-GAPMul(144552,t**5)+GAPMul(129456,t**5)-GAPMul(16760,t**5)-GAPMul(43152,x**5)-GAPMul(46716,t**5)+GAPMul(60420,t**5)-GAPMul(333000,t**5)+GAPMul(1860,t**5)-GAPMul(9612,t**5)+GAPMul(258912,x**5)-GAPMul(27800,t**5)-GAPMul(326544,t**5)+GAPMul(450240,t**5)-GAPMul(618352,x**5)+GAPMul(163272,t**5)-GAPMul(333000,t**5)+GAPMul(13900,t**5)-GAPMul(155828,t**5)+GAPMul(747328,x**5)-GAPMul(124032,x**5)-GAPMul(43152,t**5)-GAPMul(43152,t**5)-GAPMul(556160,x**5)+GAPMul(5154,t**5)-GAPMul(1760,y**5)+GAPMul(1320,t**6)-GAPMul(50908,t**6)+GAPMul(83192,t**6)-GAPMul(43152,t**6)+GAPMul(38636,t**6)-GAPMul(86304,x**6)+GAPMul(50908,t**6)-GAPMul(121668,t**6)-GAPMul(102608,t**6)+GAPMul(111000,t**6)-GAPMul(1320,t**6)-GAPMul(63688,t**6)+GAPMul(77840,x**6)-GAPMul(150080,t**6)+GAPMul(35720,t**6)-GAPMul(54424,t**6)+GAPMul(111000,t**6)-GAPMul(38476,t**6)+GAPMul(18100,t**6)-GAPMul(990848,x**6)-GAPMul(43152,t**6)-GAPMul(43152,t**6)+GAPMul(1223552,x**6)-GAPMul(7836,t**6)-GAPMul(500544,x**6)+GAPMul(14384,x**6)-GAPMul(360,t**7)+GAPMul(30288,t**7)-GAPMul(58016,t**7)-GAPMul(28088,t**7)+GAPMul(109952,x**7)-GAPMul(30288,t**7)+GAPMul(87024,t**7)-GAPMul(439808,x**7)-GAPMul(58016,t**7)-GAPMul(58016,t**7)+GAPMul(884736,x**7)-GAPMul(889856,x**7)+GAPMul(5154,t**7)-GAPMul(1280,y**7)-GAPMul(210,t**8)-GAPMul(7572,t**8)+GAPMul(14504,t**8)-GAPMul(21756,t**8)+GAPMul(210,t**8)-GAPMul(13974,t**8)-GAPMul(221184,x**8)+GAPMul(14504,t**8)-GAPMul(7252,t**8)-GAPMul(7252,t**8)-GAPMul(1176,t**8)-GAPMul(83424,x**8)-GAPMul(27488,x**8)+GAPMul(320,y**8)-GAPMul(200,t**9)-GAPMul(200,t**9)-GAPMul(75,t**9)-GAPMul(40,t**10)-GAPMul(40,t**10)+GAPMul(40,t**10)

ChevieData["F4"]["Invariants"]=[eylf415,eylf416,eylf417,eylf418]

def eylf419():
    return eylf420

def eylf420(x1,x2,x3,x4):
    return GAPMul(364500,x1)+GAPMul(54158625,x1)-GAPMul(189324,x1**2)-GAPMul(84457998,x1**2)+GAPMul(702196650,x1**2)-GAPMul(4814100,x2**2)+GAPMul(4733100,x1**2)-GAPMul(12556317582,x1**2)-GAPMul(622114976971,x1**2)-GAPMul(186084,x1**3)+GAPMul(5016600,x1**3)-GAPMul(16200,x3**3)-GAPMul(82928718,x1**3)+GAPMul(692591400,x1**3)-GAPMul(12316379112,x1**3)-GAPMul(609597781711,x1**3)+GAPMul(324,x4**4)-GAPMul(357875325,x2**4)+GAPMul(917712897954,x1**4)-GAPMul(345333825,x1**4)+GAPMul(81618138,x1**5)-GAPMul(731778525,x1**5)+GAPMul(24268541184,x1**5)-GAPMul(600612059326,x1**6)-GAPMul(3240,x1**6)-GAPMul(4030577814,x1**6)+GAPMul(11676178602,x1**6)-GAPMul(11922426972,x1**7)-GAPMul(1773880309848,x1**7)+GAPMul(157714619689,x2**8)-GAPMul(11304558162,x1**8)+GAPMul(146854662829,x1**8)-GAPMul(1710859325763,x1**8)+GAPMul(1432080,x1**9)-GAPMul(3397335204,x1**9)-GAPMul(535990067941,x1**9)-GAPMul(196915320,x1**10)+GAPMul(827101062789,x1**10)-GAPMul(407665440,x1**11)+GAPMul(499325143276,x1**11)-GAPMul(210993120,x1**12)+GAPMul(9342537960,x1**12)

ChevieData["F4"]["Discriminant"]=eylf419

def eylf421(c,p):
    if p==0 :
        p=1
    Z=lambda n: ReflectionGroup(n,1,1)
    class_=lambda n: First(uc["classes"],lambda x: x["name"]==n)
    uc={"orderPicture":Concatenation("      \tF_4\n","        |\n","      F_4(a_1)\n","        |\n","      F_4(a_2)\n","      /      \\\n","   B_3       C_3\n","      \\     /\n","      F_4(a_3)\n","\t |\n","      C_3(a_1)\n","     /       |\n","~A_2+A_1     B_2\n","    |   \\    |\n","    |     A_2+~A_1\n","    |        |\n","  ~A_2      A_2\n","     \\       |\n","      A_1+~A_1\n","\t |\n","       ~A_1\n","\t |\n","\tA_1\n","\t |\n","\t 1"),
        "classes":[{"name":"1",
        "succ":["A1"],
        "dynkin":[0,0,0,0],
        "balacarter":[],
        "red":CoxeterGroup("F",4)},{"name":"A_1",
        "succ":["~A1"],
        "dynkin":[1,0,0,0],
        "balacarter":[1],
        "red":CoxeterGroup("C",3)},{"name":"\\tilde A_1",
        "succ":["A1+~A1"],
        "dynkin":[0,0,0,1],
        "Au":Z(Gcd(2,p-1)),
        "balacarter":[3],
        "red":CoxeterGroup("A",3),
        "AuAction":ExtendedReflectionGroup(CoxeterGroup("A",3),Permutation("(1,3)"))},{"name":"A_1{+}\\tilde A_1",
        "succ":["A2","~A2"],
        "dynkin":[0,1,0,0],
        "balacarter":[1,3],
        "red":CoxeterGroup("A",1,"A",1)},{"name":"\\tilde A_2",
        "succ":["~A2+A1"],
        "dynkin":[0,0,0,2],
        "Au":Z(Gcd(2,p)),
        "balacarter":[3,4],
        "red":CoxeterGroup("G",2)},{"name":"A_2",
        "succ":["A2+~A1"],
        "dynkin":[2,0,0,0],
        "Au":Z(2),
        "balacarter":[1,2],
        "red":CoxeterGroup("A",2),
        "AuAction":ExtendedReflectionGroup(CoxeterGroup("A",2),Permutation("(1,2)"))},{"name":"A_2{+}\\tilde A_1",
        "succ":["~A2+A1","B2"],
        "dynkin":[0,0,1,0],
        "balacarter":[1,2,4],
        "red":Z(2)},{"name":"\\tilde A_2{+}A_1",
        "succ":["C3(a1)"],
        "dynkin":[0,1,0,1],
        "balacarter":[1,3,4],
        "red":Z(2)},{"name":"B_2",
        "succ":["C3(a1)"],
        "dynkin":[2,0,0,1],
        "Au":Z(Gcd(p-1,2)),
        "balacarter":[2,3],
        "red":CoxeterGroup("A",1,"A",1),
        "AuAction":ExtendedReflectionGroup(CoxeterGroup("A",1,"A",1),Permutation("(1,2)"))},{"name":"C_3(a_1)",
        "shoji":"A_1{+}B_2",
        "succ":["F4(a3)"],
        "dynkin":[1,0,1,0],
        "Au":Z(Gcd(p-1,2)),
        "balacarter":[2,-3,4],
        "red":Z(2)},{"name":"F_4(a_3)",
        "shoji":"A_3{+}\\tilde A_1",
        "succ":["C3","B3"],
        "dynkin":[0,2,0,0],
        "Au":CoxeterGroup("A",4-Gcd(p,2)),
        "balacarter":[-1,2,-3,-4]},{"name":"C_3",
        "succ":["F4(a2)"],
        "dynkin":[1,0,1,2],
        "Au":Z(Gcd(p,2)),
        "balacarter":[2,3,4],
        "red":Z(2)},{"name":"B_3",
        "succ":["F4(a2)"],
        "dynkin":[2,2,0,0],
        "Au":Z(Gcd(p,2)),
        "balacarter":[1,2,3],
        "red":Z(2)},{"name":"F_4(a_2)",
        "shoji":"C_3{+}A_1",
        "succ":["F4(a1)"],
        "dynkin":[0,2,0,2],
        "Au":CoxeterGroup("B",Gcd(p,2)),
        "balacarter":[-1,2,-3,4]},{"name":"F_4(a_1)",
        "shoji":"B_4",
        "succ":["F4"],
        "dynkin":[2,2,0,2],
        "Au":Z(2),
        "balacarter":[1,2,-3,4]},{"name":"F_4",
        "succ":[],
        "dynkin":[2,2,2,2],
        "Au":Z(Gcd(12,p**2)),
        "balacarter":[1,2,3,4]}],
        "springerSeries":[{"relgroup":CoxeterGroup("F",4),
        "levi":[],
        "Z":[],
        "locsys":[[16,1],[6,1],[11,2],[1,1],[14,1],[3,1],[15,1],[2,1],[9,1],[14,2],[9,2],[11,4],[4,1],[8,1],[11,3],[11,5],[15,2],[7,1],[10,1],[3,2],[13,1],[5,1],[12,1],[6,2],[10,2]]},{"relgroup":Z(1),
        "levi":[1,2,3,4],
        "Z":[],
        "locsys":[[11,1]],
        "parameter":[37]}]}
    if p==2 :
        uc["classes"]+=[{"name":"(\\tilde A_1)_2",
            "succ":["~A1"],
            "red":CoxeterGroup("B",3),
            "dimBu":16},{"name":"(B_2)_2",
            "succ":["B2","C3(a1)2"],
            "red":CoxeterGroup("B",2),
            "dimBu":8,
            "Au":Z(2)},{"name":"(\\tilde A_2{+}A_1)_2",
            "succ":["~A2+A1","C3(a1)2"],
            "red":Z(2),
            "dimBu":7},{"name":"C_3(a_1)_2",
            "succ":["C3(a1)"],
            "red":Z(2),
            "dimBu":6}]
        class_("1")["succ"].append("(~A1)2")
        class_("A_1{+}\\tilde A_1")["succ"].append("(B2)2")
        class_("\\tilde A_2")["succ"]=["(~A2+A1)2"]
        c=class_("\\tilde A_2{+}A_1")
        c["red"]=Z(1)
        c["dimBu"]=6
        del c["dynkin"]
        c=class_("B_2")
        c["red"]=Z(2)
        c["dimBu"]=6
        del c["dynkin"]
        del c["AuAction"]
        c=class_("C_3(a_1)")
        c["red"]=Z(1)
        c["dimBu"]=5
        del c["dynkin"]
        c=class_("\\tilde A_2")
        c["red"]=CoxeterGroup("A",2)
        c["dimBu"]=9
        del c["dynkin"]
        c["AuAction"]=ExtendedReflectionGroup(CoxeterGroup("A",2),Permutation("(1,2)"))
        c=class_("\\tilde A_1")
        c["red"]=CoxeterGroup("B",2)
        c["dimBu"]=13
        del c["dynkin"]
        del c["AuAction"]
        uc["springerSeries"]=[{"relgroup":CoxeterGroup("F",4),
            "levi":[],
            "Z":[],
            "locsys":[[16,1],[6,1],[5,1],[1,1],[14,1],[17,1],[14,5],[2,1],[18,2],[14,4],[9,1],[20,1],[4,1],[8,1],[11,2],[11,3],[15,2],[7,1],[19,1],[3,1],[13,2],[5,2],[12,2],[6,2],[10,1]]},{"relgroup":CoxeterGroup("B",2),
            "levi":[2,3],
            "Z":[],
            "locsys":[[12,1],[14,2],[18,1],[16,3],[13,1]]}]
        uc["springerSeries"]+=map(lambda c: {"relgroup":Z(1),
            "levi":[1,2,3,4],
            "Z":[],
            "locsys":[c]},[[11,1],[16,2],[16,4],[15,1],[14,3]])
    else:
        if p==3 :
            uc["springerSeries"]+=[{"relgroup":Z(1),
                "levi":[1,2,3,4],
                "Z":[],
                "locsys":[[16,2]]},{"relgroup":Z(1),
                "levi":[1,2,3,4],
                "Z":[],
                "locsys":[[16,3]]}]
    uc["orderClasses"]=map(lambda c: map(lambda n: PositionProperty(uc["classes"],lambda c: UnipotentClassOps["Name"](c)==n),c["succ"]),uc["classes"])
    for c in uc["classes"]:
        del c["succ"]
        if not "red" in c :
            c["red"]=Z(1)
        if not "Au" in c :
            c["Au"]=Z(1)
        if not "AuAction" in c :
            c["AuAction"]=ExtendedReflectionGroup(c["red"],map(lambda x: IdentityMat(c["red"]["rank"]),c["Au"]["generators"]))
    return uc

ChevieData["F4"]["UnipotentClasses"]=eylf421

ChevieData["F4"]["KLeftCellRepresentatives"]=[{"character":[1],
    "duflo":[1,2,3,4],
    "reps":""},{"character":[4],
    "duflo":[25,26,27,28],
    "reps":""},{"character":[10],
    "duflo":[2,1,13,45],
    "reps":""},{"character":[13],
    "duflo":[1,29,31,4],
    "reps":""},{"character":[17,5],
    "duflo":[1,2,7,28],
    "reps":[[18,40,10,3]]},{"character":[17,7],
    "duflo":[5,26,6,4],
    "reps":[[5,9,4,34]]},{"character":[20,6],
    "duflo":[35,26,6,37],
    "reps":[[11,25,30,31]]},{"character":[20,8],
    "duflo":[14,26,27,36],
    "reps":[[26,35,8,36]]},{"character":[21],
    "duflo":[1,2,3,43],
    "reps":""},{"character":[22],
    "duflo":[20,26,39,8],
    "reps":""},{"character":[23],
    "duflo":[1,23,45,4],
    "reps":""},{"character":[24],
    "duflo":[2,1,32,28],
    "reps":""},{"character":[25,18,16,14,11],
    "duflo":[16,14,43,15],
    "reps":[[1,16,31,41],[1,16,45,17],[2,1,36,4],[2,44,4,8],[14,18,39,34],[14,18,45,10],[14,35,15,45],[14,47,10,15],[16,14,30,39],[18,2,41,8],[18,48,8,10],[38,40,10,15],[42,38,8,10]]},{"character":[25,18,16,15,11,11,2],
    "duflo":[22,2,30,28],
    "reps":[[1,9,27,41],[1,9,43,17],[1,23,43,28],[1,35,19,45],[2,18,28,43],[2,18,45,19],[9,20,34,39],[9,20,45,15],[11,2,41,12],[11,48,12,6],[20,11,43,6],[20,42,15,43],[20,47,6,15],[33,42,15,10],[35,44,12,6],[44,33,6,15]]},{"character":[25,19,16,14,12],
    "duflo":[20,47,13,8],
    "reps":[[1,42,4,3],[11,16,37,36],[11,16,45,12],[11,33,13,45],[11,48,12,13],[16,1,39,3],[16,46,3,12],[20,11,32,37],[20,11,43,13],[22,48,8,4],[29,40,4,19],[35,44,12,13],[40,35,3,12]]},{"character":[25,19,16,15,12,12,3],
    "duflo":[25,33,3,17],
    "reps":[[9,18,39,34],[9,18,45,10],[9,35,15,45],[9,47,10,15],[11,20,36,30],[18,46,3,10],[20,9,30,39],[20,9,43,15],[20,26,6,43],[20,48,15,6],[22,47,6,4],[23,48,12,3],[25,47,19,4],[26,42,4,19],[33,44,10,15],[42,33,3,10]]},{"character":[25,25,16,15,12,11,9],
    "duflo":[14,26,27,13],
    "reps":[[1,23,41,27],[5,16,34,39],[5,16,45,15],[5,48,15,10],[11,20,41,31],[11,20,45,7],[11,46,7,17],[14,16,34,27],[16,11,27,41],[16,11,43,17],[20,48,8,7],[22,5,41,10],[22,35,8,41],[22,47,10,8],[26,35,8,13],[26,46,19,4],[29,46,15,10],[35,40,7,17],[44,35,8,7]]}]

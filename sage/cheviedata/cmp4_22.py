
def p4_221(arg):
    ST=arg[1-1]
    indices=arg[2-1]
    title=arg[3-1]
    print title," ",
    s=just("\n",-len(title))
    def f(arg):
        return IntListToString([indices[k-1] for k in arg])
    
    
    if ST==4 :
        print f(1),"(3)--",f(2),"(3)",
    else:
        if ST==5 :
            print f(1),"(3)===",f(2),"(3)",
        else:
            if ST==6 :
                print f(1),"--6--",f(2),"(3)",
            else:
                if ST==7 :
                    print f(2),"(3)",s," /3\\",s,f(1),"---",f(3),"(3) ",f(1,2,3),"==",f(2,3,1),"==",f(3,1,2),
                else:
                    if ST==8 :
                        print f(1),"(4)--",f(2),"(4)",
                    else:
                        if ST==9 :
                            print f(1),"--6--",f(2),"(4)",
                        else:
                            if ST==10 :
                                print f(1),"(3)===",f(2),"(4)",
                            else:
                                if ST==11 :
                                    print f(2),"(3)",s," /3\\",s,f(1),"---",f(3),"(4) ",f(1,2,3),"==",f(2,3,1),"==",f(3,1,2),
                                else:
                                    if ST==12 :
                                        print f(2),s," /4\\",s,f(1),"---",f(3)," ",f(1,2,3,1),"==",f(2,3,1,2),"==",f(3,1,2,3),
                                    else:
                                        if ST==13 :
                                            print f(1),s," / \\",s,f(3),"---",f(2)," ",f(2,3,1,2),"==",f(3,1,2,3)," ",f(1,2,3,1,2),"==",f(3,1,2,3,1),
                                        else:
                                            if ST==14 :
                                                print f(1),"--8--",f(2),"(3)",
                                            else:
                                                if ST==15 :
                                                    print f(1),s," /5",s,f(3),s," \\",s,"  ",f(2),"(3) ",f(1,2,3),"==",f(3,1,2)," ",f(2,3,1,2,1),"==",f(3,1,2,1,2),
                                                else:
                                                    if ST==16 :
                                                        print f(1),"(5)--",f(2),"(5)",
                                                    else:
                                                        if ST==17 :
                                                            print f(1),"--6--",f(2),"(5)",
                                                        else:
                                                            if ST==18 :
                                                                print f(1),"(3)===",f(2),"(5)",
                                                            else:
                                                                if ST==19 :
                                                                    print f(2),"(3)",s," /3\\",s,f(1),"---",f(3),"(5) ",f(1,2,3),"==",f(2,3,1),"==",f(3,1,2),
                                                                else:
                                                                    if ST==20 :
                                                                        print f(1),"(3)--5--",f(2),"(3)",
                                                                    else:
                                                                        if ST==21 :
                                                                            print f(1),"--10--",f(2),"(3)",
                                                                        else:
                                                                            if ST==22 :
                                                                                print f(2),s," /5\\",s,f(1),"---",f(3)," ",f(1,2,3,1,2),"==",f(2,3,1,2,3),"==",f(3,1,2,3,1),
    print "\n",

ChevieData["G4_22"]["PrintDiagram"]=p4_221

def p4_222(ST):
    d={"4":[[[1,2,1],[2,1,2]]],
        "5":[[[1,2,1,2],[2,1,2,1]]],
        "6":[[[1,2,1,2,1,2],[2,1,2,1,2,1]]],
        "7":[[[1,2,3],[2,3,1]],[[1,2,3],[3,1,2]]],
        "8":[[[1,2,1],[2,1,2]]],
        "9":[[[1,2,1,2,1,2],[2,1,2,1,2,1]]],
        "10":[[[1,2,1,2],[2,1,2,1]]],
        "11":[[[1,2,3],[2,3,1]],[[1,2,3],[3,1,2]]],
        "12":[[[1,2,3,1],[2,3,1,2]],[[1,2,3,1],[3,1,2,3]]],
        "13":[[[3,1,2,3],[2,3,1,2]],[[1,2,3,1,2],[3,1,2,3,1]]],
        "14":[[[1,2,1,2,1,2,1,2],[2,1,2,1,2,1,2,1]]],
        "15":[[[3,1,2],[1,2,3]],[[2,3,1,2,1],[3,1,2,1,2]]],
        "16":[[[1,2,1],[2,1,2]]],
        "17":[[[1,2,1,2,1,2],[2,1,2,1,2,1]]],
        "18":[[[1,2,1,2],[2,1,2,1]]],
        "19":[[[1,2,3],[2,3,1]],[[1,2,3],[3,1,2]]],
        "20":[[[1,2,1,2,1],[2,1,2,1,2]]],
        "21":[[[1,2,1,2,1,2,1,2,1,2],[2,1,2,1,2,1,2,1,2,1]]],
        "22":[[[1,2,3,1,2],[2,3,1,2,3]],[[1,2,3,1,2],[3,1,2,3,1]]]}
    return d[ST]

ChevieData["G4_22"]["BraidRelations"]=p4_222

def p4_223(ST,x,option):
    if "TeX" in option :
        s="\\phi_"
    else:
        s="phi"
    s+=SPrint("{",x[1-1],",",x[2-1],"}")
    if len(x)==3 :
        s+=map(lambda y: '\'',range(1,x[3-1]+1))
    return str(s)

ChevieData["G4_22"]["CharName"]=p4_223

def p4_224(arg):
    option=arg[len(arg)-1]
    ST=arg[1-1]
    if "TeX" in option :
        n=SPrint("G_{",ST,"}")
    else:
        n=SPrint("G",ST)
    if len(arg)==3 :
        PrintToString(n,"(",Format(arg[2-1],option),")")
    return n

ChevieData["G4_22"]["ReflectionName"]=p4_224

ChevieData["G4_22"]["SemisimpleRank"]=2

def p4_225(ST):
    s=GAPMul(24,[1,3,2,6,4,8,12,24,2,4,6,12,25,50,75,150,15,30,10])
    return s[ST-3-1]

ChevieData["G4_22"]["Size"]=p4_225

def p4_226(ST):
    l=[7,21,14,42,16,32,48,96,8,16,24,48,45,90,135,270,27,54,18]
    return l[ST-3-1]

ChevieData["G4_22"]["NrConjugacyClasses"]=p4_226

def p4_227(ST):
    if ST in range(4,7+1) :
        return Concatenation(map(lambda i: map(lambda j: [i[1-1],j],[i-1 for i in range(1,i[2-1]+1)]),[[1,12],[2,6],[3,12],[4,12]]))
    else:
        if ST in range(8,15+1) :
            return Concatenation(map(lambda i: map(lambda j: [i[1-1],j],[i-1 for i in range(1,i[2-1]+1)]),[[1,24],[2,12],[3,24],[4,24],[5,12]]))
        else:
            if ST in range(16,22+1) :
                return Concatenation(map(lambda i: map(lambda j: [i[1-1],j],[i-1 for i in range(1,i[2-1]+1)]),[[1,60],[2,30],[3,60],[4,60],[5,60]]))

ChevieData["G4_22"]["paramclasses"]=p4_227

def p4_228(ST):
    d={"4":[[0,GAPMul(-2,ER(3))-ER(3)**2],[GAPMul(2,ER(3)**2),ER(3)**2]],
        "5":[[0,GAPDiv(3-ER(-3),2)],[-1,1]],
        "6":[[-1+ER(3),-1],[0,GAPDiv(3-ER(-3),2)]],
        "7":[[0,1],[GAPDiv(-ER(12)**11-ER(12)**8-GAPMul(2,ER(12)**4),2),GAPDiv(GAPMul(-1-ER(-3),-ER(4)+1),4)],[GAPDiv(-ER(12)**11-ER(12)**8-GAPMul(2,ER(12)**4),2),GAPDiv(GAPMul(1+ER(-3),ER(4)+1),4)]],
        "8":[[0,ER(4)],[GAPDiv(ER(4)+1,2),GAPDiv(ER(4)+1,2)]],
        "9":[[GAPDiv(2-ER(2),2),-1],[0,-ER(4)+1]],
        "10":[[0,GAPDiv(3-ER(-3),2)],[-1+ER(3),1]],
        "11":[[GAPDiv(3+ER(6),3),GAPDiv(GAPMul(ER(6),ER(3)),6)],[0,GAPDiv(ER(-2),2)],[GAPDiv(GAPMul(3-ER(3),-ER(4)+1),6),GAPDiv(GAPMul(-ER(-3),ER(4)+1),6)]],
        "12":[[ER(-2),-1-ER(-2)],[-ER(-2),-1+ER(-2)],[0,2]],
        "13":[[0,1],GAPDiv([2-ER(2),ER(2)],2),GAPDiv([1-ER(2),-ER(4)],ER(4)-1)],
        "14":[[0,2],[GAPMul(-2,ER(3)**2)-1-ER(-2),-1]],
        "15":[[ER(24)**22-ER(24)**19+GAPMul(2,ER(24)**17)-ER(24)**14+ER(24)**8,-ER(24)**16+ER(24)**11-ER(24)**8],[0,GAPDiv(3-ER(-3),2)],[-1+ER(3),1]],
        "16":[[0,1],[GAPDiv(GAPMul(2,ER(5)**4)+GAPMul(3,ER(5)),ER(5))-1,GAPDiv(ER(5)-ER(5)**3,ER(5))]],
        "17":[[GAPDiv(ER(20)**17-ER(20)**13,ER(5)),GAPDiv(ER(20)**16-ER(20)**12-ER(20)**9-ER(20)**8+ER(20)**4,ER(5))],[0,1]],
        "18":[[1,ER(15)**14+ER(15)**13],[0,ER(5)**4-ER(5)]],
        "19":[[1,ER(20)-ER(20)**8-ER(20)**9-ER(20)**12],[1,ER(15)+ER(15)**11],[0,-ER(20)+ER(20)**9]],
        "20":[[0,GAPDiv(-1+ER(5),2)],GAPDiv(GAPMul(3-ER(-3),[GAPDiv(-5+GAPMul(3,ER(5)),2),1]),6)],
        "21":[[GAPDiv(5-ER(5),2),ER(3)+GAPDiv(ER(5)+1,2)],[0,1-ER(3)]],
        "22":[[1,ER(20)**17-ER(20)**16-ER(20)**13-ER(20)**4],[ER(20)**16+ER(20)**13,-ER(20)**16+ER(20)**9-ER(20)**8-ER(20)**4],[ER(20)**17-ER(20)**16-ER(20)**12+ER(20)**9-ER(20)**8-ER(20)**4,ER(20)**16+ER(20)**12]]}
    return d[ST]

ChevieData["G4_22"]["GeneratingRoots"]=p4_228

def p4_229(ST):
    d={"4":[[0,1],[GAPDiv(ER(-3),3),GAPDiv(ER(-3),3)]],
        "5":[[0,1],[GAPDiv(-3+ER(-3),6),GAPDiv(3-ER(-3),3)]],
        "6":[[GAPDiv(ER(3),3),GAPDiv(-3-ER(3),3)],[0,1]],
        "7":[[0,2],[1,GAPDiv(GAPMul(-1-ER(3),-ER(4)+1),2)],[1,GAPDiv(GAPMul(-1-ER(3),ER(4)+1),2)]],
        "8":[[0,-ER(4)-1],[-ER(4),-ER(4)]],
        "9":[[1,GAPDiv(-2-ER(2),2)],[0,1]],
        "10":[[0,1],[GAPDiv(GAPMul(-ER(-3),ER(4)+1),6),GAPDiv(GAPMul(3+ER(3),-ER(4)+1),6)]],
        "11":[[1,GAPMul(-2+ER(6),ER(3)**2)],[0,GAPMul(ER(6),ER(3)**2)],[1,1+ER(3)]],
        "12":[GAPDiv([GAPDiv(1,ER(-2)),-1+ER(-2)],2),GAPDiv([GAPDiv(-1,ER(-2)),-1-ER(-2)],2),[0,1]],
        "13":[[0,2],[1,1+ER(2)],GAPDiv([ER(-2),2+ER(2)],ER(4)-1)],
        "14":[[0,1],GAPDiv(GAPDiv([1,-ER(-2)+1],2),ER(3))],
        "15":[[GAPDiv(GAPMul(-3,ER(24)**19)-ER(24)**17-GAPMul(2,ER(24)**16)-GAPMul(3,ER(24)**14)-GAPMul(3,ER(24)**11)-ER(24)**8+ER(24),6),GAPDiv(ER(24)**17-ER(24)**16-GAPMul(2,ER(24)**8)-ER(24),3)],[0,1],[GAPDiv(ER(3),3),GAPDiv(3+ER(3),3)]],
        "16":[[0,-ER(5)**4-ER(5)**3-ER(5)**2-GAPMul(2,ER(5))],[GAPDiv(1-ER(5),2),-ER(5)]],
        "17":[[ER(20)**12-ER(20)**9+ER(20)**8,1],[0,-ER(5)**4-ER(5)**3-ER(5)**2-GAPMul(2,ER(5))]],
        "18":[[GAPDiv(GAPMul(5,ER(15)**14)+ER(15)**13,5),GAPDiv(GAPMul(-2,ER(15)**13)-GAPMul(3,ER(15)**7)-ER(15)**4+ER(15),5)],[0,-ER(5)**4-ER(5)**2]],
        "19":[[GAPDiv(GAPMul(-2,ER(20)**17)-GAPMul(5,ER(20)**16)+GAPMul(2,ER(20)**13)-GAPMul(5,ER(20)**12)+ER(20)**9-GAPMul(5,ER(20)**8)-GAPMul(5,ER(20)**4)-ER(20),5),GAPDiv(-ER(20)**17+ER(20)**13-GAPMul(2,ER(20)**9)+GAPMul(2,ER(20)),5)],[GAPDiv(GAPMul(5,ER(15)**14)+ER(15)**13,5),GAPDiv(GAPMul(-2,ER(15)**13)-GAPMul(3,ER(15)**7)-ER(15)**4+ER(15),5)],[0,-ER(20)**13-ER(20)]],
        "20":[[0,GAPDiv(GAPMul(1+ER(5),3-ER(-3)),4)],[GAPDiv(ER(5),5),GAPDiv(3+ER(5),2)]],
        "21":[[GAPDiv(GAPMul(1-ER(3),ER(5)-GAPDiv(5,ER(3))),10),GAPDiv(ER(3),3)],[0,1]],
        "22":[[GAPDiv(GAPDiv(GAPMul(-2,ER(5)**4)+ER(5)**3-ER(5)**2+GAPMul(2,ER(5)),5),ER(4))+1,GAPDiv(GAPDiv(-ER(5)**4-GAPMul(2,ER(5)**3)+GAPMul(2,ER(5)**2),5),ER(4))],[GAPDiv(GAPMul(-4,ER(20)**17)-ER(20)**16-ER(20)**13+GAPMul(3,ER(20)**12)-GAPMul(3,ER(20)**9)+GAPMul(2,ER(20)**8)-GAPMul(2,ER(20)),5),GAPDiv(GAPMul(-2,ER(20)**17)-GAPMul(3,ER(20)**16)+GAPMul(2,ER(20)**13)-ER(20)**12+ER(20)**9-GAPMul(2,ER(20)**4)-ER(20),5)],[GAPDiv(-ER(20)**17-ER(20)**16-GAPMul(4,ER(20)**13)-GAPMul(2,ER(20)**12)-GAPMul(2,ER(20)**9)-GAPMul(3,ER(20)**8)+ER(20)**4-GAPMul(3,ER(20)),5),GAPDiv(GAPMul(2,ER(20)**17)+GAPMul(2,ER(20)**16)-GAPMul(2,ER(20)**13)-ER(20)**12-ER(20)**9+ER(20)**8,5)]]}
    return d[ST]

ChevieData["G4_22"]["GeneratingCoRoots"]=p4_229

def p4_2210(ST):
    return GAPMul(ChevieData["G4_22"]["GeneratingCoRoots"](ST),Matrix(ChevieData["G4_22"]["GeneratingRoots"](ST)).transpose())

ChevieData["G4_22"]["CartanMat"]=p4_2210

def p4_2211(ST):
    d={"4":[3,3],
        "5":[3,3],
        "6":[2,3],
        "7":[2,3,3],
        "8":[4,4],
        "9":[2,4],
        "10":[3,4],
        "11":[2,3,4],
        "12":[2,2,2],
        "13":[2,2,2],
        "14":[2,3],
        "15":[2,3,2],
        "16":[5,5],
        "17":[2,5],
        "18":[3,5],
        "19":[2,3,5],
        "20":[3,3],
        "21":[2,3],
        "22":[2,2,2]}
    return map(lambda x: GAPDiv(1,x),d[ST])

ChevieData["G4_22"]["EigenvaluesGeneratingReflections"]=p4_2211

def p4_2212(ST):
    l=[2,6,8,12,4,16,12,24,10,16,18,24,10,40,30,60,18,48,28]
    return [0,l[ST-3-1]]

ChevieData["G4_22"]["ReflectionCoDegrees"]=p4_2212

def p4_2213(ST):
    d={"4":[4,6],
        "5":[6,12],
        "6":[4,12],
        "7":[12,12],
        "8":[8,12],
        "9":[8,24],
        "10":[12,24],
        "11":[24,24],
        "12":[6,8],
        "13":[8,12],
        "14":[6,24],
        "15":[12,24],
        "16":[20,30],
        "17":[20,60],
        "18":[30,60],
        "19":[60,60],
        "20":[12,30],
        "21":[12,60],
        "22":[12,20]}
    return d[ST]

ChevieData["G4_22"]["ReflectionDegrees"]=p4_2213

def p4_2214(ST):
    l=ChevieData["G4_22"]["ClassInfo"](ST)["indexclasses"]
    if ST in range(4,7+1) :
        res=[None,[1,3,5,7,9,11,1,3,5,7,9,11,1,3,5,7,9,11,39,41,31,33,35,37,39,41,31,33,35,37,27,29,19,21,23,25,27,29,19,21,23,25],[1,4,7,10,1,4,7,10,1,4,7,10,13,16,13,16,13,16,1,4,7,10,1,4,7,10,1,4,7,10,1,4,7,10,1,4,7,10,1,4,7,10],None,[1,6,11,4,9,2,7,12,5,10,3,8,13,18,17,16,15,14,39,32,37,42,35,40,33,38,31,36,41,34,27,20,25,30,23,28,21,26,19,24,29,22],None,[1,8,3,10,5,12,7,2,9,4,11,6,13,14,15,16,17,18,19,26,21,28,23,30,25,20,27,22,29,24,31,38,33,40,35,42,37,32,39,34,41,36],None,None,None,[1,12,11,10,9,8,7,6,5,4,3,2,13,18,17,16,15,14,39,38,37,36,35,34,33,32,31,42,41,40,27,26,25,24,23,22,21,20,19,30,29,28]]
    else:
        if ST in range(8,15+1) :
            res=[None,[1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,53,55,57,59,37,39,41,43,45,47,49,51,53,55,57,59,37,39,41,43,45,47,49,51,85,87,89,91,93,95,85,87,89,91,93,95,85,87,89,91,93,95,85,87,89,91,93,95,1,3,5,7,9,11,13,15,17,19,21,23],[1,4,7,10,13,16,19,22,1,4,7,10,13,16,19,22,1,4,7,10,13,16,19,22,25,28,31,34,25,28,31,34,25,28,31,34,1,4,7,10,13,16,19,22,1,4,7,10,13,16,19,22,1,4,7,10,13,16,19,22,79,82,61,64,67,70,73,76,79,82,61,64,67,70,73,76,79,82,61,64,67,70,73,76,85,88,91,94,85,88,91,94,85,88,91,94],None,[1,6,11,16,21,2,7,12,17,22,3,8,13,18,23,4,9,14,19,24,5,10,15,20,25,30,35,28,33,26,31,36,29,34,27,32,53,58,39,44,49,54,59,40,45,50,55,60,41,46,51,56,37,42,47,52,57,38,43,48,61,66,71,76,81,62,67,72,77,82,63,68,73,78,83,64,69,74,79,84,65,70,75,80,85,90,95,88,93,86,91,96,89,94,87,92],None,[1,8,15,22,5,12,19,2,9,16,23,6,13,20,3,10,17,24,7,14,21,4,11,18,25,32,27,34,29,36,31,26,33,28,35,30,37,44,51,58,41,48,55,38,45,52,59,42,49,56,39,46,53,60,43,50,57,40,47,54,79,62,69,76,83,66,73,80,63,70,77,84,67,74,81,64,71,78,61,68,75,82,65,72,85,92,87,94,89,96,91,86,93,88,95,90],None,None,None,[1,12,23,10,21,8,19,6,17,4,15,2,13,24,11,22,9,20,7,18,5,16,3,14,25,36,35,34,33,32,31,30,29,28,27,26,53,40,51,38,49,60,47,58,45,56,43,54,41,52,39,50,37,48,59,46,57,44,55,42,79,66,77,64,75,62,73,84,71,82,69,80,67,78,65,76,63,74,61,72,83,70,81,68,85,96,95,94,93,92,91,90,89,88,87,86],None,[1,14,3,16,5,18,7,20,9,22,11,24,13,2,15,4,17,6,19,8,21,10,23,12,25,26,27,28,29,30,31,32,33,34,35,36,37,50,39,52,41,54,43,56,45,58,47,60,49,38,51,40,53,42,55,44,57,46,59,48,61,74,63,76,65,78,67,80,69,82,71,84,73,62,75,64,77,66,79,68,81,70,83,72,85,86,87,88,89,90,91,92,93,94,95,96],None,None,None,[1,18,11,4,21,14,7,24,17,10,3,20,13,6,23,16,9,2,19,12,5,22,15,8,25,30,35,28,33,26,31,36,29,34,27,32,53,46,39,56,49,42,59,52,45,38,55,48,41,58,51,44,37,54,47,40,57,50,43,60,61,78,71,64,81,74,67,84,77,70,63,80,73,66,83,76,69,62,79,72,65,82,75,68,85,90,95,88,93,86,91,96,89,94,87,92],None,[1,20,15,10,5,24,19,14,9,4,23,18,13,8,3,22,17,12,7,2,21,16,11,6,25,32,27,34,29,36,31,26,33,28,35,30,37,56,51,46,41,60,55,50,45,40,59,54,49,44,39,58,53,48,43,38,57,52,47,42,79,74,69,64,83,78,73,68,63,82,77,72,67,62,81,76,71,66,61,80,75,70,65,84,85,92,87,94,89,96,91,86,93,88,95,90],None,None,None,[1,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,25,36,35,34,33,32,31,30,29,28,27,26,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,60,59,58,57,56,55,54,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,84,83,82,81,80,85,96,95,94,93,92,91,90,89,88,87,86]]
        else:
            if ST in range(16,22+1) :
                res=[None,[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,131,133,135,137,139,141,143,145,147,149,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,199,201,203,205,207,209,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197],[1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,61,64,67,70,73,76,79,82,85,88,61,64,67,70,73,76,79,82,85,88,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,247,250,253,256,259,262,265,268,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268,211,214,217,220,223,226,229,232,235,238,241,244,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208],None,[1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,61,66,71,76,81,86,61,66,71,76,81,86,61,66,71,76,81,86,61,66,71,76,81,86,131,136,141,146,91,96,101,106,111,116,121,126,131,136,141,146,91,96,101,106,111,116,121,126,131,136,141,146,91,96,101,106,111,116,121,126,131,136,141,146,91,96,101,106,111,116,121,126,131,136,141,146,91,96,101,106,111,116,121,126,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56,1,6,11,16,21,26,31,36,41,46,51,56],None,[1,8,15,22,29,36,43,50,57,4,11,18,25,32,39,46,53,60,7,14,21,28,35,42,49,56,3,10,17,24,31,38,45,52,59,6,13,20,27,34,41,48,55,2,9,16,23,30,37,44,51,58,5,12,19,26,33,40,47,54,61,68,75,82,89,66,73,80,87,64,71,78,85,62,69,76,83,90,67,74,81,88,65,72,79,86,63,70,77,84,91,98,105,112,119,126,133,140,147,94,101,108,115,122,129,136,143,150,97,104,111,118,125,132,139,146,93,100,107,114,121,128,135,142,149,96,103,110,117,124,131,138,145,92,99,106,113,120,127,134,141,148,95,102,109,116,123,130,137,144,211,218,225,232,239,246,253,260,267,214,221,228,235,242,249,256,263,270,217,224,231,238,245,252,259,266,213,220,227,234,241,248,255,262,269,216,223,230,237,244,251,258,265,212,219,226,233,240,247,254,261,268,215,222,229,236,243,250,257,264,199,206,153,160,167,174,181,188,195,202,209,156,163,170,177,184,191,198,205,152,159,166,173,180,187,194,201,208,155,162,169,176,183,190,197,204,151,158,165,172,179,186,193,200,207,154,161,168,175,182,189,196,203,210,157,164,171,178,185,192],None,None,None,[1,12,23,34,45,56,7,18,29,40,51,2,13,24,35,46,57,8,19,30,41,52,3,14,25,36,47,58,9,20,31,42,53,4,15,26,37,48,59,10,21,32,43,54,5,16,27,38,49,60,11,22,33,44,55,6,17,28,39,50,61,72,83,64,75,86,67,78,89,70,81,62,73,84,65,76,87,68,79,90,71,82,63,74,85,66,77,88,69,80,131,142,93,104,115,126,137,148,99,110,121,132,143,94,105,116,127,138,149,100,111,122,133,144,95,106,117,128,139,150,101,112,123,134,145,96,107,118,129,140,91,102,113,124,135,146,97,108,119,130,141,92,103,114,125,136,147,98,109,120,151,162,173,184,195,206,157,168,179,190,201,152,163,174,185,196,207,158,169,180,191,202,153,164,175,186,197,208,159,170,181,192,203,154,165,176,187,198,209,160,171,182,193,204,155,166,177,188,199,210,161,172,183,194,205,156,167,178,189,200,211,222,233,244,255,266,217,228,239,250,261,212,223,234,245,256,267,218,229,240,251,262,213,224,235,246,257,268,219,230,241,252,263,214,225,236,247,258,269,220,231,242,253,264,215,226,237,248,259,270,221,232,243,254,265,216,227,238,249,260],None,[1,14,27,40,53,6,19,32,45,58,11,24,37,50,3,16,29,42,55,8,21,34,47,60,13,26,39,52,5,18,31,44,57,10,23,36,49,2,15,28,41,54,7,20,33,46,59,12,25,38,51,4,17,30,43,56,9,22,35,48,61,74,87,70,83,66,79,62,75,88,71,84,67,80,63,76,89,72,85,68,81,64,77,90,73,86,69,82,65,78,91,104,117,130,143,96,109,122,135,148,101,114,127,140,93,106,119,132,145,98,111,124,137,150,103,116,129,142,95,108,121,134,147,100,113,126,139,92,105,118,131,144,97,110,123,136,149,102,115,128,141,94,107,120,133,146,99,112,125,138,247,260,213,226,239,252,265,218,231,244,257,270,223,236,249,262,215,228,241,254,267,220,233,246,259,212,225,238,251,264,217,230,243,256,269,222,235,248,261,214,227,240,253,266,219,232,245,258,211,224,237,250,263,216,229,242,255,268,221,234,151,164,177,190,203,156,169,182,195,208,161,174,187,200,153,166,179,192,205,158,171,184,197,210,163,176,189,202,155,168,181,194,207,160,173,186,199,152,165,178,191,204,157,170,183,196,209,162,175,188,201,154,167,180,193,206,159,172,185,198],None,None,None,[1,18,35,52,9,26,43,60,17,34,51,8,25,42,59,16,33,50,7,24,41,58,15,32,49,6,23,40,57,14,31,48,5,22,39,56,13,30,47,4,21,38,55,12,29,46,3,20,37,54,11,28,45,2,19,36,53,10,27,44,61,78,65,82,69,86,73,90,77,64,81,68,85,72,89,76,63,80,67,84,71,88,75,62,79,66,83,70,87,74,131,148,105,122,139,96,113,130,147,104,121,138,95,112,129,146,103,120,137,94,111,128,145,102,119,136,93,110,127,144,101,118,135,92,109,126,143,100,117,134,91,108,125,142,99,116,133,150,107,124,141,98,115,132,149,106,123,140,97,114,211,228,245,262,219,236,253,270,227,244,261,218,235,252,269,226,243,260,217,234,251,268,225,242,259,216,233,250,267,224,241,258,215,232,249,266,223,240,257,214,231,248,265,222,239,256,213,230,247,264,221,238,255,212,229,246,263,220,237,254,199,156,173,190,207,164,181,198,155,172,189,206,163,180,197,154,171,188,205,162,179,196,153,170,187,204,161,178,195,152,169,186,203,160,177,194,151,168,185,202,159,176,193,210,167,184,201,158,175,192,209,166,183,200,157,174,191,208,165,182],None,[1,20,39,58,17,36,55,14,33,52,11,30,49,8,27,46,5,24,43,2,21,40,59,18,37,56,15,34,53,12,31,50,9,28,47,6,25,44,3,22,41,60,19,38,57,16,35,54,13,32,51,10,29,48,7,26,45,4,23,42,61,80,69,88,77,66,85,74,63,82,71,90,79,68,87,76,65,84,73,62,81,70,89,78,67,86,75,64,83,72,91,110,129,148,107,126,145,104,123,142,101,120,139,98,117,136,95,114,133,92,111,130,149,108,127,146,105,124,143,102,121,140,99,118,137,96,115,134,93,112,131,150,109,128,147,106,125,144,103,122,141,100,119,138,97,116,135,94,113,132,199,158,177,196,155,174,193,152,171,190,209,168,187,206,165,184,203,162,181,200,159,178,197,156,175,194,153,172,191,210,169,188,207,166,185,204,163,182,201,160,179,198,157,176,195,154,173,192,151,170,189,208,167,186,205,164,183,202,161,180,247,266,225,244,263,222,241,260,219,238,257,216,235,254,213,232,251,270,229,248,267,226,245,264,223,242,261,220,239,258,217,236,255,214,233,252,211,230,249,268,227,246,265,224,243,262,221,240,259,218,237,256,215,234,253,212,231,250,269,228],None,None,None,[1,24,47,10,33,56,19,42,5,28,51,14,37,60,23,46,9,32,55,18,41,4,27,50,13,36,59,22,45,8,31,54,17,40,3,26,49,12,35,58,21,44,7,30,53,16,39,2,25,48,11,34,57,20,43,6,29,52,15,38,61,84,77,70,63,86,79,72,65,88,81,74,67,90,83,76,69,62,85,78,71,64,87,80,73,66,89,82,75,68,131,94,117,140,103,126,149,112,135,98,121,144,107,130,93,116,139,102,125,148,111,134,97,120,143,106,129,92,115,138,101,124,147,110,133,96,119,142,105,128,91,114,137,100,123,146,109,132,95,118,141,104,127,150,113,136,99,122,145,108,247,270,233,256,219,242,265,228,251,214,237,260,223,246,269,232,255,218,241,264,227,250,213,236,259,222,245,268,231,254,217,240,263,226,249,212,235,258,221,244,267,230,253,216,239,262,225,248,211,234,257,220,243,266,229,252,215,238,261,224,151,174,197,160,183,206,169,192,155,178,201,164,187,210,173,196,159,182,205,168,191,154,177,200,163,186,209,172,195,158,181,204,167,190,153,176,199,162,185,208,171,194,157,180,203,166,189,152,175,198,161,184,207,170,193,156,179,202,165,188],None,None,None,None,None,[1,30,59,28,57,26,55,24,53,22,51,20,49,18,47,16,45,14,43,12,41,10,39,8,37,6,35,4,33,2,31,60,29,58,27,56,25,54,23,52,21,50,19,48,17,46,15,44,13,42,11,40,9,38,7,36,5,34,3,32,61,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,131,100,129,98,127,96,125,94,123,92,121,150,119,148,117,146,115,144,113,142,111,140,109,138,107,136,105,134,103,132,101,130,99,128,97,126,95,124,93,122,91,120,149,118,147,116,145,114,143,112,141,110,139,108,137,106,135,104,133,102,199,168,197,166,195,164,193,162,191,160,189,158,187,156,185,154,183,152,181,210,179,208,177,206,175,204,173,202,171,200,169,198,167,196,165,194,163,192,161,190,159,188,157,186,155,184,153,182,151,180,209,178,207,176,205,174,203,172,201,170,247,216,245,214,243,212,241,270,239,268,237,266,235,264,233,262,231,260,229,258,227,256,225,254,223,252,221,250,219,248,217,246,215,244,213,242,211,240,269,238,267,236,265,234,263,232,261,230,259,228,257,226,255,224,253,222,251,220,249,218],None,[1,32,3,34,5,36,7,38,9,40,11,42,13,44,15,46,17,48,19,50,21,52,23,54,25,56,27,58,29,60,31,2,33,4,35,6,37,8,39,10,41,12,43,14,45,16,47,18,49,20,51,22,53,24,55,26,57,28,59,30,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,122,93,124,95,126,97,128,99,130,101,132,103,134,105,136,107,138,109,140,111,142,113,144,115,146,117,148,119,150,121,92,123,94,125,96,127,98,129,100,131,102,133,104,135,106,137,108,139,110,141,112,143,114,145,116,147,118,149,120,151,182,153,184,155,186,157,188,159,190,161,192,163,194,165,196,167,198,169,200,171,202,173,204,175,206,177,208,179,210,181,152,183,154,185,156,187,158,189,160,191,162,193,164,195,166,197,168,199,170,201,172,203,174,205,176,207,178,209,180,211,242,213,244,215,246,217,248,219,250,221,252,223,254,225,256,227,258,229,260,231,262,233,264,235,266,237,268,239,270,241,212,243,214,245,216,247,218,249,220,251,222,253,224,255,226,257,228,259,230,261,232,263,234,265,236,267,238,269,240],None,None,None,None,None,[1,38,15,52,29,6,43,20,57,34,11,48,25,2,39,16,53,30,7,44,21,58,35,12,49,26,3,40,17,54,31,8,45,22,59,36,13,50,27,4,41,18,55,32,9,46,23,60,37,14,51,28,5,42,19,56,33,10,47,24,61,68,75,82,89,66,73,80,87,64,71,78,85,62,69,76,83,90,67,74,81,88,65,72,79,86,63,70,77,84,91,128,105,142,119,96,133,110,147,124,101,138,115,92,129,106,143,120,97,134,111,148,125,102,139,116,93,130,107,144,121,98,135,112,149,126,103,140,117,94,131,108,145,122,99,136,113,150,127,104,141,118,95,132,109,146,123,100,137,114,211,248,225,262,239,216,253,230,267,244,221,258,235,212,249,226,263,240,217,254,231,268,245,222,259,236,213,250,227,264,241,218,255,232,269,246,223,260,237,214,251,228,265,242,219,256,233,270,247,224,261,238,215,252,229,266,243,220,257,234,199,176,153,190,167,204,181,158,195,172,209,186,163,200,177,154,191,168,205,182,159,196,173,210,187,164,201,178,155,192,169,206,183,160,197,174,151,188,165,202,179,156,193,170,207,184,161,198,175,152,189,166,203,180,157,194,171,208,185,162],None,None,None,[1,42,23,4,45,26,7,48,29,10,51,32,13,54,35,16,57,38,19,60,41,22,3,44,25,6,47,28,9,50,31,12,53,34,15,56,37,18,59,40,21,2,43,24,5,46,27,8,49,30,11,52,33,14,55,36,17,58,39,20,61,72,83,64,75,86,67,78,89,70,81,62,73,84,65,76,87,68,79,90,71,82,63,74,85,66,77,88,69,80,131,112,93,134,115,96,137,118,99,140,121,102,143,124,105,146,127,108,149,130,111,92,133,114,95,136,117,98,139,120,101,142,123,104,145,126,107,148,129,110,91,132,113,94,135,116,97,138,119,100,141,122,103,144,125,106,147,128,109,150,151,192,173,154,195,176,157,198,179,160,201,182,163,204,185,166,207,188,169,210,191,172,153,194,175,156,197,178,159,200,181,162,203,184,165,206,187,168,209,190,171,152,193,174,155,196,177,158,199,180,161,202,183,164,205,186,167,208,189,170,211,252,233,214,255,236,217,258,239,220,261,242,223,264,245,226,267,248,229,270,251,232,213,254,235,216,257,238,219,260,241,222,263,244,225,266,247,228,269,250,231,212,253,234,215,256,237,218,259,240,221,262,243,224,265,246,227,268,249,230],None,[1,44,27,10,53,36,19,2,45,28,11,54,37,20,3,46,29,12,55,38,21,4,47,30,13,56,39,22,5,48,31,14,57,40,23,6,49,32,15,58,41,24,7,50,33,16,59,42,25,8,51,34,17,60,43,26,9,52,35,18,61,74,87,70,83,66,79,62,75,88,71,84,67,80,63,76,89,72,85,68,81,64,77,90,73,86,69,82,65,78,91,134,117,100,143,126,109,92,135,118,101,144,127,110,93,136,119,102,145,128,111,94,137,120,103,146,129,112,95,138,121,104,147,130,113,96,139,122,105,148,131,114,97,140,123,106,149,132,115,98,141,124,107,150,133,116,99,142,125,108,247,230,213,256,239,222,265,248,231,214,257,240,223,266,249,232,215,258,241,224,267,250,233,216,259,242,225,268,251,234,217,260,243,226,269,252,235,218,261,244,227,270,253,236,219,262,245,228,211,254,237,220,263,246,229,212,255,238,221,264,151,194,177,160,203,186,169,152,195,178,161,204,187,170,153,196,179,162,205,188,171,154,197,180,163,206,189,172,155,198,181,164,207,190,173,156,199,182,165,208,191,174,157,200,183,166,209,192,175,158,201,184,167,210,193,176,159,202,185,168],None,None,None,[1,48,35,22,9,56,43,30,17,4,51,38,25,12,59,46,33,20,7,54,41,28,15,2,49,36,23,10,57,44,31,18,5,52,39,26,13,60,47,34,21,8,55,42,29,16,3,50,37,24,11,58,45,32,19,6,53,40,27,14,61,78,65,82,69,86,73,90,77,64,81,68,85,72,89,76,63,80,67,84,71,88,75,62,79,66,83,70,87,74,131,118,105,92,139,126,113,100,147,134,121,108,95,142,129,116,103,150,137,124,111,98,145,132,119,106,93,140,127,114,101,148,135,122,109,96,143,130,117,104,91,138,125,112,99,146,133,120,107,94,141,128,115,102,149,136,123,110,97,144,211,258,245,232,219,266,253,240,227,214,261,248,235,222,269,256,243,230,217,264,251,238,225,212,259,246,233,220,267,254,241,228,215,262,249,236,223,270,257,244,231,218,265,252,239,226,213,260,247,234,221,268,255,242,229,216,263,250,237,224,199,186,173,160,207,194,181,168,155,202,189,176,163,210,197,184,171,158,205,192,179,166,153,200,187,174,161,208,195,182,169,156,203,190,177,164,151,198,185,172,159,206,193,180,167,154,201,188,175,162,209,196,183,170,157,204,191,178,165,152],None,None,None,None,None,[1,54,47,40,33,26,19,12,5,58,51,44,37,30,23,16,9,2,55,48,41,34,27,20,13,6,59,52,45,38,31,24,17,10,3,56,49,42,35,28,21,14,7,60,53,46,39,32,25,18,11,4,57,50,43,36,29,22,15,8,61,84,77,70,63,86,79,72,65,88,81,74,67,90,83,76,69,62,85,78,71,64,87,80,73,66,89,82,75,68,131,124,117,110,103,96,149,142,135,128,121,114,107,100,93,146,139,132,125,118,111,104,97,150,143,136,129,122,115,108,101,94,147,140,133,126,119,112,105,98,91,144,137,130,123,116,109,102,95,148,141,134,127,120,113,106,99,92,145,138,247,240,233,226,219,212,265,258,251,244,237,230,223,216,269,262,255,248,241,234,227,220,213,266,259,252,245,238,231,224,217,270,263,256,249,242,235,228,221,214,267,260,253,246,239,232,225,218,211,264,257,250,243,236,229,222,215,268,261,254,151,204,197,190,183,176,169,162,155,208,201,194,187,180,173,166,159,152,205,198,191,184,177,170,163,156,209,202,195,188,181,174,167,160,153,206,199,192,185,178,171,164,157,210,203,196,189,182,175,168,161,154,207,200,193,186,179,172,165,158],None,None,None,None,None,[1,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,61,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,210,209,208,207,206,205,204,203,202,201,200,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253,252,251,250,249,248]]
    for i in range(1,len(res)+1):
        if res[i]==None :
            res[i-1]=map(lambda x: l.index(x)+1,[res[i-1][k-1] for k in l])
            if res[i-1]==range(1,len(l)+1) or res[i-1] in Sublist(res,range(1,i-1+1)) :
                del res[i-1]
    return res

ChevieData["G4_22"]["PowerMaps"]=p4_2214

def p4_2215(ST):
    p=ChevieData["G4_22"]["paramclasses"](ST)
    res={}
    def g(c,a,b):
        return c[2-1]%a==b[c[1-1]-1]
    
    
    def f(class_,z):
        res=[[],[1],[2],[3],[3,3]]
        res=res[class_[1-1]-1]
        for i in range(1,class_[2-1]+1):
            res+=z
        return res
    
    
    if ST==4 :
        res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],6,[0,3,2,0]))
        res["classtext"]=map(lambda x: Replace(f(x,[3,1]),[2],[],[1,3,1],[2],[3],[1]),[p[k-1] for k in res["indexclasses"]])
        m="121212"
    else:
        if ST==5 :
            res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],2,[0,1,0,0]))
            res["classtext"]=map(lambda x: Replace(f(x,[2,3]),[1],[],[2],[1],[3],[2]),[p[k-1] for k in res["indexclasses"]])
            m="1212"
        else:
            if ST==6 :
                res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],3,[0,0,2,0]))
                res["classtext"]=map(lambda x: Replace(f(x,[3,1]),[2],[],[3],[2]),[p[k-1] for k in res["indexclasses"]])
                m="212121"
            else:
                if ST==7 :
                    res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],1,[0,0,0,0]))
                    res["classtext"]=map(lambda x: f(x,[1,2,3]),[p[k-1] for k in res["indexclasses"]])
                    m="123"
                else:
                    if ST==8 :
                        res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],6,[0,3,2,0,0]))
                        res["classtext"]=map(lambda x: Replace(f(x,[3,1]),[2],[],[1,3,1],[2],[3],[1]),[p[k-1] for k in res["indexclasses"]])
                        m="121212"
                    else:
                        if ST==9 :
                            res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],3,[0,0,2,0,0]))
                            res["classtext"]=map(lambda x: Replace(f(x,[3,1]),[2],[],[3],[2]),[p[k-1] for k in res["indexclasses"]])
                            m="212121"
                        else:
                            if ST==10 :
                                res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],2,[0,1,0,0,0]))
                                res["classtext"]=map(lambda x: Replace(f(x,[2,3]),[1],[],[2],[1],[3],[2]),[p[k-1] for k in res["indexclasses"]])
                                m="1212"
                            else:
                                if ST==11 :
                                    res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],1,[0,0,0,0,0]))
                                    res["classtext"]=map(lambda x: f(x,[1,2,3]),[p[k-1] for k in res["indexclasses"]])
                                    m="123"
                                else:
                                    if ST==12 :
                                        res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],12,[0,0,8,3,6]))
                                        res["classtext"]=map(lambda x: Replace(f(x,[1,2]),[3],[],[2,1,2,1,2],[2,3]),[p[k-1] for k in res["indexclasses"]])
                                        m="123123123123"
                                    else:
                                        if ST==13 :
                                            res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],6,[0,0,2,3,0]))
                                            res["classtext"]=map(lambda x: Replace(x,"z",[1,2,3,1,2,3,1,2,3]),[[],"z","zz","zzz",[2],[2,'z'],[3,1,2],[3,1,2,'z'],[3,1,2,'z','z'],[3,1,2,'z','z','z'],[2,3,1,2,1],[2,3,1,2,1,'z'],[2,3,1,2,1,'z','z'],[2,3,1,2,1,'z','z','z'],[1],[1,'z']])
                                            m="123123123"
                                        else:
                                            if ST==14 :
                                                res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],4,[0,0,0,3,2]))
                                                res["classtext"]=map(lambda x: Replace(f(x,[1,2]),[3],[]),[p[k-1] for k in res["indexclasses"]])
                                                m="12121212"
                                            else:
                                                if ST==15 :
                                                    res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],2,[0,0,0,1,0]))
                                                    res["classtext"]=map(lambda x: Replace(f(x,[1,2,3]),[3,3],[4],[3,1,2,3],[4,1,2],[4],[3]),[p[k-1] for k in res["indexclasses"]])
                                                    m="12312"
                                                else:
                                                    if ST==16 :
                                                        res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],6,[0,3,2,0,0]))
                                                        res["classtext"]=map(lambda c: Replace(f(c,[3,1]),[2],[],[1,3,1],[2],[3],[1]),[p[k-1] for k in res["indexclasses"]])
                                                        m="121212"
                                                    else:
                                                        if ST==17 :
                                                            res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],3,[0,0,2,0,0]))
                                                            res["classtext"]=map(lambda x: Replace(f(x,[3,1]),[2],[],[3],[2]),[p[k-1] for k in res["indexclasses"]])
                                                            m="212121"
                                                        else:
                                                            if ST==18 :
                                                                res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],2,[0,1,0,0,0]))
                                                                res["classtext"]=map(lambda x: Replace(f(x,[2,3]),[1],[],[2],[1],[3],[2]),[p[k-1] for k in res["indexclasses"]])
                                                                m="1212"
                                                            else:
                                                                if ST==19 :
                                                                    res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],1,[0,0,0,0,0]))
                                                                    res["classtext"]=map(lambda x: f(x,[1,2,3]),[p[k-1] for k in res["indexclasses"]])
                                                                    m="123"
                                                                else:
                                                                    if ST==20 :
                                                                        res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],10,[0,5,0,4,8]))
                                                                        res["classtext"]=map(lambda x: Replace(f(x,[1,2]),[3],[],[1,1],[],[1,2,1],[3],[2],[1],[3],[2]),[p[k-1] for k in res["indexclasses"]])
                                                                        m="2121212121"
                                                                    else:
                                                                        if ST==21 :
                                                                            res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],5,[0,0,0,4,3]))
                                                                            res["classtext"]=map(lambda x: Replace(f(x,[1,2]),[3],[]),[p[k-1] for k in res["indexclasses"]])
                                                                            m="1212121212"
                                                                        else:
                                                                            if ST==22 :
                                                                                res["indexclasses"]=Filtered(range(1,len(p)+1),lambda i: g(p[i-1],15,[0,0,5,9,3]))
                                                                                res["classtext"]=map(lambda x: Replace(f(x,[1,2]),[3],[],[2,1,2,1,2],[2,3]),[p[k-1] for k in res["indexclasses"]])
                                                                                m="123123123123123"
    digits="123"
    res["classnames"]=map(p4_2216,res["classtext"])
    if ST in range(4,7+1) :
        m=[1,6,4,4]
        res["classes"]=map(lambda x: m[x[1-1]-1],[p[k-1] for k in res["indexclasses"]])
        m=[1,12,6,4,3,12,2,12,3,4,6,12,2,12,6,4,6,12,3,12,6,12,3,12,6,12,3,12,6,12,3,12,6,12,3,12,6,12,3,12,6,12]
    else:
        if ST in range(8,15+1) :
            m=[1,12,8,6,6]
            res["classes"]=map(lambda x: m[x[1-1]-1],[p[k-1] for k in res["indexclasses"]])
            m=[1,24,12,8,6,24,4,24,3,8,12,24,2,24,12,8,3,24,4,24,6,8,12,24,2,24,12,8,6,24,4,24,6,8,12,24,3,24,12,24,6,24,12,24,3,24,12,24,6,24,12,24,3,24,12,24,6,24,12,24,4,24,12,8,12,24,4,24,12,8,12,24,4,24,12,8,12,24,4,24,12,8,12,24,2,24,12,8,6,24,4,24,6,8,12,24]
        else:
            if ST in range(16,22+1) :
                m=[1,30,20,12,12]
                res["classes"]=map(lambda x: m[x[1-1]-1],[p[k-1] for k in res["indexclasses"]])
                m=[1,60,30,20,15,12,10,60,15,20,6,60,5,60,30,4,15,60,10,60,3,20,30,60,5,12,30,20,15,60,2,60,15,20,30,12,5,60,30,20,3,60,10,60,15,4,30,60,5,60,6,20,15,60,10,12,15,20,30,60,2,60,30,20,30,12,10,60,30,20,6,60,10,60,30,4,30,60,10,60,6,20,30,60,10,12,30,20,30,60,3,60,30,60,15,12,30,60,15,60,6,60,15,60,30,12,15,60,30,60,3,60,30,60,15,12,30,60,15,60,6,60,15,60,30,12,15,60,30,60,3,60,30,60,15,12,30,60,15,60,6,60,15,60,30,12,15,60,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60,5,60,30,20,15,60,10,60,15,20,30,60]
    res["orders"]=[m[k-1] for k in res["indexclasses"]]
    res["classparams"]=res["classnames"]
    return res

def p4_2216(x):
    res=str(Replace([digits[k-1] for k in x],m,"z"))
    if len(res)==0 :
        res="."
    return res

ChevieData["G4_22"]["ClassInfo"]=p4_2215

def p4_2217(ST,s):
    if s==0 :
        return [[]]
    else:
        if s==1 :
            return Filtered(ChevieData["G4_22"]["ClassInfo"](ST)["classtext"],lambda x: len(x)==1)
        else:
            return [range(1,len(ChevieData["G4_22"]["GeneratingRoots"](ST))+1)]

ChevieData["G4_22"]["ParabolicRepresentatives"]=p4_2217

def p4_2218(ST):
    res={}
    if ST==4 :
        res["charparams"]=[[1,0],[1,4],[1,8],[2,5],[2,3],[2,1],[3,2]]
        res["extRefl"]=[1,6,2]
        res["indexchars"]=Concatenation(range(1,3+1),range(34,37+1))
        res["a"]=[0,4,4,4,1,1,2]
        res["A"]=[0,8,8,8,5,5,6]
    else:
        if ST==5 :
            res["charparams"]=[[1,0],[1,4,1],[1,8,1],[1,4,2],[1,8,2],[1,12,1],[1,8,3],[1,12,2],[1,16],[2,9],[2,7,1],[2,5,1],[2,7,2],[2,5,2],[2,3,1],[2,5,3],[2,3,2],[2,1],[3,4],[3,2],[3,6]]
            res["extRefl"]=[1,18,5]
            res["indexchars"]=Concatenation(range(10,27+1),[37,39,41])
            res["opdam"]=Permutation("(19,20,21)")
        else:
            if ST==6 :
                res["charparams"]=[[1,0],[1,4],[1,8],[1,6],[1,10],[1,14],[2,5,2],[2,3,2],[2,3,1],[2,7],[2,1],[2,5,1],[3,2],[3,4]]
                res["extRefl"]=[1,11,5]
                res["indexchars"]=Concatenation(range(1,3+1),range(10,12+1),[19,35,33,28,24,26,37,38])
                res["opdam"]=Permutation("(7,10)")
                res["a"]=[0,1,1,1,10,10,5,1,1,5,1,1,1,4]
                res["A"]=[0,11,11,11,14,14,13,11,11,13,11,11,11,12]
            else:
                if ST==7 :
                    res["charparams"]=[[1,0],[1,4,1],[1,8,1],[1,4,2],[1,8,2],[1,12,1],[1,8,3],[1,12,2],[1,16],[1,6],[1,10,1],[1,14,1],[1,10,2],[1,14,2],[1,18,1],[1,14,3],[1,18,2],[1,22],[2,9,1],[2,7,1],[2,11,1],[2,7,2],[2,11,2],[2,9,2],[2,11,3],[2,9,3],[2,7,3],[2,15],[2,13,1],[2,5,1],[2,13,2],[2,5,2],[2,3,1],[2,5,3],[2,3,2],[2,1],[3,10],[3,4],[3,2],[3,8],[3,6],[3,12]]
                    res["extRefl"]=[1,36,14]
                    res["indexchars"]=range(1,42+1)
                    res["opdam"]=Permutation("(19,28)(23,32)(24,33)(26,35)(27,36)(37,41,39)")
                else:
                    if ST==8 :
                        res["charparams"]=[[1,0],[1,6],[1,12],[1,18],[2,1],[2,4],[2,7,1],[2,7,2],[2,10],[2,13],[3,8],[3,6],[3,4],[3,2],[4,5],[4,3]]
                        res["extRefl"]=[1,5,2]
                        res["indexchars"]=Concatenation(range(21,30+1),range(81,84+1),[89,86])
                        res["opdam"]=Permutation("(15,16)")
                        res["a"]=[0,6,6,6,1,1,1,6,6,6,6,2,2,2,3,3]
                        res["A"]=[0,18,18,18,11,11,11,18,18,18,18,14,14,14,15,15]
                    else:
                        if ST==9 :
                            res["charparams"]=[[1,0],[1,6],[1,12,1],[1,18,1],[1,12,2],[1,18,2],[1,24],[1,30],[2,5],[2,4],[2,7,1],[2,7,2],[2,10],[2,13],[2,1],[2,14],[2,17],[2,11,1],[2,11,2],[2,8],[3,8,1],[3,6,1],[3,4],[3,2],[3,12],[3,10],[3,8,2],[3,6,2],[4,9],[4,7],[4,3],[4,5]]
                            res["extRefl"]=[1,15,6]
                            res["indexchars"]=Concatenation(range(1,4+1),range(21,26+1),range(57,59+1),[54,55,35,36,39,40,44],range(77,85+1),[88,93,95])
                            res["opdam"]=Permutation("(12,19)(13,16)(14,17)(29,30,32,31)")
                        else:
                            if ST==10 :
                                res["charparams"]=[[1,0],[1,6],[1,12],[1,18],[1,8],[1,14],[1,20],[1,26],[1,16],[1,22],[1,28],[1,34],[2,9],[2,12],[2,15,1],[2,15,2],[2,18],[2,21],[2,5],[2,8],[2,11,1],[2,11,2],[2,14],[2,17],[2,1],[2,4],[2,7,1],[2,7,2],[2,10],[2,13],[3,8,2],[3,14],[3,8,1],[3,2],[3,16],[3,10,2],[3,4],[3,10,1],[3,12,2],[3,6,2],[3,12,1],[3,6,1],[4,9],[4,11],[4,7],[4,3],[4,5],[4,13]]
                                res["extRefl"]=[1,25,6]
                                res["indexchars"]=Concatenation(range(13,42+1),range(65,72+1),range(77,79+1),range(84,90+1))
                                res["opdam"]=Permutation("(31,39,35)(32,36,40)(33,37,41)(34,38,42)(43,46)")
                            else:
                                if ST==11 :
                                    res["charparams"]=[[1,0],[1,6],[1,12,1],[1,18,1],[1,8],[1,14],[1,20,1],[1,26,1],[1,16],[1,22],[1,28,1],[1,34,1],[1,12,2],[1,18,2],[1,24],[1,30],[1,20,2],[1,26,2],[1,32],[1,38],[1,28,2],[1,34,2],[1,40],[1,46],[2,9],[2,12],[2,27,1],[2,27,2],[2,18],[2,33],[2,5],[2,20],[2,11,1],[2,11,2],[2,14],[2,29],[2,1],[2,4],[2,7,1],[2,7,2],[2,22],[2,25],[2,21,1],[2,24],[2,15,1],[2,15,2],[2,30],[2,21,2],[2,17,1],[2,8],[2,23,1],[2,23,2],[2,26],[2,17,2],[2,13,1],[2,16],[2,19,1],[2,19,2],[2,10],[2,13,2],[3,8,1],[3,14,1],[3,20,1],[3,2],[3,20,2],[3,26],[3,8,2],[3,14,2],[3,16,1],[3,22,1],[3,4],[3,10,1],[3,28],[3,10,2],[3,16,2],[3,22,2],[3,24,1],[3,6,2],[3,12,1],[3,18,1],[3,12,2],[3,18,2],[3,24,2],[3,6,1],[4,21],[4,23],[4,19],[4,3],[4,5],[4,25],[4,9],[4,11],[4,7],[4,15],[4,17],[4,13]]
                                    res["extRefl"]=[1,37,18]
                                    res["indexchars"]=range(1,96+1)
                                    res["opdam"]=Permutation("(28,46)(29,47)(30,48)(31,49)(32,50)(33,51)(37,55)(38,56)(39,57)(62,78,70)(63,79,71)(64,80,72)(65,73,81)(85,94,91,88)")
                                else:
                                    if ST==12 :
                                        res["charparams"]=[[1,0],[1,12],[2,1],[2,4],[2,5],[3,2],[3,6],[4,3]]
                                        res["extRefl"]=[1,3,2]
                                        res["indexchars"]=[1,13,25,26,30,61,65,85]
                                        res["opdam"]=Permutation("(3,5)")
                                    else:
                                        if ST==13 :
                                            res["charparams"]=[[1,0],[1,6],[1,12],[1,18],[2,7,1],[2,4],[2,1],[2,5],[2,10],[2,7,2],[3,4],[3,2],[3,8],[3,6],[4,3],[4,5]]
                                            res["extRefl"]=[1,7,4]
                                            res["indexchars"]=[1,2,13,14,37,26,27,28,29,30,61,62,65,66,85,86]
                                            res["opdam"]=Permutation("( 5, 8,10, 7)(15,16)")
                                        else:
                                            if ST==14 :
                                                res["charparams"]=[[1,0],[1,8],[1,16],[1,12],[1,20],[1,28],[2,15],[2,12],[2,9],[2,11],[2,8],[2,5],[2,7],[2,4],[2,1],[3,2],[3,8],[3,4],[3,10],[3,6,1],[3,6,2],[4,3],[4,5],[4,7]]
                                                res["extRefl"]=[1,15,5]
                                                res["indexchars"]=Concatenation([1,5,9,13,17,21,25,26],range(30,33+1),range(37,39+1),[62,65],[69,73,77,81],range(85,87+1))
                                                res["opdam"]=Permutation("( 7, 9)(17,19,21)")
                                                res["a"]=[0,1,1,1,20,20,9,9,9,1,1,1,1,1,1,1,6,1,6,1,6,1,5,5]
                                                res["A"]=[0,23,23,23,28,28,27,27,27,23,23,23,23,23,23,23,26,23,26,23,26,23,25,25]
                                            else:
                                                if ST==15 :
                                                    res["charparams"]=[[1,0],[1,6],[1,8],[1,14],[1,16],[1,22],[1,12],[1,18],[1,20],[1,26],[1,28],[1,34],[2,9],[2,12],[2,15,1],[2,15,2],[2,18],[2,21],[2,5],[2,8],[2,11,2],[2,11,1],[2,14],[2,17],[2,1],[2,4],[2,7,2],[2,7,1],[2,10],[2,13],[3,8,1],[3,2],[3,8,2],[3,14],[3,4],[3,10,1],[3,16],[3,10,2],[3,12,1],[3,6,1],[3,12,2],[3,6,2],[4,9],[4,11],[4,7],[4,3],[4,5],[4,13]]
                                                    res["extRefl"]=[1,25,10]
                                                    res["indexchars"]=Concatenation(range(3,6+1),[9,10],range(15,18+1),range(23,42+1),[61],range(64,66+1),range(71,74+1),range(79,82+1),range(85,90+1))
                                                    res["opdam"]=Permutation("(13,15,18,16)(19,21,24,22)(25,27,30,28)(31,35,39)(32,40,36)(33,41,37)(43,46)")
                                                else:
                                                    if ST==16 :
                                                        res["indexchars"]=Concatenation(range(1,5+1),range(81,100+1),range(151,155+1),range(166,170+1),[211,217,228,229],range(240,245+1))
                                                        res["extRefl"]=[1,6,2]
                                                        res["charparams"]=[[1,0],[1,12],[1,24],[1,36],[1,48],[2,1],[2,7],[2,13,1],[2,19,1],[2,13,2],[2,19,2],[2,25,2],[2,25,1],[2,31],[2,37],[3,2],[3,6],[3,10,2],[3,10,1],[3,14,1],[3,18,1],[3,14,2],[3,18,2],[3,22],[3,26],[4,15],[4,17],[4,9],[4,11],[4,3],[4,20],[4,12],[4,14],[4,6],[4,8],[5,12],[5,4],[5,16],[5,8],[5,10],[6,5],[6,7],[6,9],[6,11],[6,13]]
                                                        res["opdam"]=Permutation("(27,32)(28,33)(29,34)(30,35)(36,40,39,38,37)")
                                                    else:
                                                        if ST==17 :
                                                            res["indexchars"]=Concatenation(range(11,20+1),[71,32,33,84,35,86,37,38,79,40,41,62,67,68,49,70],[63,54,65,56],range(91,110+1),range(151,155+1),range(171,175+1),range(181,185+1),range(206,211+1),[214,219,220,223,226,229,232,235,238],range(241,250+1))
                                                            res["extRefl"]=[1,21,7]
                                                            res["charparams"]=[[1,0],[1,12],[1,24],[1,36],[1,48],[1,30],[1,42],[1,54],[1,66],[1,78],[2,11],[2,17],[2,13,1],[2,19,1],[2,13,2],[2,19,2],[2,25,2],[2,25,1],[2,31],[2,37],[2,1],[2,7],[2,35,2],[2,35,1],[2,41],[2,47],[2,23,1],[2,29,1],[2,23,2],[2,29,2],[3,2],[3,6],[3,10,2],[3,10,1],[3,14,1],[3,18,1],[3,14,2],[3,18,2],[3,22],[3,26],[3,12],[3,16],[3,20,2],[3,20,1],[3,24,1],[3,28,1],[3,24,2],[3,28,2],[3,32],[3,36],[4,15],[4,27],[4,19],[4,11],[4,3],[4,30],[4,22],[4,14],[4,6],[4,18],[4,25],[4,17],[4,9],[4,21],[4,13],[4,20],[4,12],[4,24],[4,16],[4,8],[5,12],[5,22],[5,4],[5,14],[5,16],[5,26],[5,8],[5,18],[5,20],[5,10],[6,15],[6,17],[6,19],[6,11],[6,13],[6,5],[6,7],[6,9],[6,21],[6,23]]
                                                            res["opdam"]=Permutation("(15,29)(16,30)(17,23)(18,24)(19,25)(20,26)(51,61)(52,57,62,67)(53,58,63,68)(54,59,64,69)(55,60,65,70)(56,66)(71,73,75,77,79)(72,76,80,74,78)(81,86)")
                                                        else:
                                                            if ST==18 :
                                                                res["indexchars"]=Concatenation(range(1,15+1),range(61,100+1),range(111,120+1),range(131,134+1),range(135,140+1),range(181,211+1),range(215,219+1),range(223,225+1),[229,230,231,235],range(239,255+1))
                                                                res["extRefl"]=[1,36,7]
                                                                res["charparams"]=[[1,0],[1,12],[1,24],[1,36],[1,48],[1,20],[1,32],[1,44],[1,56],[1,68],[1,40],[1,52],[1,64],[1,76],[1,88],[2,21],[2,27],[2,33,1],[2,39,1],[2,33,2],[2,39,2],[2,45,2],[2,45,1],[2,51],[2,57],[2,11],[2,17],[2,23,1],[2,29,1],[2,23,2],[2,29,2],[2,35,2],[2,35,1],[2,41],[2,47],[2,1],[2,7],[2,13,1],[2,19,1],[2,13,2],[2,19,2],[2,25,2],[2,25,1],[2,31],[2,37],[3,2],[3,26,1],[3,20,2],[3,20,1],[3,14,1],[3,38,1],[3,14,2],[3,38,2],[3,32],[3,26,2],[3,22,1],[3,16],[3,10,2],[3,10,1],[3,34,1],[3,28,1],[3,34,2],[3,28,2],[3,22,2],[3,46],[3,12],[3,6],[3,30,2],[3,30,1],[3,24,1],[3,18,1],[3,24,2],[3,18,2],[3,42],[3,36],[4,15],[4,27],[4,9],[4,21],[4,3],[4,35],[4,17],[4,29],[4,11],[4,23],[4,25],[4,37],[4,19],[4,31],[4,13],[4,30],[4,12],[4,24],[4,6],[4,18],[4,20],[4,32],[4,14],[4,26],[4,8],[4,40],[4,22],[4,34],[4,16],[4,28],[5,12],[5,32],[5,22],[5,24],[5,14],[5,4],[5,36],[5,26],[5,16],[5,18],[5,8],[5,28],[5,30],[5,20],[5,10],[6,25],[6,7],[6,19],[6,31],[6,13],[6,5],[6,17],[6,29],[6,11],[6,23],[6,15],[6,27],[6,9],[6,21],[6,33]]
                                                                res["opdam"]=Permutation("( 46, 56, 66)( 47, 57, 67)( 48, 58, 68)( 49, 59, 69)( 50, 60, 70)( 51, 61, 71)( 52, 72, 62)( 53, 73, 63)( 54, 74, 64)( 55, 75, 65)( 77, 92)( 78, 93)( 79, 94)( 80, 95)( 81, 96)( 86,101)(106,115,109,118,112)(107,113,119,110,116)(108,114,120,111,117)(121,131,126)")
                                                            else:
                                                                if ST==19 :
                                                                    res["indexchars"]=range(1,270+1)
                                                                    res["extRefl"]=[1,81,22]
                                                                    res["charparams"]=[[1,0],[1,12],[1,24],[1,36],[1,48],[1,20],[1,32],[1,44],[1,56],[1,68],[1,40],[1,52],[1,64],[1,76],[1,88],[1,30],[1,42],[1,54],[1,66],[1,78],[1,50],[1,62],[1,74],[1,86],[1,98],[1,70],[1,82],[1,94],[1,106],[1,118],[2,51,1],[2,57,1],[2,33,1],[2,39,1],[2,33,2],[2,39,2],[2,45,2],[2,45,1],[2,51,2],[2,57,2],[2,41,1],[2,47,1],[2,53,1],[2,59,1],[2,53,2],[2,59,2],[2,35,2],[2,35,1],[2,41,2],[2,47,2],[2,31,1],[2,37,1],[2,43,1],[2,49,1],[2,43,2],[2,49,2],[2,55,2],[2,55,1],[2,31,2],[2,37,2],[2,21],[2,27],[2,63,1],[2,69,1],[2,63,2],[2,69,2],[2,75,1],[2,75,2],[2,81],[2,87],[2,11],[2,17],[2,23,1],[2,29,1],[2,23,2],[2,29,2],[2,65,2],[2,65,1],[2,71],[2,77],[2,1],[2,7],[2,13,1],[2,19,1],[2,13,2],[2,19,2],[2,25,2],[2,25,1],[2,61],[2,67],[3,2],[3,26,1],[3,50,2],[3,50,1],[3,14,1],[3,38,1],[3,14,2],[3,38,2],[3,62],[3,26,2],[3,32,1],[3,56,1],[3,20,2],[3,20,1],[3,44,1],[3,68,1],[3,44,2],[3,68,2],[3,32,2],[3,56,2],[3,22,1],[3,46,1],[3,10,2],[3,10,1],[3,34,1],[3,58,1],[3,34,2],[3,58,2],[3,22,2],[3,46,2],[3,52,1],[3,16],[3,40,2],[3,40,1],[3,64,1],[3,28,1],[3,64,2],[3,28,2],[3,52,2],[3,76],[3,42,1],[3,6],[3,30,2],[3,30,1],[3,54,1],[3,18,1],[3,54,2],[3,18,2],[3,42,2],[3,66],[3,12],[3,36,1],[3,60,2],[3,60,1],[3,24,1],[3,48,1],[3,24,2],[3,48,2],[3,72],[3,36,2],[4,15],[4,27],[4,39],[4,51],[4,3],[4,35],[4,47],[4,59],[4,11],[4,23],[4,55],[4,67],[4,19],[4,31],[4,43],[4,30],[4,42],[4,54],[4,6],[4,18],[4,50],[4,62],[4,14],[4,26],[4,38],[4,70],[4,22],[4,34],[4,46],[4,58],[4,45],[4,57],[4,9],[4,21],[4,33],[4,65],[4,17],[4,29],[4,41],[4,53],[4,25],[4,37],[4,49],[4,61],[4,13],[4,60],[4,12],[4,24],[4,36],[4,48],[4,20],[4,32],[4,44],[4,56],[4,8],[4,40],[4,52],[4,64],[4,16],[4,28],[5,12],[5,32],[5,52],[5,42],[5,62],[5,22],[5,24],[5,44],[5,4],[5,54],[5,14],[5,34],[5,36],[5,56],[5,16],[5,66],[5,26],[5,46],[5,48],[5,8],[5,28],[5,18],[5,38],[5,58],[5,60],[5,20],[5,40],[5,30],[5,50],[5,10],[6,25],[6,7],[6,49],[6,61],[6,43],[6,35],[6,17],[6,59],[6,11],[6,53],[6,45],[6,27],[6,9],[6,21],[6,63],[6,55],[6,37],[6,19],[6,31],[6,13],[6,5],[6,47],[6,29],[6,41],[6,23],[6,15],[6,57],[6,39],[6,51],[6,33]]
                                                                    res["opdam"]=Permutation("( 35, 65)( 36, 66)( 37, 67)( 38, 68)( 39, 69)( 40, 70)( 41, 71)( 42, 72)( 43, 73)( 44, 74)( 51, 81)( 52, 82)( 53, 83)( 54, 84)( 91,131,111)( 92,132,112)( 93,133,113)( 94,134,114)( 95,135,115)( 96,136,116)(107,127,147)(108,128,148)(109,129,149)(110,130,150)(152,197,182,167)(153,198,183,168)(154,199,184,169)(155,200,185,170)(156,171,186,201)(161,176,191,206)(212,236,230,224,218)(213,237,231,225,219)(214,220,226,232,238)(241,266,261,256,251,246)")
                                                                else:
                                                                    if ST==20 :
                                                                        res["indexchars"]=Concatenation([1,6,11,31,32,41,42,51,52],[103,104,111,112,131,132],[152,156,161,167,172,176],range(238,240+1),[241,251,246])
                                                                        res["extRefl"]=[1,8,2]
                                                                        res["charparams"]=[[1,0],[1,20],[1,40],[2,21],[2,27],[2,11],[2,17],[2,1],[2,7],[3,2],[3,14],[3,10,1],[3,10,2],[3,12],[3,6],[4,3],[4,11],[4,13],[4,6],[4,8],[4,16],[5,12],[5,8],[5,4],[6,7],[6,9],[6,5]]
                                                                        res["opdam"]=Permutation("(10,14,12)(11,15,13)(17,20)(18,21)(25,27,26)")
                                                                    else:
                                                                        if ST==21 :
                                                                            res["indexchars"]=Concatenation(range(1,26+1,6-1),[65,32,35,62,41,73,43,71,84,52,82,54,91,92,101],[102,111,112,121,122,131,132,141,142,151,160,161,170,171,180,181,190,191,200],[201],range(210,216+1),[241,242,246,261,251,266])
                                                                            res["extRefl"]=[1,18,5]
                                                                            res["charparams"]=[[1,0],[1,20],[1,40],[1,30],[1,50],[1,70],[2,39],[2,33],[2,21],[2,27],[2,29],[2,23],[2,17],[2,11],[2,19],[2,13],[2,7],[2,1],[3,2],[3,14],[3,20,2],[3,20,1],[3,10,2],[3,10,1],[3,28],[3,16],[3,18],[3,6],[3,12],[3,24],[4,3],[4,11],[4,19],[4,6],[4,14],[4,22],[4,9],[4,17],[4,13],[4,12],[4,8],[4,16],[5,12],[5,8],[5,4],[5,18],[5,14],[5,10],[6,13],[6,7],[6,11],[6,5],[6,9],[6,15]]
                                                                            res["opdam"]=Permutation("(7,9)( 8,10)(21,25,29)(22,26,30)(32,35,38,41)(33,36,39,42)(49,51,53,50,52,54)")
                                                                        else:
                                                                            if ST==22 :
                                                                                res["indexchars"]=[1,16,65,32,35,62,91,92,101,102,151,166,181,196,211,240,241,246]
                                                                                res["extRefl"]=[1,5,2]
                                                                                res["charparams"]=[[1,0],[1,30],[2,11],[2,13],[2,1],[2,7],[3,2],[3,6],[3,12],[3,16],[4,3],[4,6],[4,9],[4,8],[5,4],[5,10],[6,7],[6,5]]
                                                                                res["opdam"]=Permutation("( 3, 5)( 4, 6)(11,13)(12,14)(17,18)")
    res["b"]=map(lambda x: x[2-1],res["charparams"])
    return res

ChevieData["G4_22"]["CharInfo"]=p4_2218

def p4_2219(ST):
    d={"4":[[1,0],[1,4],[1,8],[1,5,1,7],[1,3,1,5],[1,1,1,3],[1,2,1,4,1,6]],
        "5":[[1,0],[1,4],[1,8],[1,4],[1,8],[1,12],[1,8],[1,12],[1,16],[1,9,1,15],[1,7,1,13],[1,5,1,11],[1,7,1,13],[1,5,1,11],[1,3,1,9],[1,5,1,11],[1,3,1,9],[1,1,1,7],[1,4,2,10],[1,2,1,8,1,14],[2,6,1,12]],
        "6":[[1,0],[1,4],[1,8],[1,6],[1,10],[1,14],[1,5,1,13],[1,3,1,11],[1,3,1,7],[1,7,1,11],[1,1,1,9],[1,5,1,9],[1,2,1,6,1,10],[1,4,1,8,1,12]],
        "7":[[1,0],[1,4],[1,8],[1,4],[1,8],[1,12],[1,8],[1,12],[1,16],[1,6],[1,10],[1,14],[1,10],[1,14],[1,18],[1,14],[1,18],[1,22],[1,9,1,21],[1,7,1,19],[2,11],[1,7,1,19],[2,11],[2,9],[2,11],[2,9],[2,7],[2,15],[2,13],[1,5,1,17],[2,13],[1,5,1,17],[1,3,1,15],[1,5,1,17],[1,3,1,15],[1,1,1,13],[3,10],[1,4,2,16],[1,2,2,14],[2,8,1,20],[2,6,1,18],[3,12]],
        "8":[[1,0],[1,6],[1,12],[1,18],[1,1,1,5],[1,4,1,8],[1,7,1,11],[1,7,1,11],[1,10,1,14],[1,13,1,17],[1,8,1,12,1,16],[1,6,1,10,1,14],[1,4,1,8,1,12],[1,2,1,6,1,10],[1,5,2,9,1,13],[1,3,1,7,1,11,1,15]],
        "9":[[1,0],[1,6],[1,12],[1,18],[1,12],[1,18],[1,24],[1,30],[1,5,1,13],[1,4,1,20],[1,7,1,23],[1,7,1,23],[1,10,1,26],[1,13,1,29],[1,1,1,17],[1,14,1,22],[1,17,1,25],[1,11,1,19],[1,11,1,19],[1,8,1,16],[1,8,1,16,1,24],[1,6,1,14,1,22],[1,4,1,12,1,20],[1,2,1,10,1,18],[1,12,1,20,1,28],[1,10,1,18,1,26],[1,8,1,16,1,24],[1,6,1,14,1,22],[2,9,1,17,1,25],[1,7,2,15,1,23],[1,3,1,11,1,19,1,27],[1,5,1,13,2,21]],
        "10":[[1,0],[1,6],[1,12],[1,18],[1,8],[1,14],[1,20],[1,26],[1,16],[1,22],[1,28],[1,34],[1,9,1,21],[1,12,1,24],[1,15,1,27],[1,15,1,27],[1,18,1,30],[1,21,1,33],[1,5,1,17],[1,8,1,20],[1,11,1,23],[1,11,1,23],[1,14,1,26],[1,17,1,29],[1,1,1,13],[1,4,1,16],[1,7,1,19],[1,7,1,19],[1,10,1,22],[1,13,1,25],[1,8,1,20,1,32],[2,14,1,26],[1,8,2,20],[1,2,1,14,1,26],[2,16,1,28],[1,10,2,22],[1,4,1,16,1,28],[2,10,1,22],[1,12,2,24],[1,6,1,18,1,30],[2,12,1,24],[1,6,2,18],[2,9,2,21],[2,11,2,23],[1,7,2,19,1,31],[1,3,2,15,1,27],[1,5,2,17,1,29],[2,13,2,25]],
        "11":[[1,0],[1,6],[1,12],[1,18],[1,8],[1,14],[1,20],[1,26],[1,16],[1,22],[1,28],[1,34],[1,12],[1,18],[1,24],[1,30],[1,20],[1,26],[1,32],[1,38],[1,28],[1,34],[1,40],[1,46],[1,9,1,33],[1,12,1,36],[2,27],[2,27],[1,18,1,42],[2,33],[1,5,1,29],[2,20],[1,11,1,35],[1,11,1,35],[1,14,1,38],[2,29],[1,1,1,25],[1,4,1,28],[1,7,1,31],[1,7,1,31],[2,22],[2,25],[2,21],[2,24],[1,15,1,39],[1,15,1,39],[2,30],[1,21,1,45],[2,17],[1,8,1,32],[2,23],[2,23],[2,26],[1,17,1,41],[2,13],[2,16],[2,19],[2,19],[1,10,1,34],[1,13,1,37],[1,8,2,32],[2,14,1,38],[3,20],[1,2,2,26],[2,20,1,44],[3,26],[1,8,2,32],[2,14,1,38],[2,16,1,40],[3,22],[1,4,2,28],[2,10,1,34],[3,28],[1,10,2,34],[2,16,1,40],[3,22],[3,24],[1,6,2,30],[2,12,1,36],[3,18],[1,12,2,36],[2,18,1,42],[3,24],[1,6,2,30],[4,21],[4,23],[3,19,1,43],[1,3,3,27],[1,5,3,29],[4,25],[2,9,2,33],[2,11,2,35],[1,7,3,31],[3,15,1,39],[3,17,1,41],[2,13,2,37]],
        "12":[[1,0],[1,12],[1,1,1,11],[1,4,1,8],[1,5,1,7],[1,2,1,4,1,6],[1,6,1,8,1,10],[1,3,1,5,1,7,1,9]],
        "13":[[1,0],[1,6],[1,12],[1,18],[1,7,1,11],[1,4,1,8],[1,1,1,17],[1,5,1,13],[1,10,1,14],[1,7,1,11],[1,4,1,8,1,12],[1,2,1,6,1,10],[1,8,1,12,1,16],[1,6,1,10,1,14],[1,3,1,7,1,11,1,15],[1,5,2,9,1,13]],
        "14":[[1,0],[1,8],[1,16],[1,12],[1,20],[1,28],[1,15,1,21],[1,12,1,24],[1,9,1,27],[1,11,1,17],[1,8,1,20],[1,5,1,23],[1,7,1,13],[1,4,1,16],[1,1,1,19],[1,2,1,14,1,20],[1,8,1,14,1,26],[1,4,1,10,1,22],[1,10,1,16,1,22],[1,6,1,12,1,18],[1,6,1,18,1,24],[1,3,1,9,1,15,1,21],[1,5,1,11,1,17,1,23],[1,7,1,13,1,19,1,25]],
        "15":[[1,0],[1,6],[1,8],[1,14],[1,16],[1,22],[1,12],[1,18],[1,20],[1,26],[1,28],[1,34],[1,9,1,33],[1,12,1,24],[1,15,1,27],[1,15,1,27],[1,18,1,30],[2,21],[1,5,1,29],[1,8,1,20],[1,11,1,23],[1,11,1,23],[1,14,1,26],[2,17],[1,1,1,25],[1,4,1,16],[1,7,1,19],[1,7,1,19],[1,10,1,22],[2,13],[1,8,2,20],[1,2,1,14,1,26],[1,8,1,20,1,32],[2,14,1,26],[1,4,1,16,1,28],[2,10,1,22],[2,16,1,28],[1,10,2,22],[2,12,1,24],[1,6,2,18],[1,12,2,24],[1,6,1,18,1,30],[2,9,2,21],[2,11,2,23],[1,7,2,19,1,31],[1,3,2,15,1,27],[1,5,2,17,1,29],[2,13,2,25]],
        "16":[[1,0],[1,12],[1,24],[1,36],[1,48],[1,1,1,11],[1,7,1,17],[1,13,1,23],[1,19,1,29],[1,13,1,23],[1,19,1,29],[1,25,1,35],[1,25,1,35],[1,31,1,41],[1,37,1,47],[1,2,1,12,1,22],[1,6,1,16,1,26],[1,10,1,20,1,30],[1,10,1,20,1,30],[1,14,1,24,1,34],[1,18,1,28,1,38],[1,14,1,24,1,34],[1,18,1,28,1,38],[1,22,1,32,1,42],[1,26,1,36,1,46],[1,15,1,25,1,35,1,45],[1,17,2,27,1,37],[1,9,1,19,1,29,1,39],[1,11,2,21,1,31],[1,3,1,13,1,23,1,33],[1,20,2,30,1,40],[1,12,1,22,1,32,1,42],[1,14,2,24,1,34],[1,6,1,16,1,26,1,36],[1,8,2,18,1,28],[1,12,2,22,2,32],[1,4,1,14,1,24,1,34,1,44],[2,16,2,26,1,36],[1,8,1,18,2,28,1,38],[1,10,2,20,1,30,1,40],[1,5,2,15,2,25,1,35],[1,7,2,17,2,27,1,37],[1,9,2,19,2,29,1,39],[1,11,2,21,2,31,1,41],[1,13,2,23,2,33,1,43]],
        "17":[[1,0],[1,12],[1,24],[1,36],[1,48],[1,30],[1,42],[1,54],[1,66],[1,78],[1,11,1,31],[1,17,1,37],[1,13,1,53],[1,19,1,59],[1,13,1,53],[1,19,1,59],[1,25,1,65],[1,25,1,65],[1,31,1,71],[1,37,1,77],[1,1,1,41],[1,7,1,47],[1,35,1,55],[1,35,1,55],[1,41,1,61],[1,47,1,67],[1,23,1,43],[1,29,1,49],[1,23,1,43],[1,29,1,49],[1,2,1,22,1,42],[1,6,1,26,1,46],[1,10,1,30,1,50],[1,10,1,30,1,50],[1,14,1,34,1,54],[1,18,1,38,1,58],[1,14,1,34,1,54],[1,18,1,38,1,58],[1,22,1,42,1,62],[1,26,1,46,1,66],[1,12,1,32,1,52],[1,16,1,36,1,56],[1,20,1,40,1,60],[1,20,1,40,1,60],[1,24,1,44,1,64],[1,28,1,48,1,68],[1,24,1,44,1,64],[1,28,1,48,1,68],[1,32,1,52,1,72],[1,36,1,56,1,76],[1,15,1,35,1,55,1,75],[2,27,1,47,1,67],[1,19,2,39,1,59],[1,11,1,31,2,51],[1,3,1,23,1,43,1,63],[2,30,1,50,1,70],[1,22,2,42,1,62],[1,14,1,34,2,54],[1,6,1,26,1,46,1,66],[2,18,1,38,1,58],[1,25,2,45,1,65],[1,17,1,37,2,57],[1,9,1,29,1,49,1,69],[2,21,1,41,1,61],[1,13,2,33,1,53],[1,20,1,40,2,60],[1,12,1,32,1,52,1,72],[2,24,1,44,1,64],[1,16,2,36,1,56],[1,8,1,28,2,48],[1,12,2,32,2,52],[2,22,1,42,2,62],[1,4,1,24,2,44,1,64],[1,14,2,34,1,54,1,74],[2,16,1,36,2,56],[2,26,2,46,1,66],[1,8,2,28,1,48,1,68],[1,18,2,38,2,58],[2,20,2,40,1,60],[1,10,1,30,2,50,1,70],[2,15,2,35,2,55],[2,17,2,37,2,57],[2,19,2,39,2,59],[1,11,2,31,2,51,1,71],[1,13,2,33,2,53,1,73],[1,5,2,25,2,45,1,65],[1,7,2,27,2,47,1,67],[1,9,2,29,2,49,1,69],[2,21,2,41,2,61],[2,23,2,43,2,63]],
        "18":[[1,0],[1,12],[1,24],[1,36],[1,48],[1,20],[1,32],[1,44],[1,56],[1,68],[1,40],[1,52],[1,64],[1,76],[1,88],[1,21,1,51],[1,27,1,57],[1,33,1,63],[1,39,1,69],[1,33,1,63],[1,39,1,69],[1,45,1,75],[1,45,1,75],[1,51,1,81],[1,57,1,87],[1,11,1,41],[1,17,1,47],[1,23,1,53],[1,29,1,59],[1,23,1,53],[1,29,1,59],[1,35,1,65],[1,35,1,65],[1,41,1,71],[1,47,1,77],[1,1,1,31],[1,7,1,37],[1,13,1,43],[1,19,1,49],[1,13,1,43],[1,19,1,49],[1,25,1,55],[1,25,1,55],[1,31,1,61],[1,37,1,67],[1,2,1,32,1,62],[2,26,1,56],[1,20,2,50],[1,20,2,50],[1,14,1,44,1,74],[2,38,1,68],[1,14,1,44,1,74],[2,38,1,68],[1,32,2,62],[1,26,1,56,1,86],[2,22,1,52],[1,16,2,46],[1,10,1,40,1,70],[1,10,1,40,1,70],[2,34,1,64],[1,28,2,58],[2,34,1,64],[1,28,2,58],[1,22,1,52,1,82],[2,46,1,76],[1,12,2,42],[1,6,1,36,1,66],[2,30,1,60],[2,30,1,60],[1,24,2,54],[1,18,1,48,1,78],[1,24,2,54],[1,18,1,48,1,78],[2,42,1,72],[1,36,2,66],[1,15,2,45,1,75],[2,27,2,57],[1,9,2,39,1,69],[2,21,2,51],[1,3,2,33,1,63],[2,35,2,65],[1,17,2,47,1,77],[2,29,2,59],[1,11,2,41,1,71],[2,23,2,53],[1,25,2,55,1,85],[2,37,2,67],[1,19,2,49,1,79],[2,31,2,61],[1,13,2,43,1,73],[2,30,2,60],[1,12,2,42,1,72],[2,24,2,54],[1,6,2,36,1,66],[2,18,2,48],[1,20,2,50,1,80],[2,32,2,62],[1,14,2,44,1,74],[2,26,2,56],[1,8,2,38,1,68],[2,40,2,70],[1,22,2,52,1,82],[2,34,2,64],[1,16,2,46,1,76],[2,28,2,58],[1,12,2,42,2,72],[3,32,2,62],[2,22,3,52],[2,24,2,54,1,84],[1,14,3,44,1,74],[1,4,2,34,2,64],[3,36,2,66],[2,26,3,56],[2,16,2,46,1,76],[1,18,3,48,1,78],[1,8,2,38,2,68],[3,28,2,58],[2,30,3,60],[2,20,2,50,1,80],[1,10,3,40,1,70],[3,25,3,55],[1,7,3,37,2,67],[2,19,3,49,1,79],[3,31,3,61],[1,13,3,43,2,73],[1,5,3,35,2,65],[2,17,3,47,1,77],[3,29,3,59],[1,11,3,41,2,71],[2,23,3,53,1,83],[2,15,3,45,1,75],[3,27,3,57],[1,9,3,39,2,69],[2,21,3,51,1,81],[3,33,3,63]],
        "19":[[1,0],[1,12],[1,24],[1,36],[1,48],[1,20],[1,32],[1,44],[1,56],[1,68],[1,40],[1,52],[1,64],[1,76],[1,88],[1,30],[1,42],[1,54],[1,66],[1,78],[1,50],[1,62],[1,74],[1,86],[1,98],[1,70],[1,82],[1,94],[1,106],[1,118],[2,51],[2,57],[1,33,1,93],[1,39,1,99],[1,33,1,93],[1,39,1,99],[1,45,1,105],[1,45,1,105],[1,51,1,111],[1,57,1,117],[2,41],[2,47],[2,53],[2,59],[2,53],[2,59],[1,35,1,95],[1,35,1,95],[1,41,1,101],[1,47,1,107],[2,31],[2,37],[2,43],[2,49],[2,43],[2,49],[2,55],[2,55],[1,31,1,91],[1,37,1,97],[1,21,1,81],[1,27,1,87],[2,63],[2,69],[2,63],[2,69],[2,75],[2,75],[2,81],[2,87],[1,11,1,71],[1,17,1,77],[1,23,1,83],[1,29,1,89],[1,23,1,83],[1,29,1,89],[2,65],[2,65],[2,71],[2,77],[1,1,1,61],[1,7,1,67],[1,13,1,73],[1,19,1,79],[1,13,1,73],[1,19,1,79],[1,25,1,85],[1,25,1,85],[2,61],[2,67],[1,2,2,62],[2,26,1,86],[3,50],[3,50],[1,14,2,74],[2,38,1,98],[1,14,2,74],[2,38,1,98],[3,62],[1,26,2,86],[2,32,1,92],[3,56],[1,20,2,80],[1,20,2,80],[2,44,1,104],[3,68],[2,44,1,104],[3,68],[1,32,2,92],[2,56,1,116],[2,22,1,82],[3,46],[1,10,2,70],[1,10,2,70],[2,34,1,94],[3,58],[2,34,1,94],[3,58],[1,22,2,82],[2,46,1,106],[3,52],[1,16,2,76],[2,40,1,100],[2,40,1,100],[3,64],[1,28,2,88],[3,64],[1,28,2,88],[2,52,1,112],[3,76],[3,42],[1,6,2,66],[2,30,1,90],[2,30,1,90],[3,54],[1,18,2,78],[3,54],[1,18,2,78],[2,42,1,102],[3,66],[1,12,2,72],[2,36,1,96],[3,60],[3,60],[1,24,2,84],[2,48,1,108],[1,24,2,84],[2,48,1,108],[3,72],[1,36,2,96],[1,15,3,75],[2,27,2,87],[3,39,1,99],[4,51],[1,3,3,63],[2,35,2,95],[3,47,1,107],[4,59],[1,11,3,71],[2,23,2,83],[3,55,1,115],[4,67],[1,19,3,79],[2,31,2,91],[3,43,1,103],[2,30,2,90],[3,42,1,102],[4,54],[1,6,3,66],[2,18,2,78],[3,50,1,110],[4,62],[1,14,3,74],[2,26,2,86],[3,38,1,98],[4,70],[1,22,3,82],[2,34,2,94],[3,46,1,106],[4,58],[3,45,1,105],[4,57],[1,9,3,69],[2,21,2,81],[3,33,1,93],[4,65],[1,17,3,77],[2,29,2,89],[3,41,1,101],[4,53],[1,25,3,85],[2,37,2,97],[3,49,1,109],[4,61],[1,13,3,73],[4,60],[1,12,3,72],[2,24,2,84],[3,36,1,96],[4,48],[1,20,3,80],[2,32,2,92],[3,44,1,104],[4,56],[1,8,3,68],[2,40,2,100],[3,52,1,112],[4,64],[1,16,3,76],[2,28,2,88],[1,12,4,72],[3,32,2,92],[5,52],[3,42,2,102],[5,62],[2,22,3,82],[2,24,3,84],[4,44,1,104],[1,4,4,64],[4,54,1,114],[1,14,4,74],[3,34,2,94],[3,36,2,96],[5,56],[2,16,3,76],[5,66],[2,26,3,86],[4,46,1,106],[4,48,1,108],[1,8,4,68],[3,28,2,88],[1,18,4,78],[3,38,2,98],[5,58],[5,60],[2,20,3,80],[4,40,1,100],[2,30,3,90],[4,50,1,110],[1,10,4,70],[3,25,3,85],[1,7,5,67],[5,49,1,109],[6,61],[4,43,2,103],[4,35,2,95],[2,17,4,77],[6,59],[1,11,5,71],[5,53,1,113],[5,45,1,105],[3,27,3,87],[1,9,5,69],[2,21,4,81],[6,63],[6,55],[4,37,2,97],[2,19,4,79],[3,31,3,91],[1,13,5,73],[1,5,5,65],[5,47,1,107],[3,29,3,89],[4,41,2,101],[2,23,4,83],[2,15,4,75],[6,57],[4,39,2,99],[5,51,1,111],[3,33,3,93]],
        "20":[[1,0],[1,20],[1,40],[1,21,1,39],[1,27,1,33],[1,11,1,29],[1,17,1,23],[1,1,1,19],[1,7,1,13],[1,2,1,20,1,38],[1,14,1,20,1,26],[1,10,1,22,1,28],[1,10,1,16,1,34],[1,12,1,18,1,30],[1,6,1,24,1,30],[1,3,1,9,1,21,1,27],[1,11,1,17,1,23,1,29],[1,13,1,19,1,31,1,37],[1,6,1,12,1,18,1,24],[1,8,1,14,1,26,1,32],[1,16,1,22,1,28,1,34],[1,12,1,18,1,24,1,30,1,36],[1,8,1,14,1,20,1,26,1,32],[1,4,1,10,1,16,1,22,1,28],[1,7,1,13,1,19,2,25,1,31],[1,9,2,15,1,21,1,27,1,33],[1,5,1,11,1,17,1,23,1,29,1,35]],
        "21":[[1,0],[1,20],[1,40],[1,30],[1,50],[1,70],[1,39,1,51],[1,33,1,57],[1,21,1,69],[1,27,1,63],[1,29,1,41],[1,23,1,47],[1,17,1,53],[1,11,1,59],[1,19,1,31],[1,13,1,37],[1,7,1,43],[1,1,1,49],[1,2,1,38,1,50],[1,14,1,26,1,50],[1,20,1,32,1,68],[1,20,1,44,1,56],[1,10,1,22,1,58],[1,10,1,34,1,46],[1,28,1,40,1,52],[1,16,1,40,1,64],[1,18,1,30,1,42],[1,6,1,30,1,54],[1,12,1,48,1,60],[1,24,1,36,1,60],[1,3,1,27,1,39,1,51],[1,11,1,23,1,47,1,59],[1,19,1,31,1,43,1,67],[1,6,1,18,1,42,1,54],[1,14,1,26,1,38,1,62],[1,22,1,34,1,46,1,58],[1,9,1,21,1,33,1,57],[1,17,1,29,1,41,1,53],[1,13,1,37,1,49,1,61],[1,12,1,24,1,36,1,48],[1,8,1,32,1,44,1,56],[1,16,1,28,1,52,1,64],[1,12,1,24,1,36,1,48,1,60],[1,8,1,20,1,32,1,44,1,56],[1,4,1,16,1,28,1,40,1,52],[1,18,1,30,1,42,1,54,1,66],[1,14,1,26,1,38,1,50,1,62],[1,10,1,22,1,34,1,46,1,58],[1,13,2,25,1,37,1,49,1,61],[1,7,1,19,1,31,1,43,2,55],[1,11,1,23,2,35,1,47,1,59],[1,5,1,17,1,29,1,41,1,53,1,65],[1,9,1,21,1,33,2,45,1,57],[2,15,1,27,1,39,1,51,1,63]],
        "22":[[1,0],[1,30],[1,11,1,19],[1,13,1,17],[1,1,1,29],[1,7,1,23],[1,2,1,10,1,18],[1,6,1,10,1,14],[1,12,1,20,1,28],[1,16,1,20,1,24],[1,3,1,11,1,19,1,27],[1,6,1,14,1,18,1,22],[1,9,1,13,1,17,1,21],[1,8,1,12,1,16,1,24],[1,4,1,8,1,12,1,16,1,20],[1,10,1,14,1,18,1,22,1,26],[1,7,1,11,2,15,1,19,1,23],[1,5,1,9,1,13,1,17,1,21,1,25]]}
    return d[ST]

ChevieData["G4_22"]["sparseFakeDegrees"]=p4_2219

def p4_2220(ST,phi,q):
    f=ChevieData["G4_22"]["sparseFakeDegrees"](ST)[ChevieData["G4_22"]["CharInfo"](ST)["charparams"].index(phi)+1-1]
    return Sum(range(1,len(f)-1+1,3-1),lambda i: GAPMul(f[i-1],q**f[i+1-1]))

ChevieData["G4_22"]["FakeDegree"]=p4_2220

def p4_2221(ST):
    return map(lambda x: x[len(x)-1],ChevieData["G4_22"]["sparseFakeDegrees"](ST))

ChevieData["G4_22"]["HighestPowerFakeDegrees"]=p4_2221

def p4_2222(ST):
    return map(lambda x: x[2-1],ChevieData["G4_22"]["sparseFakeDegrees"](ST))

ChevieData["G4_22"]["LowestPowerFakeDegrees"]=p4_2222

def p4_2223(ST):
    if ST in range(4,7+1) :
        return 7
    else:
        if ST in range(8,15+1) :
            return 11
        else:
            if ST in range(16,22+1) :
                return 19

ChevieData["G4_22"]["Generic"]=p4_2223

def p4_2224(ST):
    if ST in range(4,7+1) :
        return {"f1":{"coeff":1,
            "vcyc":[[[1,-1,0,0,0,0,0,0],1],[[1,-1,2,-1,-1,2,-1,-1],1],[[0,0,1,-1,0,0,0,0],1],[[0,0,1,0,-1,0,0,0],1],[[0,0,0,0,0,1,-1,0],1],[[0,0,0,0,0,1,0,-1],1],[[1,-1,1,-1,0,1,-1,0],1],[[1,-1,1,-1,0,1,0,-1],1],[[1,-1,1,0,-1,1,-1,0],1],[[1,-1,1,0,-1,1,0,-1],1]]},
            "f2":{"coeff":2,
            "factor":[0,0,-1,0,1,0,0,0],
            "root":GAPDiv([1,1,0,1,1,0,1,1],2),
            "vcyc":[[[0,0,1,-1,0,0,0,0],1],[[0,0,-1,0,1,0,0,0],1],[[0,0,0,0,0,-1,1,0],1],[[0,0,0,0,0,-1,0,1],1],[[-1,0,-1,0,0,-1,0,0,1],1],[[-1,0,0,0,-1,0,-1,0,1],1],[[-1,0,0,0,-1,0,0,-1,1],1],[[0,-1,-1,0,0,-1,0,0,1],1],[[0,-1,0,0,-1,0,-1,0,1],1],[[0,-1,0,0,-1,0,0,-1,1],1]]},
            "f3":{"coeff":3,
            "root":GAPDiv([2,1,1,1,1,1,1,1],3),
            "vcyc":[[[-1,1,0,0,0,0,0,0],1],[[1,0,1,0,0,1,0,0,-1],1],[[1,0,1,0,0,0,1,0,-1],1],[[1,0,1,0,0,0,0,1,-1],1],[[1,0,0,1,0,1,0,0,-1],1],[[1,0,0,1,0,0,1,0,-1],1],[[1,0,0,1,0,0,0,1,-1],1],[[1,0,0,0,1,1,0,0,-1],1],[[1,0,0,0,1,0,1,0,-1],1],[[1,0,0,0,1,0,0,1,-1],1]]}}
    else:
        if ST in range(8,15+1) :
            return {"f1":{"vcyc":[[[1,-1,0,0,0,0,0,0,0],1],[[0,0,1,-1,0,0,0,0,0],1],[[0,0,1,0,-1,0,0,0,0],1],[[0,0,0,0,0,1,-1,0,0],1],[[0,0,0,0,0,1,0,-1,0],1],[[0,0,0,0,0,1,0,0,-1],1],[[1,-1,1,-1,0,1,-1,0,0],1],[[1,-1,1,-1,0,1,0,-1,0],1],[[1,-1,1,-1,0,1,0,0,-1],1],[[1,-1,1,0,-1,1,-1,0,0],1],[[1,-1,1,0,-1,1,0,-1,0],1],[[1,-1,1,0,-1,1,0,0,-1],1],[[1,-1,2,-1,-1,2,-1,-1,0],1],[[1,-1,2,-1,-1,2,-1,0,-1],1],[[1,-1,2,-1,-1,2,0,-1,-1],1],[[2,-2,2,-1,-1,3,-1,-1,-1],1]]},
                "f2":{"coeff":-2,
                "factor":[0,0,0,0,0,-1,1,0,0],
                "root":GAPDiv([1,1,0,1,1,1,1,0,0],2),
                "vcyc":[[[0,0,-1,1,0,0,0,0,0],1],[[0,0,-1,0,1,0,0,0,0],1],[[0,0,0,0,0,1,0,-1,0],1],[[0,0,0,0,0,1,0,0,-1],1],[[0,0,0,0,0,0,1,-1,0],1],[[0,0,0,0,0,0,1,0,-1],1],[[0,0,-1,1,0,1,1,-1,-1],1],[[0,0,-1,0,1,1,1,-1,-1],1],[[-1,0,-1,0,0,0,0,-1,0,1],1],[[-1,0,-1,0,0,0,0,0,-1,1],1],[[0,-1,-1,0,0,0,0,-1,0,1],1],[[0,-1,-1,0,0,0,0,0,-1,1],1],[[-1,0,0,-1,0,0,-1,0,0,1],1],[[-1,0,0,0,-1,0,-1,0,0,1],1],[[0,-1,0,-1,0,0,-1,0,0,1],1],[[0,-1,0,0,-1,0,-1,0,0,1],1]]},
                "f3":{"coeff":3,
                "root":GAPDiv([2,1,1,1,1,0,1,1,1],3),
                "vcyc":[[[-1,1,0,0,0,0,0,0,0],1],[[0,0,0,0,0,-1,0,1,0],1],[[0,0,0,0,0,-1,0,0,1],1],[[0,0,0,0,0,-1,1,0,0],1],[[0,-1,-1,0,0,-1,0,0,0,1],1],[[0,-1,0,-1,0,-1,0,0,0,1],1],[[0,-1,0,0,-1,-1,0,0,0,1],1],[[1,0,1,0,0,0,1,0,0,-1],1],[[1,0,1,0,0,0,0,1,0,-1],1],[[1,0,1,0,0,0,0,0,1,-1],1],[[1,0,0,1,0,0,1,0,0,-1],1],[[1,0,0,1,0,0,0,1,0,-1],1],[[1,0,0,1,0,0,0,0,1,-1],1],[[1,0,0,0,1,0,1,0,0,-1],1],[[1,0,0,0,1,0,0,1,0,-1],1],[[1,0,0,0,1,0,0,0,1,-1],1]]},
                "f4":{"coeff":-4,
                "root":GAPDiv([2,2,2,1,1,1,1,1,1],4),
                "vcyc":[[[0,0,1,-1,0,0,0,0,0],1],[[0,0,1,0,-1,0,0,0,0],1],[[-1,0,-1,0,0,-1,0,0,0,1],1],[[0,-1,-1,0,0,-1,0,0,0,1],1],[[1,0,1,0,0,0,1,0,0,-1],1],[[1,0,1,0,0,0,0,1,0,-1],1],[[1,0,1,0,0,0,0,0,1,-1],1],[[0,1,1,0,0,0,1,0,0,-1],1],[[0,1,1,0,0,0,0,1,0,-1],1],[[0,1,1,0,0,0,0,0,1,-1],1],[[1,1,1,1,0,1,1,0,0,-2],1],[[1,1,1,1,0,1,0,1,0,-2],1],[[1,1,1,1,0,1,0,0,1,-2],1],[[1,1,1,0,1,1,1,0,0,-2],1],[[1,1,1,0,1,1,0,1,0,-2],1],[[1,1,1,0,1,1,0,0,1,-2],1]]}}
        else:
            if ST in range(16,22+1) :
                return {"f1":{"vcyc":[[[1,-1,0,0,0,0,0,0,0,0],1],[[0,0,1,-1,0,0,0,0,0,0],1],[[0,0,1,0,-1,0,0,0,0,0],1],[[0,0,0,0,0,1,-1,0,0,0],1],[[0,0,0,0,0,1,0,-1,0,0],1],[[0,0,0,0,0,1,0,0,-1,0],1],[[0,0,0,0,0,1,0,0,0,-1],1],[[1,-1,1,-1,0,1,-1,0,0,0],1],[[1,-1,1,-1,0,1,0,-1,0,0],1],[[1,-1,1,-1,0,1,0,0,-1,0],1],[[1,-1,1,-1,0,1,0,0,0,-1],1],[[1,-1,1,0,-1,1,-1,0,0,0],1],[[1,-1,1,0,-1,1,0,-1,0,0],1],[[1,-1,1,0,-1,1,0,0,-1,0],1],[[1,-1,1,0,-1,1,0,0,0,-1],1],[[1,-1,2,-1,-1,2,-1,-1,0,0],1],[[1,-1,2,-1,-1,2,-1,0,-1,0],1],[[1,-1,2,-1,-1,2,-1,0,0,-1],1],[[1,-1,2,-1,-1,2,0,-1,-1,0],1],[[1,-1,2,-1,-1,2,0,-1,0,-1],1],[[1,-1,2,-1,-1,2,0,0,-1,-1],1],[[2,-2,2,-1,-1,3,-1,-1,-1,0],1],[[2,-2,2,-1,-1,3,-1,-1,0,-1],1],[[2,-2,2,-1,-1,3,-1,0,-1,-1],1],[[2,-2,2,-1,-1,3,0,-1,-1,-1],1],[[2,-2,3,-2,-1,4,-1,-1,-1,-1],1],[[2,-2,3,-1,-2,4,-1,-1,-1,-1],1],[[3,-3,4,-2,-2,4,-1,-1,-1,-1],1]]},
                    "f2":{"coeff":-2,
                    "root":GAPDiv([1,1,1,1,0,1,1,0,0,0],2),
                    "vcyc":[[[0,0,1,0,-1,0,0,0,0,0],1],[[0,0,0,1,-1,0,0,0,0,0],1],[[0,0,0,0,0,1,0,-1,0,0],1],[[0,0,0,0,0,1,0,0,-1,0],1],[[0,0,0,0,0,1,0,0,0,-1],1],[[0,0,0,0,0,0,1,-1,0,0],1],[[0,0,0,0,0,0,1,0,-1,0],1],[[0,0,0,0,0,0,1,0,0,-1],1],[[0,0,1,0,-1,1,1,-1,-1,0],1],[[0,0,1,0,-1,1,1,-1,0,-1],1],[[0,0,1,0,-1,1,1,0,-1,-1],1],[[0,0,0,1,-1,1,1,-1,-1,0],1],[[0,0,0,1,-1,1,1,-1,0,-1],1],[[0,0,0,1,-1,1,1,0,-1,-1],1],[[0,0,1,1,-2,1,2,-1,-1,-1],1],[[0,0,1,1,-2,2,1,-1,-1,-1],1],[[-1,0,-1,0,0,-1,0,0,0,0,1],1],[[1,0,1,0,0,0,1,0,0,0,-1],1],[[0,1,1,0,0,1,0,0,0,0,-1],1],[[0,-1,-1,0,0,0,-1,0,0,0,1],1],[[0,-1,0,0,-1,0,0,-1,0,0,1],1],[[0,-1,0,0,-1,0,0,0,-1,0,1],1],[[0,-1,0,0,-1,0,0,0,0,-1,1],1],[[-1,0,0,0,-1,0,0,-1,0,0,1],1],[[-1,0,0,0,-1,0,0,0,-1,0,1],1],[[-1,0,0,0,-1,0,0,0,0,-1,1],1],[[-1,0,0,0,-1,1,1,-1,-1,-1,1],1],[[0,-1,0,0,-1,1,1,-1,-1,-1,1],1]]},
                    "f3":{"coeff":3,
                    "root":GAPDiv([2,1,1,1,1,1,1,1,0,0],3),
                    "vcyc":[[[-1,1,0,0,0,0,0,0,0,0],1],[[0,0,0,0,0,1,0,0,-1,0],1],[[0,0,0,0,0,1,0,0,0,-1],1],[[0,0,0,0,0,0,1,0,-1,0],1],[[0,0,0,0,0,0,1,0,0,-1],1],[[0,0,0,0,0,0,0,1,-1,0],1],[[0,0,0,0,0,0,0,1,0,-1],1],[[1,-1,0,0,0,1,1,0,-1,-1],1],[[1,-1,0,0,0,1,0,1,-1,-1],1],[[1,-1,0,0,0,0,1,1,-1,-1],1],[[0,-1,-1,0,0,0,0,0,-1,0,1],1],[[0,-1,-1,0,0,0,0,0,0,-1,1],1],[[0,-1,0,-1,0,0,0,0,-1,0,1],1],[[0,-1,0,-1,0,0,0,0,0,-1,1],1],[[0,-1,0,0,-1,0,0,0,-1,0,1],1],[[0,-1,0,0,-1,0,0,0,0,-1,1],1],[[1,0,1,0,0,1,0,0,0,0,-1],1],[[1,0,1,0,0,0,1,0,0,0,-1],1],[[1,0,1,0,0,0,0,1,0,0,-1],1],[[1,0,0,1,0,1,0,0,0,0,-1],1],[[1,0,0,1,0,0,1,0,0,0,-1],1],[[1,0,0,1,0,0,0,1,0,0,-1],1],[[1,0,0,0,1,1,0,0,0,0,-1],1],[[1,0,0,0,1,0,1,0,0,0,-1],1],[[1,0,0,0,1,0,0,1,0,0,-1],1],[[-1,-1,-1,-1,0,0,0,0,-1,-1,2],1],[[-1,-1,-1,0,-1,0,0,0,-1,-1,2],1],[[-1,-1,0,-1,-1,0,0,0,-1,-1,2],1]]},
                    "f4":{"coeff":-4,
                    "root":GAPDiv([2,2,2,1,1,1,1,1,1,0],4),
                    "vcyc":[[[0,0,-1,1,0,0,0,0,0,0],1],[[0,0,1,0,-1,0,0,0,0,0],1],[[0,0,0,0,0,1,0,0,0,-1],1],[[0,0,0,0,0,0,1,0,0,-1],1],[[0,0,0,0,0,0,0,1,0,-1],1],[[0,0,0,0,0,0,0,0,1,-1],1],[[1,0,1,0,0,1,0,0,0,0,-1],1],[[1,0,1,0,0,0,1,0,0,0,-1],1],[[1,0,1,0,0,0,0,1,0,0,-1],1],[[1,0,1,0,0,0,0,0,1,0,-1],1],[[0,1,1,0,0,1,0,0,0,0,-1],1],[[0,1,1,0,0,0,1,0,0,0,-1],1],[[0,1,1,0,0,0,0,1,0,0,-1],1],[[0,1,1,0,0,0,0,0,1,0,-1],1],[[-1,0,0,-1,0,0,0,0,0,-1,1],1],[[0,-1,0,-1,0,0,0,0,0,-1,1],1],[[-1,0,0,0,-1,0,0,0,0,-1,1],1],[[0,-1,0,0,-1,0,0,0,0,-1,1],1],[[-1,-1,-1,-1,0,-1,-1,0,0,0,2],1],[[-1,-1,-1,-1,0,-1,0,-1,0,0,2],1],[[1,1,1,1,0,1,0,0,1,0,-2],1],[[1,1,1,1,0,0,1,1,0,0,-2],1],[[-1,-1,-1,-1,0,0,-1,0,-1,0,2],1],[[-1,-1,-1,-1,0,0,0,-1,-1,0,2],1],[[-1,-1,0,-1,-1,-1,0,0,0,-1,2],1],[[-1,-1,0,-1,-1,0,-1,0,0,-1,2],1],[[-1,-1,0,-1,-1,0,0,-1,0,-1,2],1],[[-1,-1,0,-1,-1,0,0,0,-1,-1,2],1]]},
                    "f5":{"coeff":5,
                    "root":GAPDiv([3,2,2,2,1,1,1,1,1,1],5),
                    "vcyc":[[[1,-1,0,0,0,0,0,0,0,0],1],[[0,0,-1,0,1,0,0,0,0,0],1],[[0,0,0,-1,1,0,0,0,0,0],1],[[1,0,1,0,0,1,0,0,0,0,-1],1],[[1,0,1,0,0,0,1,0,0,0,-1],1],[[1,0,1,0,0,0,0,1,0,0,-1],1],[[1,0,1,0,0,0,0,0,1,0,-1],1],[[1,0,1,0,0,0,0,0,0,1,-1],1],[[1,0,0,1,0,1,0,0,0,0,-1],1],[[1,0,0,1,0,0,1,0,0,0,-1],1],[[1,0,0,1,0,0,0,1,0,0,-1],1],[[1,0,0,1,0,0,0,0,1,0,-1],1],[[1,0,0,1,0,0,0,0,0,1,-1],1],[[0,-1,0,0,-1,-1,0,0,0,0,1],1],[[0,-1,0,0,-1,0,-1,0,0,0,1],1],[[0,-1,0,0,-1,0,0,-1,0,0,1],1],[[0,-1,0,0,-1,0,0,0,-1,0,1],1],[[0,-1,0,0,-1,0,0,0,0,-1,1],1],[[1,1,1,1,0,1,1,0,0,0,-2],1],[[1,1,1,1,0,1,0,1,0,0,-2],1],[[1,1,1,1,0,1,0,0,1,0,-2],1],[[1,1,1,1,0,1,0,0,0,1,-2],1],[[1,1,1,1,0,0,1,1,0,0,-2],1],[[1,1,1,1,0,0,1,0,1,0,-2],1],[[1,1,1,1,0,0,1,0,0,1,-2],1],[[1,1,1,1,0,0,0,1,1,0,-2],1],[[1,1,1,1,0,0,0,1,0,1,-2],1],[[1,1,1,1,0,0,0,0,1,1,-2],1]]},
                    "f6":{"coeff":-6,
                    "root":GAPDiv([3,3,2,2,2,2,1,1,1,1],6),
                    "vcyc":[[[0,0,0,0,0,1,-1,0,0,0],1],[[0,0,0,0,0,1,0,-1,0,0],1],[[0,0,0,0,0,1,0,0,-1,0],1],[[0,0,0,0,0,1,0,0,0,-1],1],[[-1,0,-1,0,0,-1,0,0,0,0,1],1],[[-1,0,0,-1,0,-1,0,0,0,0,1],1],[[-1,0,0,0,-1,-1,0,0,0,0,1],1],[[0,1,1,0,0,1,0,0,0,0,-1],1],[[0,1,0,1,0,1,0,0,0,0,-1],1],[[0,1,0,0,1,1,0,0,0,0,-1],1],[[1,1,1,1,0,1,1,0,0,0,-2],1],[[1,1,1,1,0,1,0,1,0,0,-2],1],[[1,1,1,1,0,1,0,0,1,0,-2],1],[[1,1,1,1,0,1,0,0,0,1,-2],1],[[1,1,1,0,1,1,1,0,0,0,-2],1],[[1,1,1,0,1,1,0,1,0,0,-2],1],[[1,1,1,0,1,1,0,0,1,0,-2],1],[[1,1,1,0,1,1,0,0,0,1,-2],1],[[1,1,0,1,1,1,1,0,0,0,-2],1],[[1,1,0,1,1,1,0,1,0,0,-2],1],[[1,1,0,1,1,1,0,0,1,0,-2],1],[[1,1,0,1,1,1,0,0,0,1,-2],1],[[2,1,1,1,1,1,1,1,0,0,-3],1],[[2,1,1,1,1,1,1,0,1,0,-3],1],[[2,1,1,1,1,1,1,0,0,1,-3],1],[[2,1,1,1,1,1,0,1,1,0,-3],1],[[2,1,1,1,1,1,0,1,0,1,-3],1],[[2,1,1,1,1,1,0,0,1,1,-3],1]]}}

ChevieData["G4_22"]["SchurModels"]=p4_2224

def p4_2225(ST):
    if ST in range(4,7+1) :
        return Concatenation(Cartesian([1],range(1,2+1),range(1,3+1),range(1,3+1)),Cartesian([2],range(1,2+1),range(1,3+1),range(1,3+1)),Cartesian([3],range(1,3+1),range(1,2+1)))
    else:
        if ST in range(8,15+1) :
            return Concatenation(Cartesian([1],range(1,2+1),range(1,3+1),range(1,4+1)),Cartesian([2],range(1,2+1),range(1,3+1),range(1,6+1)),Cartesian([3],range(1,3+1),range(1,2+1),range(1,4+1)),Cartesian([4],range(1,4+1),range(1,3+1)))
        else:
            if ST in range(16,22+1) :
                return Concatenation(Cartesian([1],range(1,2+1),range(1,3+1),range(1,5+1)),Cartesian([2],range(1,2+1),range(1,3+1),range(1,10+1)),Cartesian([3],range(1,3+1),range(1,2+1),range(1,10+1)),Cartesian([4],range(1,4+1),range(1,3+1),range(1,5+1)),Cartesian([5],range(1,5+1),range(1,2+1),range(1,3+1)),Cartesian([6],range(1,6+1),range(1,5+1)))

ChevieData["G4_22"]["paramchars"]=p4_2225

def p4_2226(ST):
    if ST in range(4,7+1) :
        return map(p4_2227,ChevieData["G4_22"]["paramchars"](ST))
    else:
        if ST in range(8,15+1) :
            return map(p4_2228,ChevieData["G4_22"]["paramchars"](ST))
        else:
            if ST in range(8,22+1) :
                return map(p4_2229,ChevieData["G4_22"]["paramchars"](ST))

def p4_2227(char):
    def f(l,i):
        return Concatenation([l[i-1]],Drop(l,i))
    
    
    if char[1-1]==1 :
        return {"name":"f1",
            "order":Concatenation(f([1,2],char[2-1]),f(range(3,5+1),char[3-1]),f(range(6,8+1),char[4-1]))}
    else:
        if char[1-1]==2 :
            return {"name":"f2",
                "order":Concatenation([1,2],f(range(3,5+1),char[3-1]),f(range(6,8+1),char[4-1])),
                "rootPower":-1**char[2-1]}
        else:
            if char[1-1]==3 :
                return {"name":"f3",
                    "order":Concatenation(f(range(1,2+1),char[3-1]),range(3,5+1),range(6,8+1)),
                    "rootPower":ER(3)**char[2-1]}

def p4_2228(char):
    def f(l,i):
        return Concatenation([l[i-1]],Drop(l,i))
    
    
    if char[1-1]==1 :
        return {"name":"f1",
            "order":Concatenation(f([1,2],char[2-1]),f(range(3,5+1),char[3-1]),f(range(6,9+1),char[4-1]))}
    else:
        if char[1-1]==2 :
            return {"name":"f2",
                "order":Concatenation([1,2],f(range(3,5+1),char[3-1]),5+Combinations(range(1,4+1),2)[char[4-1]-1],5+Difference(range(1,4+1),Combinations(range(1,4+1),2)[char[4-1]-1])),
                "rootPower":-1**char[2-1]}
        else:
            if char[1-1]==3 :
                return {"name":"f3",
                    "order":Concatenation(f([1,2],char[3-1]),range(3,5+1),f(range(6,9+1),char[4-1])),
                    "rootPower":ER(3)**char[2-1]}
            else:
                if char[1-1]==4 :
                    return {"name":"f4",
                        "order":Concatenation([1,2],f(range(3,5+1),char[3-1]),range(6,9+1)),
                        "rootPower":ER(4)**char[2-1]}

def p4_2229(char):
    def f(l,i):
        return Concatenation([l[i-1]],Drop(l,i))
    
    
    if char[1-1]==1 :
        return {"name":"f1",
            "order":Concatenation(f([1,2],char[2-1]),f(range(3,5+1),char[3-1]),f(range(6,10+1),char[4-1]))}
    else:
        if char[1-1]==2 :
            return {"name":"f2",
                "order":Concatenation([1,2],2+Drop(range(1,3+1),char[3-1]),[2+char[3-1]],5+Combinations(range(1,5+1),2)[char[4-1]-1],5+Difference(range(1,5+1),Combinations(range(1,5+1),2)[char[4-1]-1])),
                "rootPower":-1**char[2-1]}
        else:
            if char[1-1]==3 :
                return {"name":"f3",
                    "order":Concatenation(f([1,2],char[3-1]),range(3,5+1),5+Combinations(range(1,5+1),3)[char[4-1]-1],5+Difference(range(1,5+1),Combinations(range(1,5+1),3)[char[4-1]-1])),
                    "rootPower":ER(3)**char[2-1]}
            else:
                if char[1-1]==4 :
                    return {"name":"f4",
                        "order":Concatenation([1,2],f(range(3,5+1),char[3-1]),Drop(range(6,10+1),char[4-1]),[5+char[4-1]]),
                        "rootPower":ER(4)**char[2-1]}
                else:
                    if char[1-1]==5 :
                        return {"name":"f5",
                            "order":Concatenation(f([1,2],char[3-1]),Drop(range(3,5+1),char[4-1]),[2+char[4-1]],range(6,10+1)),
                            "rootPower":ER(5)**char[2-1]}
                    else:
                        if char[1-1]==6 :
                            return {"name":"f6",
                                "order":Concatenation([1,2],range(3,5+1),f(range(6,10+1),char[3-1])),
                                "rootPower":ER(6)**char[2-1]}

ChevieData["G4_22"]["SchurData"]=p4_2226

def G4_22FetchIndexChars(ST,para):
    if not ChevieData["CheckIndexChars"] :
        return ChevieData["G4_22"]["CharInfo"](ST)["indexchars"]
    if not "G4_22CachedIndexChars" in ChevieData :
        ChevieData["G4_22CachedIndexChars"]=[]
        for i,j in zip(range(4,22+1),map(lambda i: [],range(4,22+1))):
            ChevieData["G4_22CachedIndexChars"][i-1]=j
        InfoChevie2("Creating G4_22CachedIndexChars\n")
    p=PositionProperty(ChevieData["G4_22CachedIndexChars"][ST-1],lambda x: x[1-1]==para)
    if p!=false :
        return ChevieData["G4_22CachedIndexChars"][ST-1][p-1][2-1]
        InfoChevie2("Using G4_22CachedIndexChars(",para,")\n")
    else:
        return ChevieData["G4_22"]["HeckeCharTable"](ST,para,[])["indexchars"]



def p4_2230(ST,p,para,rootpara):
    g=ChevieData["G4_22"]["Generic"](ST)
    index=GAPDiv(ChevieData["G4_22"]["Size"](g),ChevieData["G4_22"]["Size"](ST))
    Y=Concatenation(ChevieData["G4_22"]["GetParams"](ST,para))
    g=ChevieData["G4_22"]["CharInfo"](ST)
    g=G4_22FetchIndexChars(ST,para)[g["charparams"].index(p)+1-1]
    g=ChevieData["G4_22"]["SchurData"](ST)[g-1]
    g=VFactorSchurElement(Y,ChevieData["G4_22"]["SchurModels"](ST)[g["name"]],g)
    return GAPDiv(g,index)

ChevieData["G4_22"]["FactorizedSchurElement"]=p4_2230

def p4_2231(ST,p,para,rootpara):
    g=ChevieData["G4_22"]["Generic"](ST)
    index=GAPDiv(ChevieData["G4_22"]["Size"](g),ChevieData["G4_22"]["Size"](ST))
    Y=Concatenation(ChevieData["G4_22"]["GetParams"](ST,para))
    g=ChevieData["G4_22"]["CharInfo"](ST)
    g=G4_22FetchIndexChars(ST,para)[g["charparams"].index(p)+1-1]
    g=ChevieData["G4_22"]["SchurData"](ST)[g-1]
    g=VcycSchurElement(Y,ChevieData["G4_22"]["SchurModels"](ST)[g["name"]],g)
    return GAPDiv(g,index)

ChevieData["G4_22"]["SchurElement"]=p4_2231

def p4_2232(ST,p):
    T=ChevieData["G4_22"]["CharTable"](ST)
    T["name"]=T["identifier"]
    m=DecompositionMatrix(T%p)
    return map(lambda c: [c[1-1],[[m[k-1] for k in c[1-1]][k-1] for k in c[2-1]]],BlocksMat(m))

ChevieData["G4_22"]["DecompositionMatrix"]=p4_2232

def p4_2233(ST,para):
    def f(p):
        p=map(GetRoot,p)
        return Concatenation(p,-p)
    
    
    if ST==4 :
        return [[1,-1],[1,ER(3),ER(3)**2],para[1-1]]
    else:
        if ST==5 :
            return [[1,-1],para[1-1],para[2-1]]
        else:
            if ST==6 :
                return [para[1-1],[1,ER(3),ER(3)**2],para[2-1]]
            else:
                if ST==7 :
                    return para
                else:
                    if ST==8 :
                        return [[1,-1],[1,ER(3),ER(3)**2],para[1-1]]
                    else:
                        if ST==9 :
                            return [para[1-1],[1,ER(3),ER(3)**2],para[2-1]]
                        else:
                            if ST==10 :
                                return [[1,-1],para[1-1],para[2-1]]
                            else:
                                if ST==11 :
                                    return para
                                else:
                                    if ST==12 :
                                        return [para[1-1],[1,ER(3),ER(3)**2],[1,ER(4),-1,ER(4)**3]]
                                    else:
                                        if ST==13 :
                                            return [para[2-1],[1,ER(3),ER(3)**2],f(para[1-1])]
                                        else:
                                            if ST==14 :
                                                return [para[1-1],para[2-1],[1,ER(4),-1,ER(4)**3]]
                                            else:
                                                if ST==15 :
                                                    return [para[1-1],para[2-1],f(para[3-1])]
                                                else:
                                                    if ST==16 :
                                                        return [[1,-1],[1,ER(3),ER(3)**2],para[1-1]]
                                                    else:
                                                        if ST==17 :
                                                            return [para[1-1],[1,ER(3),ER(3)**2],para[2-1]]
                                                        else:
                                                            if ST==18 :
                                                                return [[1,-1],para[1-1],para[2-1]]
                                                            else:
                                                                if ST==19 :
                                                                    return para
                                                                else:
                                                                    if ST==20 :
                                                                        return [[1,-1],para[1-1],[1,ER(5),ER(5)**2,ER(5)**3,ER(5)**4]]
                                                                    else:
                                                                        if ST==21 :
                                                                            return [para[1-1],para[2-1],[1,ER(5),ER(5)**2,ER(5)**3,ER(5)**4]]
                                                                        else:
                                                                            if ST==22 :
                                                                                return [para[1-1],[1,ER(3),ER(3)**2],[1,ER(5),ER(5)**2,ER(5)**3,ER(5)**4]]

ChevieData["G4_22"]["GetParams"]=p4_2233

def p4_2234(ST):
    d={"4":[[1,3,-1],[3]],
        "5":[[2],[3]],
        "6":[[1],[3]],
        "7":[[1],[2],[3]],
        "8":[[3],[1,3,-1]],
        "9":[[1],[3]],
        "10":[[2],[3]],
        "11":[[1],[2],[3]],
        "12":[[1],[2,1,-2],[-2,1,2]],
        "13":[[3,3],[1],[-2,1,2]],
        "14":[[1],[2]],
        "15":[[1],[2],[3,3]],
        "16":[[3],[1,3,-1]],
        "17":[[1],[3]],
        "18":[[2],[3]],
        "19":[[1],[2],[3]],
        "20":[[2],[1,2,-1]],
        "21":[[1],[2]],
        "22":[[1],[2,1,-2],[-2,1,2]]}
    return d[ST]

ChevieData["G4_22"]["Embed"]=p4_2234

def G4_22Helper(c,e,x,n,p):
    nz=Filtered(range(1,len(c)+1),lambda i: c[i-1]!=GAPMul(0,c[i-1]))
    r=Gcd(Concatenation([e[k-1] for k in nz],[n]))
    root=GAPMul(GetRoot(x,GAPDiv(n,r)),ER(n)**GAPMul(p,r))
    res=GAPMul(c,root**0)
    for i,j in zip(nz,map(lambda i: GAPMul(c[i-1],root**GAPDiv(e[i-1],r)),nz)):
        res[i-1]=j
    return res



if not "CheckIndexChars" in ChevieData :
    ChevieData["CheckIndexChars"]=false

def G4_22Test(res,rows,i):
    T=[None,None,None,7,7,7,7,11,11,11,11,11,11,11,11,19,19,19,19,19,19,19]
    T=SPrint("G",T[res["ST"]-1])
    if not "G4_22CachedIndexChars" in ChevieData :
        ChevieData["G4_22CachedIndexChars"]=[]
        for i,j in zip(range(4,22+1),map(lambda i: [],range(4,22+1))):
            ChevieData["G4_22CachedIndexChars"][i-1]=j
        InfoChevie2("Creating G4_22CachedIndexChars\n")
    p=PositionProperty(ChevieData["G4_22CachedIndexChars"][res["ST"]-1],lambda x: x[1-1]==res["parameter"])
    if p!=false :
        InfoChevie2("Using G4_22CachedIndexChars(",res["parameter"],")\n")
        ic=ChevieData["G4_22CachedIndexChars"][res["ST"]-1][p-1][2-1]
        res["irreducibles"]=[rows[k-1] for k in ic]
        if ic!=i :
            print "*** WARNING: choice of character restrictions from ",T," for this specialization does  !  agree with group CharTable\n",
            if not ChevieData["CheckIndexChars"] :
                print "Try again with CHEVIE.CheckIndexChars=true\n",
        return ic
    ic=i
    res["irreducibles"]=[rows[k-1] for k in ic]
    if len(Set(res["irreducibles"]))==len(res["classes"]) :
        l=i
    else:
        l=map(lambda x: rows.index(x)+1,rows)
        if len(Set(l))!=len(res["classes"]) :
            Error("specialization  !  semi-simple")
        l=map(lambda x: Filtered(range(1,len(l)+1),lambda i: l[i-1]==x),Set(l))
        print "*** WARNING: bad choice of character restrictions from ",T," for this specialization\n",
        if not ChevieData["CheckIndexChars"] :
            print "Try again with CHEVIE.CheckIndexChars=true\n",
        o=Filtered(l,lambda x: Number(i,lambda j: j in x)>1)
        print " over-represented by ",Intersection(Union(o),i)," : ",o,"\n",
        print " absent : ",Filtered(l,lambda x: Number(i,lambda j: j in x)==0),"\n",
        print " Choosing ",map(lambda x: x[1-1],l),"\n",
        l=map(lambda x: x[1-1],l)
        res["irreducibles"]=[rows[k-1] for k in l]
    ChevieData["G4_22CachedIndexChars"][res["ST"]-1].append([res["parameter"],l])
    return l



def p4_2235(ST,para,root):
    X=ChevieData["G4_22"]["GetParams"](ST,para)
    Z=X[3-1]
    Y=X[2-1]
    X=X[1-1]
    c24=Combinations(range(1,4+1),2)
    c23=[[2,3],[1,3],[1,2]]
    c25=Combinations(range(1,5+1),2)
    c35=Combinations(range(1,5+1),3)
    c23=[[2,3],[1,3],[1,2]]
    c=GAPMul(0,prod(para))
    if ST in range(4,7+1) :
        def GenericRow(char):
            if char[1-1]==1 :
                l=[1,X[char[2-1]-1],Y[char[3-1]-1],Z[char[4-1]-1]]
                return map(lambda class_: GAPMul(l[class_[1-1]-1],prod(l)**class_[2-1]),classes)
            if char[1-1]==2 :
                l=[[2],X,Drop(Y,char[3-1]),Drop(Z,char[4-1])]
            else:
                if char[1-1]==3 :
                    l=[[3],[X[k-1] for k in [1,2,char[3-1]]],Y,Z]
            return G4_22Helper(map(lambda class_: Sum(l[class_[1-1]-1]),classes),map(lambda c: c[2-1],classes),prod([l[k-1] for k in range(2,4+1)]),char[1-1],char[2-1])
        
        
    else:
        if ST in range(8,15+1) :
            def GenericRow(char):
                if char[1-1]==1 :
                    l=[1,X[char[2-1]-1],Y[char[3-1]-1],Z[char[4-1]-1],Z[char[4-1]-1]**2]
                    return map(lambda class_: GAPMul(l[class_[1-1]-1],prod([l[k-1] for k in range(2,4+1)])**class_[2-1]),classes)+c
                if char[1-1]==2 :
                    l=[[2],X,[Y[k-1] for k in c23[char[3-1]-1]],[Z[k-1] for k in c24[char[4-1]-1]]]
                else:
                    if char[1-1]==3 :
                        l=[[3],[X[k-1] for k in [1,2,char[3-1]]],Y,Drop(Z,char[4-1])]
                    else:
                        if char[1-1]==4 :
                            l=[[4],[X[k-1] for k in [1,2,1,2]],[Y[k-1] for k in [1,2,3,char[3-1]]],Z]
                l.append(map(lambda x: x**2,l[4-1]))
                return G4_22Helper(map(lambda class_: Sum(l[class_[1-1]-1]),classes),map(lambda c: c[2-1],classes),prod([l[k-1] for k in range(2,4+1)]),char[1-1],char[2-1])+c
            
            
        else:
            if ST in range(16,22+1) :
                def GenericRow(char):
                    if char[1-1]==1 :
                        l=[1,X[char[2-1]-1],Y[char[3-1]-1],Z[char[4-1]-1],Z[char[4-1]-1]**2]
                        return map(lambda class_: GAPMul(l[class_[1-1]-1],prod([l[k-1] for k in range(2,4+1)])**class_[2-1]),classes)
                    if char[1-1]==2 :
                        l=[[2],X,[Y[k-1] for k in c23[char[3-1]-1]],[Z[k-1] for k in c25[char[4-1]-1]]]
                    else:
                        if char[1-1]==3 :
                            l=[[3],[X[k-1] for k in [1,2,char[3-1]]],Y,[Z[k-1] for k in c35[char[4-1]-1]]]
                        else:
                            if char[1-1]==4 :
                                l=[[4],[X[k-1] for k in [1,2,1,2]],[Y[k-1] for k in [1,2,3,char[3-1]]],Drop(Z,char[4-1])]
                            else:
                                if char[1-1]==5 :
                                    l=[[5],[X[k-1] for k in [1,2,1,2,char[3-1]]],Concatenation(Y,[Y[k-1] for k in c23[char[4-1]-1]]),Z]
                                else:
                                    if char[1-1]==6 :
                                        l=[[6],[X[k-1] for k in [1,2,1,2,1,2]],[Y[k-1] for k in [1,2,3,1,2,3]],[Z[k-1] for k in [1,2,3,4,5,char[3-1]]]]
                    l.append(map(lambda x: x**2,l[4-1]))
                    return G4_22Helper(map(lambda class_: Sum(l[class_[1-1]-1]),classes),map(lambda c: c[2-1],classes),prod([l[k-1] for k in range(2,4+1)]),char[1-1],char[2-1])
                
                
    res={"name":SPrint("H(G",ST,")"),
        "ST":ST,
        "parameter":para,
        "degrees":ChevieData["G4_22"]["ReflectionDegrees"](ST),
        "dim":2,
        "reflclasses":[3],
        "powermap":ChevieData["G4_22"]["PowerMaps"](ST)}
    res.update(ChevieData["G4_22"]["ClassInfo"](ST))
    classes=[ChevieData["G4_22"]["paramclasses"](ST)[k-1] for k in res["indexclasses"]]
    res["size"]=prod(res["degrees"])
    res["order"]=res["size"]
    res["identifier"]=res["name"]
    res["centralizers"]=map(lambda x: GAPDiv(res["size"],x),res["classes"])
    ci=ChevieData["G4_22"]["CharInfo"](ST)
    res["irredinfo"]=map(lambda x: {"charparam":x,
        "charname":ChevieData["G4_22"]["CharName"](ST,x,{})},ci["charparams"])
    rows=map(GenericRow,ChevieData["G4_22"]["paramchars"](ST))
    ci=G4_22Test(res,GAPMul(rows,prod(para)**0),ci["indexchars"])
    if ci!=true :
        res["indexchars"]=ci
    return ChevieData["compat"]["MakeCharacterTable"](res)

ChevieData["G4_22"]["HeckeCharTable"]=p4_2235

def p4_2236(ST):
    para=ChevieData["G4_22"]["EigenvaluesGeneratingReflections"](ST)
    para=map(lambda x: map(lambda j: ER(GAPDiv(1,x))**j,range(0,GAPDiv(1,x)-1+1)),para)
    return ChevieData["G4_22"]["HeckeCharTable"](ST,para,[])

ChevieData["G4_22"]["CharTable"]=p4_2236

def p4_2237(X,Y,Z):
    return [[[X]],[[Y]],[[Z]]]

def p4_2238(X,Y,Z,root):
    r=GAPMul(-1**root,GetRoot(GAPMul(prod(X),prod(Y)),2))
    return [[[X[1-1],Sum(Y,lambda x: GAPDiv(1,x))-GAPDiv(GAPMul(Sum(Z),X[2-1]),r)],[0,X[2-1]]],[[Sum(Y),GAPDiv(1,X[1-1])],[GAPMul(-prod(Y),X[1-1]),0]],[[0,GAPDiv(GAPDiv(-r,prod(Y)),prod(X))],[r,Sum(Z)]]]

def p4_2239(X,Y,Z,root):
    x1=X[1-1]
    x2=X[2-1]
    z1=Z[1-1]
    r=GAPMul(ER(3)**root,GetRoot(GAPMul(x1**2,x2),3))
    a=GAPDiv(GAPMul(Sum(Y),r),x1)-GAPMul(prod(Y),Sum(Y,lambda y: GAPDiv(1,y)))+GAPDiv(GAPMul(prod(Y),GAPMul(x1,z1**2)-GAPDiv(GAPMul(x2,prod(Z)),z1)),r)
    return [[[x1,0,GAPDiv(GAPMul(-prod(Z),Sum(Z,lambda z: GAPDiv(1,z))),z1)+GAPDiv(GAPDiv(GAPMul(Sum(Y),r**2),prod(Y)),z1)],[0,x1,GAPMul(GAPDiv(GAPDiv(a,prod(Y)),z1),r**2)],[0,0,x2]],[[Sum(Y)-GAPDiv(GAPDiv(r,x1),z1),GAPDiv(1,z1),r],[a,GAPDiv(GAPDiv(r,x1),z1),0],[GAPDiv(GAPMul(-prod(Y),x1),r**2),0,0]],[[0,0,GAPDiv(GAPMul(-x1,prod(Z)),z1)],[0,z1,0],[GAPDiv(1,x1),GAPDiv(-1,r),Sum(Z)-z1]]]

def p4_2240(X,Y,Z,root):
    x1=X[1-1]
    x2=X[2-1]
    y1=Y[3-1]
    y2=Y[1-1]
    y3=Y[2-1]
    r=GAPMul(GetRoot(GAPMul(GAPMul(x1,x2)**2,y2),4),ER(4)**root)
    a=GAPMul(y2,x1)-GAPMul(r**2,Sum(Z))
    b=GAPMul(x1,x2)-GAPMul(r**2,Sum(Combinations(range(1,4+1),2),lambda x: prod([Z[k-1] for k in x])))
    return [[[x1,0,GAPMul(x1,a)-GAPDiv(GAPMul(x1,x2),r),GAPMul(x1,1+GAPDiv(y1,y3))-GAPDiv(GAPMul(r,Sum(Z,lambda x: GAPDiv(1,x))),y3)],[0,x1,GAPDiv(1,y1)+GAPDiv(1,y2),GAPDiv(-x2,r**3)],[0,0,x2,0],[0,0,0,x2]],[[y3+y1,GAPMul(x1,y1),GAPMul(y1,a),y1],[0,y1+y2,GAPDiv(1,x1),0],[0,GAPMul(-x1,y1),0,0],[-y3,0,0,0]],[[0,0,0,GAPDiv(-r,GAPMul(y3,x2))],[0,0,GAPDiv(-r,GAPMul(y2,x1)),0],[0,r,0,GAPDiv(1,r**2)],[GAPDiv(r,GAPMul(x1,y1)),GAPMul(-r,a),b,Sum(Z)]]]

def p4_2241(X,Y,Z,root):
    x1=X[1-1]
    x2=X[2-1]
    y1=Y[1-1]
    y2=Y[2-1]
    y3=Y[3-1]
    z1=Z[1-1]
    z2=Z[2-1]
    z3=Z[3-1]
    z4=Z[4-1]
    z5=Z[5-1]
    r=GAPMul(GetRoot(GAPMul(x1**3,x2**2),5),ER(5)**root)
    return [[[x2+x1,0,0,0,x1],[0,x2+x1,0,x2,0],[0,0,x1,0,0],[0,-x1,0,0,0],[-x2,0,0,0,0]],[[0,0,0,0,GAPDiv(-r,GAPMul(z5,x2))],[0,0,0,GAPDiv(GAPDiv(-r,z4),x1),x2],[0,0,GAPDiv(GAPDiv(r,z3),x1),GAPDiv(GAPMul(x2,y2),r)-GAPDiv(r,GAPMul(x1,z4)),x2],[0,GAPDiv(GAPDiv(r,z2),x2),GAPDiv(GAPMul(x1,x2),r**2)-GAPDiv(r,GAPMul(z2,x2)),y2+y3-GAPDiv(r,GAPMul(z3,x1))+GAPDiv(GAPMul(x1,x2),r**2),GAPDiv(GAPMul(-x1**2,x2**2),r**3)],[GAPDiv(GAPDiv(r,z1),x1),GAPDiv(GAPMul(r**2,GAPDiv(1,GAPMul(z4,z2))+GAPDiv(1,GAPMul(z1,z5))),GAPMul(x1,x2**2))-GAPDiv(GAPMul(y2,y3),x2)-GAPDiv(GAPMul(x1,y1),GAPMul(r,x2)),GAPMul(GAPDiv(-r**3,GAPMul(x1,x2))+GAPMul(z3,x1),GAPDiv(1,GAPMul(r,x2))+GAPDiv(r,GAPMul(x1**2,x2))-GAPDiv(GAPDiv(1,y3)+GAPDiv(1,y2),GAPMul(x1,x2))),GAPDiv(GAPMul(y1,y2),r)-GAPDiv(GAPMul(r,r+GAPMul(y1,z3)),GAPMul(z3,x1**2)),y1+y2-GAPDiv(GAPMul(z1,z5),r**2)]],[[z1,GAPDiv(GAPMul(x1,y2),GAPMul(r,x2))+GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(r**3,x1),z4),x2**3),y3),z5),y2)-GAPDiv(GAPMul(r,GAPDiv(z2,z5)+GAPDiv(z1,z4)),x2**2),GAPDiv(GAPDiv(GAPMul(-r,z3),x2**2),z5)-GAPMul(GAPDiv(z1,x2),y3+y2)+GAPDiv(GAPMul(GAPDiv(x1,x2),z3),r)-GAPDiv(GAPMul(x1,y1),r**2)+GAPDiv(GAPMul(x1**2,y1),r**3),GAPDiv(GAPDiv(GAPMul(y2,y3),x2),r)+GAPDiv(GAPDiv(GAPMul(y1,y2),x2),r**2)-GAPDiv(GAPMul(y2**2,y3**2),r**3)-GAPDiv(GAPMul(r,GAPDiv(z2+z3,GAPMul(z5,x2))+GAPDiv(z1,GAPMul(z4,x2))),x2),GAPDiv(GAPMul(z1,x2+x1),x2)+GAPDiv(GAPMul(x1**2,z2),r**2)-GAPDiv(GAPMul(r,GAPDiv(1,y1)+GAPDiv(1,y2)),x2)],[0,z2,z3+GAPDiv(GAPMul(x1,x2**2),r**3)-GAPDiv(GAPMul(r,GAPDiv(1,y3)+GAPDiv(1,y2)),x1),GAPDiv(GAPMul(x2,z2),x1)+z3-GAPDiv(GAPMul(x1,x2),r**2)-GAPDiv(GAPMul(r,GAPDiv(1,y3)+GAPDiv(1,y2)),x1),GAPDiv(-r**2,GAPMul(x1,z1))],[0,0,z3,GAPDiv(-r**3,GAPMul(x1**2,x2))+z3,GAPDiv(-r**2,GAPMul(x1,z1))],[0,0,0,z4,GAPDiv(GAPMul(z4,x1),r)],[0,0,0,0,z5]]]

def p4_2242(X,Y,Z,root):
    r=GAPMul(GetRoot(prod(Concatenation([X[k-1] for k in [1,2,1,2,1,2]],[Y[k-1] for k in [1,2,3,1,2,3]],[Z[k-1] for k in [1,2,3,4,5,5]])),6),ER(6)**root)
    x1=X[1-1]
    x2=X[2-1]
    y1=Y[1-1]
    y2=Y[2-1]
    y3=Y[3-1]
    z1=Z[1-1]
    z2=Z[2-1]
    z3=Z[3-1]
    z4=Z[4-1]
    z5=Z[5-1]
    a=1
    return GAPMul(r**0,[[[x1+x2,0,0,0,0,GAPMul(x2,x1)],[0,x1+x2,0,0,GAPMul(x2,x1),0],[0,0,x1+x2,GAPMul(x2,x1),0,0],[0,0,-1,0,0,0],[0,-1,0,0,0,0],[-1,0,0,0,0,0]],[[0,0,0,0,0,GAPMul(GAPDiv(-1,z5),r)],[0,0,0,0,GAPMul(GAPDiv(-1,z4),r),GAPDiv(GAPDiv(GAPDiv(-1,a),r**2),z4)],[0,0,0,GAPMul(GAPDiv(-1,z5),r),z4-z5,GAPMul(GAPDiv(GAPDiv(-1,a),r**3),z5)],[0,0,GAPDiv(GAPDiv(GAPDiv(r,z3),x2),x1),GAPDiv(GAPMul(x1,x2)-GAPDiv(a,GAPMul(z4,z5**2)),r**2),GAPDiv(GAPMul(-x1,x2)+GAPDiv(a,z5),r**3),GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(1,y1),y2),y3),x1**2),x2**2),z2),z3),a)],[0,GAPDiv(GAPDiv(GAPMul(GAPDiv(1,z2),r),x2),x1),GAPDiv(GAPMul(-GAPMul(y1,y3)+GAPMul(y2,y3),x1),a)+GAPDiv(GAPDiv(GAPMul(GAPDiv(GAPDiv(z5,x2),x1),y3+y2),z3),a),GAPDiv(GAPMul(-z5,GAPMul(y1,y3)+GAPMul(y2,y3)),a)+GAPDiv(GAPDiv(GAPDiv(GAPMul(r,GAPMul(z2,z4)-a),a),z4),z5)-GAPDiv(GAPDiv(GAPDiv(a,r),z4**2),z5**3),y3+y2-GAPDiv(GAPMul(x1,x2),r**2)+GAPDiv(GAPDiv(GAPDiv(a,r**2),z4),z5**2),GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(r,y1),y2),y3),x1**2),x2**2),z2),z3),a),z4),z5)],[GAPDiv(GAPDiv(GAPDiv(r,z1),x2),x1),GAPDiv(GAPMul(-GAPMul(x1,x2)**2,GAPMul(y1,y2)**2),r**2)-GAPDiv(GAPDiv(GAPMul(x1,y1),r**2),z5),GAPDiv(GAPMul(-GAPMul(y1,y3)+GAPMul(y2,y3),GAPMul(x1,x2)-a),z5)+GAPMul(z4-z5,x1**2)-GAPDiv(GAPDiv(GAPDiv(GAPMul(x1,x2),r),z5**2),z4),GAPMul(-z4-z5,GAPMul(y1,y3)+GAPMul(y2,y3))+GAPDiv(GAPDiv(GAPMul(y3+y2,GAPMul(x1,x2)+a),z5),z4)-GAPMul(r**2,GAPMul(x1,x2)**2)-GAPDiv(GAPDiv(GAPMul(r**2,a),z4),z5)+GAPDiv(GAPDiv(GAPMul(r**2,a**2),z4**2),z5**3),GAPMul(-x1,x2)-GAPDiv(GAPDiv(GAPMul(a**2,r),z5**2),z4),GAPMul(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(-1,z3),z4),z2),y1),y2),y3),z5),x1**2),x2**2),r**4)+y1]],[[z1,GAPDiv(GAPMul(z2-z1,z4-z5),z5)+GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPMul(a**2,r**3),x1),y1),y2),y3),x2),z5**3),z4),GAPMul(x2**2,x1**2)-GAPMul(y3+y2,x1**2)+GAPMul(x1,x2)-GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPMul(a**2,r**4),x1),x2),y1),y2),y3),z4**2),z5**4),GAPMul(-y3+y2,x1+x2)-GAPMul(GAPMul(y1,y3)+GAPMul(y2,y3),GAPMul(x1,x2)-GAPDiv(GAPDiv(GAPDiv(GAPDiv(a,y1),y2),y3),z5**2))+GAPMul(GAPMul(x1,x2)+GAPDiv(GAPDiv(GAPMul(a,GAPMul(z4,z3)+GAPMul(z4,z1)-GAPMul(z2,z4)+GAPMul(2,z5)),z4),z5**2)-GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(a**2,x1),x2),y1),y2),y3),z4**2),z5**4),x1+x2)-GAPDiv(GAPDiv(GAPMul(r,x1),z4),z5**3),GAPMul(x1+x2,GAPDiv(GAPMul(z1-z2,z5-z4),z5)+GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(a,x1),y1),y2),y3),x2),z5**3),z4))-GAPDiv(GAPMul(x1,x2),z5**2),GAPDiv(GAPDiv(GAPDiv(GAPMul(-GAPMul(y1,y3)+GAPMul(y2,y3),r),y1),y2),y3)+GAPMul(z1,x1+x2)],[0,z2,GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPMul(GAPDiv(GAPDiv(GAPMul(y1,y3)+GAPMul(y2,y3),x2),x1),r**5),y1),y2),y3),a)-GAPDiv(GAPMul(z5,z2),a)+GAPMul(r,GAPDiv(GAPMul(x1,x2),a)+GAPDiv(GAPDiv(z3-z2,z5),z4)),GAPDiv(GAPMul(-z2,z5),a)-GAPMul(r**2,GAPDiv(GAPMul(z4,x1),a)-GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(1,y1),y2),y3),z4),z5))+GAPDiv(GAPDiv(GAPDiv(GAPMul(r,GAPMul(x1,x2)+GAPMul(a,z3)-GAPMul(a,z2)),a),z5),z4)-GAPDiv(GAPMul(x1,x2),r**2),GAPDiv(GAPDiv(GAPDiv(GAPMul(-GAPMul(y1,y3)+GAPMul(y2,y3),r),y1),y2),y3)+GAPMul(z2,x1+x2)-GAPDiv(GAPDiv(GAPDiv(GAPMul(x1,x2),r**3),z4),z5),GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(1,x1),x2),y1),y2),y3),a),z1),z4)],[0,0,z3,GAPMul(z3,x1+x2)-GAPDiv(GAPDiv(GAPDiv(GAPMul(x1,x2),r**3),z4),z5),GAPDiv(GAPMul(-x1,x2),r**4),GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(GAPDiv(z5,z1),r),x2),x1),y1),y2),y3),a)],[0,0,0,z5,GAPMul(GAPDiv(GAPMul(z4-z5,z4),r),z5),GAPMul(GAPDiv(GAPDiv(-z5**2,r**4),a),z4)],[0,0,0,0,z4,GAPMul(GAPDiv(GAPDiv(-1,a),r**3),z5)],[0,0,0,0,0,z5]]])

ChevieData["G4_22"]["Rep"]={"1":p4_2237,
    "2":p4_2238,
    "3":p4_2239,
    "4":p4_2240,
    "5":p4_2241,
    "6":p4_2242}

def p4_2243(ST,para,root,i):
    X=ChevieData["G4_22"]["GetParams"](ST,para)
    Z=X[3-1]
    Y=X[2-1]
    X=X[1-1]
    def rep(char):
        dim=char[1-1]
        r=ChevieData["G4_22"]["Rep"][dim]
        if dim==1 :
            return r(X[char[2-1]-1],Y[char[3-1]-1],Z[char[4-1]-1])
        else:
            if dim==2 :
                if ST in range(4,7+1) :
                    Z=Drop(Z,char[4-1])
                    if ST==4 :
                        return [[[0,-Z[2-1]],[Z[1-1],0]],[[0,0],[0,0]],[[Z[2-1],Z[2-1]],[0,Z[1-1]]]]
                    else:
                        return r(X,Drop(Y,char[3-1]),Z,char[2-1])
                else:
                    return r(X,Drop(Y,char[3-1]),[Z[k-1] for k in Combinations(range(1,len(Z)+1),2)[char[4-1]-1]],char[2-1])
            else:
                if dim==3 :
                    X=[X[k-1] for k in [char[3-1],3-char[3-1]]]
                    if ST==4 :
                        return [[[0,0,1],[0,-1,0],[1,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[Z[1-1],-1,Z[2-1]],[0,Z[2-1],-GAPMul(Z[3-1],Z[1-1])+Z[2-1]**2],[0,0,Z[3-1]]]]
                    else:
                        if ST==6 :
                            return [[[X[2-1],0,0],[GAPMul(-X[2-1],Z[3-1])-GAPMul(X[1-1],Z[1-1])-GAPMul(X[1-1],Z[2-1]),X[1-1],0],[GAPMul(X[2-1],Z[3-1])-GAPMul(X[1-1],Z[2-1]**2),0,X[1-1]]],[[0,0,0],[0,0,0],[0,0,0]],[[Z[3-1],1,0],[0,Z[1-1],1],[0,0,Z[2-1]]]]
                        else:
                            if ST in [5,7] :
                                return r(X,Y,Z,char[2-1])
                            else:
                                if ST in range(8,15+1) :
                                    return r(X,Y,Drop(Z,char[4-1]),char[2-1])
                                else:
                                    return r(X,Y,[Z[k-1] for k in Combinations(range(1,5+1),3)[char[4-1]-1]],char[2-1])
                else:
                    if dim==4 :
                        Y=Concatenation(Drop(Y,char[3-1]),[Y[char[3-1]-1]])
                        if ST in range(8,15+1) :
                            return r(X,Y,Z,char[2-1])
                        else:
                            return r(X,Y,Drop(Z,char[4-1]),char[2-1])
                    else:
                        if dim==5 :
                            return r([X[k-1] for k in [char[3-1],3-char[3-1]]],Concatenation([Y[char[4-1]-1]],Drop(Y,char[4-1])),Z,char[2-1])
                        else:
                            if dim==6 :
                                return r(X,Y,Concatenation(Drop(Z,char[3-1]),[Z[char[3-1]-1]]),char[2-1])
    
    
    ci=G4_22FetchIndexChars(ST,para)[i-1]
    m=rep(ChevieData["G4_22"]["paramchars"](ST)[ci-1])+GAPMul(0,prod(para))
    return map(lambda x: ApplyWord(x,m),ChevieData["G4_22"]["Embed"](ST))

ChevieData["G4_22"]["HeckeRepresentation"]=p4_2243

def p4_2244(ST,i):
    para=ChevieData["G4_22"]["EigenvaluesGeneratingReflections"](ST)
    para=map(lambda x: map(lambda j: ER(GAPDiv(1,x))**j,range(0,GAPDiv(1,x)-1+1)),para)
    return ChevieData["G4_22"]["HeckeRepresentation"](ST,para,[],i)

ChevieData["G4_22"]["Representation"]=p4_2244

ChevieData["families"]["G14"]={"fourierMat":GAPMul(GAPDiv(ER(-3),24),[[4,-4,4,-4,-4,-4,-4,-4,0,0,-4,-4,4,4,0,0,0,0],[-4,4,4,-4,4,4,4,4,0,0,-4,-4,4,4,0,0,0,0],[4,4,4,4,-4,-4,4,4,0,0,-4,-4,-4,-4,0,0,0,0],[-4,-4,4,4,4,4,-4,-4,0,0,-4,-4,-4,-4,0,0,0,0],[-4,4,-4,4,GAPMul(4,ER(3)**2),GAPMul(4,ER(3)),GAPMul(4,ER(3)**2),GAPMul(4,ER(3)),0,0,-2,-2,2,2,GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(-3))],[-4,4,-4,4,GAPMul(4,ER(3)),GAPMul(4,ER(3)**2),GAPMul(4,ER(3)),GAPMul(4,ER(3)**2),0,0,-2,-2,2,2,GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(-3))],[-4,4,4,-4,GAPMul(4,ER(3)**2),GAPMul(4,ER(3)),GAPMul(4,ER(3)**2),GAPMul(4,ER(3)),0,0,2,2,-2,-2,GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(-3))],[-4,4,4,-4,GAPMul(4,ER(3)),GAPMul(4,ER(3)**2),GAPMul(4,ER(3)),GAPMul(4,ER(3)**2),0,0,2,2,-2,-2,GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(-3))],[0,0,0,0,0,0,0,0,0,0,GAPMul(2,ER(6)),GAPMul(-2,ER(6)),GAPMul(-2,ER(6)),GAPMul(2,ER(6)),GAPMul(2,ER(6)),GAPMul(-2,ER(6)),GAPMul(-2,ER(6)),GAPMul(2,ER(6))],[0,0,0,0,0,0,0,0,0,0,GAPMul(2,ER(6)),GAPMul(-2,ER(6)),GAPMul(-2,ER(6)),GAPMul(2,ER(6)),GAPMul(-2,ER(6)),GAPMul(2,ER(6)),GAPMul(2,ER(6)),GAPMul(-2,ER(6))],[-4,-4,-4,-4,-2,-2,2,2,GAPMul(2,ER(6)),GAPMul(2,ER(6)),-2+ER(6),-2-ER(6),-2+ER(6),-2-ER(6),ER(6),ER(6),ER(6),ER(6)],[-4,-4,-4,-4,-2,-2,2,2,GAPMul(-2,ER(6)),GAPMul(-2,ER(6)),-2-ER(6),-2+ER(6),-2-ER(6),-2+ER(6),-ER(6),-ER(6),-ER(6),-ER(6)],[4,4,-4,-4,2,2,-2,-2,GAPMul(-2,ER(6)),GAPMul(-2,ER(6)),-2+ER(6),-2-ER(6),-2+ER(6),-2-ER(6),ER(6),ER(6),ER(6),ER(6)],[4,4,-4,-4,2,2,-2,-2,GAPMul(2,ER(6)),GAPMul(2,ER(6)),-2-ER(6),-2+ER(6),-2-ER(6),-2+ER(6),-ER(6),-ER(6),-ER(6),-ER(6)],[0,0,0,0,GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(2,ER(6)),GAPMul(-2,ER(6)),ER(6),-ER(6),ER(6),-ER(6),GAPMul(2+ER(-2),ER(-3)),GAPMul(2+ER(-2),ER(-3)),GAPMul(-2+ER(-2),ER(-3)),GAPMul(-2+ER(-2),ER(-3))],[0,0,0,0,GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(-2,ER(6)),GAPMul(2,ER(6)),ER(6),-ER(6),ER(6),-ER(6),GAPMul(2+ER(-2),ER(-3)),GAPMul(2+ER(-2),ER(-3)),GAPMul(-2+ER(-2),ER(-3)),GAPMul(-2+ER(-2),ER(-3))],[0,0,0,0,GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(6)),GAPMul(2,ER(6)),ER(6),-ER(6),ER(6),-ER(6),GAPMul(-2+ER(-2),ER(-3)),GAPMul(-2+ER(-2),ER(-3)),GAPMul(2+ER(-2),ER(-3)),GAPMul(2+ER(-2),ER(-3))],[0,0,0,0,GAPMul(-2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(2,ER(-3)),GAPMul(-2,ER(-3)),GAPMul(2,ER(6)),GAPMul(-2,ER(6)),ER(6),-ER(6),ER(6),-ER(6),GAPMul(-2+ER(-2),ER(-3)),GAPMul(-2+ER(-2),ER(-3)),GAPMul(2+ER(-2),ER(-3)),GAPMul(2+ER(-2),ER(-3))]]),
    "eigenvalues":[ER(3)**2,ER(3)**2,ER(3)**2,-ER(3)**2,1,1,1,1,ER(8),ER(8)**3,1,1,-1,-1,ER(4),-ER(4),-ER(4),ER(4)],
    "charLabels":map(str,range(1,18+1)),
    "special":12,
    "cospecial":12,
    "name":"X_{18}",
    "explanation":"mysteryG14"}

def p4_2245(ST):
    I=ER(4)
    J=ER(3)
    r3=GAPMul(-I,ER(-3))
    if ST==4 :
        return {"harishChandra":[{"relativeType":{"series":"ST",
            "indices":range(1,2+1),
            "rank":2,
            "ST":4},
            "levi":[],
            "parameterExponents":[1,1],
            "charNumbers":range(1,7+1),
            "eigenvalue":1,
            "cuspidalName":""},{"relativeType":{"series":"A",
            "indices":[2],
            "rank":1},
            "levi":[1],
            "parameterExponents":[3],
            "charNumbers":[9,8],
            "eigenvalue":ER(3)**2,
            "cuspidalName":ImprimitiveCuspidalName([[],[0,1],[0,1]])},{"relativeType":{"series":"A",
            "indices":[],
            "rank":0},
            "levi":range(1,2+1),
            "parameterExponents":[],
            "charNumbers":[10],
            "eigenvalue":-1,
            "cuspidalName":"G_4"}],
            "families":[Family("C1",[1]),Family(ChevieData["families"]["X"](3),[6,5,8],{"signs":[1,1,-1]}),Family("C1",[7]),Family("X5",[2,4,10,9,3],{"signs":[1,1,-1,-1,1]})],
            "a":[0,4,4,4,1,1,2,1,4,4],
            "A":[0,8,8,8,5,5,6,5,8,8]}
    else:
        if ST==6 :
            return {"harishChandra":[{"relativeType":{"series":"ST",
                "indices":range(1,2+1),
                "rank":2,
                "ST":6},
                "levi":[],
                "parameterExponents":[1,1],
                "charNumbers":[1,2,3,4,5,6,12,10,8,11,7,9,13,14],
                "eigenvalue":1,
                "cuspidalName":""},{"relativeType":{"series":"ST",
                "indices":[1],
                "rank":1,
                "p":4,
                "q":1},
                "levi":[2],
                "parameterExponents":[[3,3,0,3]],
                "charNumbers":[15,17,31,16],
                "eigenvalue":ER(3)**2,
                "cuspidalName":ImprimitiveCuspidalName([[],[0,1],[0,1]])},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[18],
                "eigenvalue":-ER(3)**2,
                "cuspidalName":"G_6[-\\zeta_3^2]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[19],
                "eigenvalue":-ER(3)**2,
                "cuspidalName":"G_6^2[-\\zeta_3^2]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[20],
                "eigenvalue":-1,
                "cuspidalName":"G_6[-1]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[21],
                "eigenvalue":-1,
                "cuspidalName":"G_6^2[-1]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[22],
                "eigenvalue":-1,
                "cuspidalName":"G_6^3[-1]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[23],
                "eigenvalue":-1,
                "cuspidalName":"G_6^4[-1]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[24],
                "eigenvalue":I,
                "cuspidalName":"G_6[i]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[25],
                "eigenvalue":I,
                "cuspidalName":"G_6^2[i]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[26],
                "eigenvalue":-I,
                "cuspidalName":"G_6[-i]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[27],
                "eigenvalue":-I,
                "cuspidalName":"G_6^2[-i]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[28],
                "eigenvalue":ER(12)**5,
                "cuspidalName":"G_6[\\zeta_{12}^5]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[29],
                "eigenvalue":ER(8)**3,
                "qEigen":GAPDiv(1,2),
                "cuspidalName":"G_6[\\zeta_8^3]"},{"relativeType":{"series":"A",
                "indices":[],
                "rank":0},
                "levi":range(1,2+1),
                "parameterExponents":[],
                "charNumbers":[30],
                "eigenvalue":ER(8)**7,
                "qEigen":GAPDiv(1,2),
                "cuspidalName":"G_6[\\zeta_8^7]"},None],
                "families":[Family("C1",[1]),Family(ComplexConjugate(SubFamilyij(ChevieData["families"]["X"](12),1,3,GAPDiv(3+ER(-3),2))),[7,13,8,2,27,21,24,18,15,19,10,25,22,3,9,17,28,20,4,26,16,23],{"signs":[1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,-1,1,-1,-1,-1,1],
                "cospecial":11}),Family("C1",[14]),Family("Z4",[29,12,30,11],{"signs":[-1,1,1,-1]}),Family(ChevieData["families"]["X"](3),[5,6,31],{"signs":[1,1,-1]})],
                "a":[0,1,1,1,10,10,1,1,1,1,5,5,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,10],
                "A":[0,11,11,11,14,14,11,11,11,11,13,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,14]}
        else:
            if ST==8 :
                return {"harishChandra":[{"relativeType":{"series":"ST",
                    "indices":range(1,2+1),
                    "rank":2,
                    "ST":8},
                    "levi":[],
                    "parameterExponents":[1,1],
                    "charNumbers":[1,2,3,4,5,6,7,8,9,10,14,13,12,11,16,15],
                    "eigenvalue":1,
                    "cuspidalName":""},{"relativeType":{"series":"ST",
                    "indices":[2],
                    "rank":1,
                    "p":4,
                    "q":1},
                    "levi":[1],
                    "parameterExponents":[[3,0,0,2]],
                    "charNumbers":[17,27,25,22],
                    "eigenvalue":-1,
                    "cuspidalName":ImprimitiveCuspidalName([[0],[0,1],[0,1],[]])},{"relativeType":{"series":"ST",
                    "indices":[2],
                    "rank":1,
                    "p":4,
                    "q":1},
                    "levi":[1],
                    "parameterExponents":[[3,0,2,0]],
                    "charNumbers":[18,29,21,30],
                    "eigenvalue":-I,
                    "cuspidalName":ImprimitiveCuspidalName([[],[0,1],[0],[0,1]])},{"relativeType":{"series":"ST",
                    "indices":[2],
                    "rank":1,
                    "p":4,
                    "q":1},
                    "levi":[1],
                    "parameterExponents":[[3,2,0,0]],
                    "charNumbers":[19,20,26,28],
                    "eigenvalue":-1,
                    "cuspidalName":ImprimitiveCuspidalName([[0],[],[0,1],[0,1]])},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[23],
                    "eigenvalue":ER(8)**3,
                    "qEigen":GAPDiv(1,2),
                    "cuspidalName":"G_8[\\zeta_8^3]"},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[24],
                    "eigenvalue":ER(8)**7,
                    "qEigen":GAPDiv(1,2),
                    "cuspidalName":"G_8[\\zeta_8^7]"},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[31],
                    "eigenvalue":1,
                    "cuspidalName":"G_8[1]"},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[32],
                    "eigenvalue":I,
                    "cuspidalName":"G_8[i]"},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[33],
                    "eigenvalue":I,
                    "cuspidalName":"G_8^2[i]"},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[34],
                    "eigenvalue":J,
                    "cuspidalName":"G_8[\\zeta_3]"},{"relativeType":{"series":"A",
                    "indices":[],
                    "rank":0},
                    "levi":range(1,2+1),
                    "parameterExponents":[],
                    "charNumbers":[35],
                    "eigenvalue":J**2,
                    "cuspidalName":"G_8[\\zeta_3^2]"}],
                    "families":[Family("C1",[1]),Family(ChevieData["families"]["X"](4),[5,6,7,17,18,19],{"signs":[1,1,1,-1,-1,-1]}),Family(ChevieData["families"]["X"](4),[11,12,13,20,21,22],{"signs":[1,1,1,-1,-1,-1]}),Family("Z4",[23,15,24,16],{"signs":[-1,1,1,-1]}),Family({"fourierMat":GAPDiv([[-1,-1,3,GAPMul(-3,I),GAPMul(3,I),1,3,GAPMul(-3,I),GAPMul(-3,I),-3,3,GAPMul(3,I),GAPMul(3,I),1,GAPMul(-3,I),GAPMul(-3,I),4,4],[-1,-1,3,GAPMul(3,I),GAPMul(-3,I),1,3,GAPMul(3,I),GAPMul(3,I),-3,3,GAPMul(-3,I),GAPMul(-3,I),1,GAPMul(3,I),GAPMul(3,I),4,4],[3,3,3,-3,-3,3,3,3,-3,3,-3,-3,3,3,-3,3,0,0],[GAPMul(-3,I),GAPMul(3,I),-3,3,3,3,3,3,-3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(3,I),GAPMul(3,I),-3,GAPMul(3,I),GAPMul(3,I),0,0],[GAPMul(3,I),GAPMul(-3,I),-3,3,3,3,3,3,-3,GAPMul(3,I),GAPMul(3,I),GAPMul(-3,I),GAPMul(-3,I),-3,GAPMul(-3,I),GAPMul(-3,I),0,0],[1,1,3,3,3,-1,3,-3,3,-3,3,-3,3,-1,-3,3,-4,-4],[3,3,3,3,3,3,3,-3,3,3,-3,3,-3,3,3,-3,0,0],[GAPMul(-3,I),GAPMul(3,I),3,3,3,-3,-3,3,-3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),3,GAPMul(-3,I),GAPMul(-3,I),0,0],[GAPMul(-3,I),GAPMul(3,I),-3,-3,-3,3,3,-3,3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),-3,GAPMul(-3,I),GAPMul(-3,I),0,0],[-3,-3,3,GAPMul(-3,I),GAPMul(3,I),-3,3,GAPMul(-3,I),GAPMul(-3,I),3,-3,GAPMul(-3,I),GAPMul(-3,I),-3,GAPMul(3,I),GAPMul(3,I),0,0],[3,3,-3,GAPMul(-3,I),GAPMul(3,I),3,-3,GAPMul(-3,I),GAPMul(-3,I),-3,3,GAPMul(-3,I),GAPMul(-3,I),3,GAPMul(3,I),GAPMul(3,I),0,0],[GAPMul(3,I),GAPMul(-3,I),-3,GAPMul(3,I),GAPMul(-3,I),-3,3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),-3,3,3,3,-3,0,0],[GAPMul(3,I),GAPMul(-3,I),3,GAPMul(3,I),GAPMul(-3,I),3,-3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),GAPMul(-3,I),3,-3,-3,-3,3,0,0],[1,1,3,-3,-3,-1,3,3,-3,-3,3,3,-3,-1,3,-3,-4,-4],[GAPMul(-3,I),GAPMul(3,I),-3,GAPMul(3,I),GAPMul(-3,I),-3,3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(3,I),GAPMul(3,I),3,-3,3,-3,3,0,0],[GAPMul(-3,I),GAPMul(3,I),3,GAPMul(3,I),GAPMul(-3,I),3,-3,GAPMul(-3,I),GAPMul(-3,I),GAPMul(3,I),GAPMul(3,I),-3,3,-3,3,-3,0,0],[4,4,0,0,0,-4,0,0,0,0,0,0,0,-4,0,0,-4,8],[4,4,0,0,0,-4,0,0,0,0,0,0,0,-4,0,0,8,-4]],12),
                    "eigenvalues":[1,1,1,1,1,1,1,-1,-1,-1,-1,-I,-I,1,I,I,J,J**2],
                    "name":"?18",
                    "explanation":"mystery G8",
                    "special":1,
                    "cospecial":2},[2,4,3,8,10,9,14,25,26,27,28,29,30,31,32,33,34,35],{"signs":[1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,-1,1,-1,-1]})],
                    "a":[0,6,6,6,1,1,1,6,6,6,2,2,2,6,3,3,1,1,1,2,2,2,3,3,6,6,6,6,6,6,6,6,6,6,6],
                    "A":[0,18,18,18,11,11,11,18,18,18,14,14,14,18,15,15,11,11,11,14,14,14,15,15,18,18,18,18,18,18,18,18,18,18,18]}
            else:
                if ST==14 :
                    def cuspidal(arg):
                        n="G_{14}"
                        if len(arg)>2 and IsInt(arg[3-1]) :
                            PrintToString(n,"^",arg[3-1])
                        PrintToString(n,"[",FormatTeX(arg[2-1]),"]")
                        res={"relativeType":{"series":"A",
                            "indices":[],
                            "rank":0},
                            "levi":range(1,6+1),
                            "parameterExponents":[],
                            "charNumbers":[arg[1-1]],
                            "eigenvalue":arg[2-1],
                            "cuspidalName":n}
                        if len(arg)>2 and not IsInt(arg[len(arg)-1]) :
                            res["qEigen"]=arg[len(arg)-1]
                        return res
                    
                    
                    return {"harishChandra":[{"relativeType":{"series":"ST",
                        "indices":range(1,2+1),
                        "rank":2,
                        "ST":14},
                        "levi":[],
                        "parameterExponents":[1,1],
                        "charNumbers":[1,2,3,4,5,6,8,7,9,12,11,10,15,14,13,16,20,18,21,17,19,22,23,24],
                        "eigenvalue":1,
                        "cuspidalName":""},{"relativeType":{"series":"ST",
                        "indices":[1],
                        "rank":1,
                        "p":6,
                        "q":1},
                        "levi":[2],
                        "parameterExponents":[[3,4,4,0,4,4]],
                        "charNumbers":[66,26,27,79,28,25],
                        "eigenvalue":J**2,
                        "cuspidalName":ImprimitiveCuspidalName([[],[0,1],[0,1]])},cuspidal(34,1),cuspidal(35,1,2),cuspidal(29,-1),cuspidal(30,-1,2),cuspidal(31,-1,3),cuspidal(32,-1,4),cuspidal(33,-1,5),cuspidal(73,-1,6),cuspidal(74,-1,7),cuspidal(40,J),cuspidal(41,J,2),cuspidal(42,J,3),cuspidal(43,J,4),cuspidal(50,J,5),cuspidal(51,J,6),cuspidal(36,J**2),cuspidal(37,J**2,2),cuspidal(52,-J),cuspidal(53,-J,2),cuspidal(38,-J**2),cuspidal(39,-J**2,2),cuspidal(54,-I),cuspidal(55,-I,2),cuspidal(56,I,3),cuspidal(57,I,4),cuspidal(58,I),cuspidal(59,I,2),cuspidal(60,-I,3),cuspidal(61,-I,4),cuspidal(46,ER(8)),cuspidal(47,ER(8)**3,2),cuspidal(48,ER(8)**3),cuspidal(49,ER(8),2),cuspidal(69,ER(9)**5,GAPDiv(1,3)),cuspidal(70,ER(9)**5,2,GAPDiv(2,3)),cuspidal(71,ER(9)**8,GAPDiv(1,3)),cuspidal(72,ER(9)**8,2,GAPDiv(2,3)),cuspidal(67,ER(9)**2,GAPDiv(1,3)),cuspidal(68,ER(9)**2,2,GAPDiv(2,3)),cuspidal(62,ER(12)),cuspidal(63,ER(12)**7,2),cuspidal(64,ER(12)**7),cuspidal(65,ER(12),2),cuspidal(75,ER(16)**5,GAPDiv(1,2)),cuspidal(77,ER(16)**13,GAPDiv(1,2)),cuspidal(78,ER(16)**15,GAPDiv(1,2)),cuspidal(76,ER(16)**7,GAPDiv(1,2)),cuspidal(44,ER(24)**11),cuspidal(45,ER(24)**17)],
                        "families":[Family("C1",[1]),Family(GAPMul(ComplexConjugate(ChevieData["families"]["X"](3)),Family("G14")),[26,37,28,39,14,3,34,18,46,48,15,13,30,29,59,60,55,56,25,36,27,38,2,11,16,35,49,47,12,10,32,31,58,61,54,57,4,17,22,33,41,40,43,42,44,45,51,50,53,52,64,65,62,63],{"signs":[-1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],
                        "comment":"everything to explain"}),Family(ChevieData["families"]["X"](3),[23,24,66],{"signs":[1,1,-1]}),Family("Z9",[19,70,67,20,72,71,21,68,69],{"cospecial":4}),Family({"fourierMat":OnMatrices(GAPDiv([[1,1,2,1,1,-ER(-2),-ER(-2),-ER(-2),-ER(-2)],[1,1,2,1,1,ER(-2),ER(-2),ER(-2),ER(-2)],[2,2,0,-2,-2,0,0,0,0],[1,1,-2,1,1,-ER(-2),ER(-2),-ER(-2),ER(-2)],[1,1,-2,1,1,ER(-2),-ER(-2),ER(-2),-ER(-2)],[-ER(-2),ER(-2),0,-ER(-2),ER(-2),0,GAPMul(-2,ER(4)),0,GAPMul(2,ER(4))],[-ER(-2),ER(-2),0,ER(-2),-ER(-2),GAPMul(-2,ER(4)),0,GAPMul(2,ER(4)),0],[-ER(-2),ER(-2),0,-ER(-2),ER(-2),0,GAPMul(2,ER(4)),0,GAPMul(-2,ER(4))],[-ER(-2),ER(-2),0,ER(-2),-ER(-2),GAPMul(2,ER(4)),0,GAPMul(-2,ER(4)),0]],4),Permutation("(4,5)")),
                        "comment":"everything to explain",
                        "eigenvalues":[1,1,1,-1,-1,ER(16)**5,ER(16)**7,-ER(16)**5,-ER(16)**7],
                        "qEigen":[0,0,0,0,0,GAPDiv(1,2),GAPDiv(1,2),GAPDiv(1,2),GAPDiv(1,2)],
                        "special":2},[8,9,7,73,74,75,76,77,78]),Family(ChevieData["families"]["X"](3),[5,6,79],{"signs":[1,1,-1]})],
                        "a":[0,1,1,1,20,20,9,9,9,1,1,1,1,1,1,1,1,1,6,6,6,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,6,6,6,6,6,6,9,9,9,9,9,9,20],
                        "A":[0,23,23,23,28,28,27,27,27,23,23,23,23,23,23,23,23,23,26,26,26,23,25,25,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,25,26,26,26,26,26,26,27,27,27,27,27,27,28]}
                else:
                    return false

ChevieData["G4_22"]["UnipotentCharacters"]=p4_2245

def p4_2246(ST):
    d={"4":[p4_2247,p4_2248],
        "5":[p4_2249,p4_2250],
        "6":[p4_2251,p4_2252],
        "7":[p4_2253,p4_2254],
        "8":[p4_2255,p4_2256],
        "9":[p4_2257,p4_2258],
        "10":[p4_2259,p4_2260],
        "11":[p4_2261,p4_2262],
        "12":[p4_2263,p4_2264],
        "13":[p4_2265,p4_2266],
        "14":[p4_2267,p4_2268],
        "15":[p4_2269,p4_2270],
        "16":[p4_2271,p4_2272],
        "17":[p4_2273,p4_2274],
        "18":[p4_2275,p4_2276],
        "19":[p4_2277,p4_2278],
        "20":[p4_2279,p4_2280],
        "21":[p4_2281,p4_2282],
        "22":[p4_2283,p4_2284]}
    return d[ST]

def p4_2247(x1,x2):
    return x1**4-GAPMul(8,x1)

def p4_2248(x1,x2):
    return x1**6+GAPMul(20,x1**3)-GAPMul(8,x2**6)

def p4_2249(x1,x2):
    return x1**6+GAPMul(20,x1**3)-GAPMul(8,x2**6)

def p4_2250(x1,x2):
    return GAPMul(3,x1**3)+GAPMul(3,x1**6)

def p4_2251(x1,x2):
    return GAPMul(8,x1)+x1**4

def p4_2252(x1,x2):
    return GAPMul(-3,x1**3)+GAPMul(3,x1**6)-GAPMul(x1**9,x2**3)+x2**12

def p4_2253(x1,x2):
    return GAPMul(x1**10,x2**2)-GAPMul(2,x1**6)+GAPMul(x1**2,x2**10)

def p4_2254(x1,x2):
    return x1**12-GAPMul(33,x1**8)-GAPMul(33,x1**4)+x2**12

def p4_2255(x1,x2):
    return GAPMul(14,x1**4)+x1**8

def p4_2256(x1,x2):
    return GAPMul(-33,x1**4)-GAPMul(33,x1**8)+x1**12

def p4_2257(x1,x2):
    return GAPMul(56,x1**4)+GAPMul(16,x1**8)

def p4_2258(x1,x2):
    return GAPMul(x1**4,x2**20)-GAPMul(16,x1**8)+GAPMul(96,x1**12)-GAPMul(256,x1**16)+GAPMul(256,x1**20)

def p4_2259(x1,x2):
    return x1**12-GAPMul(88,x1**9)-GAPMul(704,x1**3)-GAPMul(64,x2**12)

def p4_2260(x1,x2):
    return GAPMul(-512,x1**3)-GAPMul(1344,x1**6)-GAPMul(984,x1**9)-GAPMul(7,x1**12)+GAPMul(123,x1**15)-GAPMul(21,x1**18)+GAPMul(x1**21,x2**3)

def p4_2261(x1,x2):
    return x1**24+GAPMul(4048,x1**18)-GAPMul(161920,x1**9)+GAPMul(259072,x1**6)

def p4_2262(x1,x2):
    return GAPMul(x1**21,x2**3)-GAPMul(21,x1**18)+GAPMul(123,x1**15)-GAPMul(7,x1**12)-GAPMul(984,x1**9)-GAPMul(1344,x1**6)-GAPMul(512,x1**3)

def p4_2263(x1,x2):
    return x1**6+GAPMul(10,x1**4)-GAPMul(20,x1**2)-GAPMul(8,x2**6)

def p4_2264(x1,x2):
    return GAPMul(3,x1**8)-GAPMul(56,x1**6)-GAPMul(56,x1**4)-GAPMul(224,x1**2)+GAPMul(48,x2**8)

def p4_2265(x1,x2):
    return GAPMul(14,x1**4)+x1**8

def p4_2266(x1,x2):
    return GAPMul(x1**2,x2**10)-GAPMul(2,x1**6)+GAPMul(x1**10,x2**2)

def p4_2267(x1,x2):
    return GAPMul(-5,x1**2)-GAPMul(5,x1**4)+x1**6

def p4_2268(x1,x2):
    return GAPMul(81,x1**2)+GAPMul(198,x1**4)-GAPMul(9116,x1**12)+GAPMul(2706,x1**14)

def p4_2269(x1,x2):
    return x1**12+GAPMul(40,x1**9)-GAPMul(320,x1**3)+GAPMul(64,x2**12)

def p4_2270(x1,x2):
    return GAPMul(512,x1**3)+GAPMul(1344,x1**6)-GAPMul(123,x1**15)+GAPMul(21,x1**18)-GAPMul(x1**21,x2**3)

def p4_2271(x,y):
    return GAPMul(228,x**5)+GAPMul(494,x**10)-GAPMul(228,x**15)+x**20

def p4_2272(x,y):
    return GAPMul(-522,x**5)-GAPMul(10005,x**10)-GAPMul(10005,x**20)+GAPMul(522,x**25)

def p4_2273(x,y):
    return GAPMul(228,x**5)+GAPMul(494,x**10)-GAPMul(228,x**15)+x**20

def p4_2274(x,y):
    return GAPMul(-6,x**5)+GAPMul(330,x**10)-GAPMul(7230,x**15)+GAPMul(78540,x**20)-GAPMul(417510,x**25)+GAPMul(808566,x**30)

def p4_2275(x,y):
    return GAPMul(-522,x**5)-GAPMul(10005,x**10)-GAPMul(10005,x**20)+GAPMul(522,x**25)

def p4_2276(x,y):
    return GAPMul(6,x**5)-GAPMul(330,x**10)+GAPMul(7230,x**15)-GAPMul(78540,x**20)+GAPMul(417510,x**25)-GAPMul(808566,x**30)-GAPMul(417510,x**35)-GAPMul(78540,x**40)-GAPMul(7230,x**45)-GAPMul(330,x**50)-GAPMul(6,x**55)

def p4_2277(x,y):
    return GAPMul(-x**5,y**55)+GAPMul(55,x**10)-GAPMul(1205,x**15)+GAPMul(13090,x**20)-GAPMul(69585,x**25)+GAPMul(134761,x**30)

def p4_2278(x,y):
    return GAPMul(-180,x**5)+GAPMul(204954,x**10)-GAPMul(70567704,x**35)+GAPMul(88770255,x**40)-GAPMul(11486340,x**45)+GAPMul(204954,x**50)

def p4_2279(x,y):
    return GAPMul(34375,x**3)-GAPMul(4125,x**6)-GAPMul(275,x**9)+x**12

def p4_2280(x,y):
    return GAPMul(-3540039062500,x**3)+GAPMul(955810546875,x**6)-GAPMul(977050781250,x**9)-GAPMul(371279296875,x**12)-GAPMul(2970234375,x**18)+GAPMul(62531250,x**21)

def p4_2281(x,y):
    return GAPMul(34375,x**3)-GAPMul(4125,x**6)-GAPMul(275,x**9)+x**12

def p4_2282(x,y):
    return GAPMul(3814697265625000000000,x**3)-GAPMul(16307830810546875000000,x**6)+GAPMul(20629405975341796875000,x**9)-GAPMul(4732668399810791015625,x**12)-GAPMul(1460203170776367187500,x**15)-GAPMul(2688672065734863281250,x**18)-GAPMul(632378311157226562500,x**21)-GAPMul(210152492523193359375,x**24)-GAPMul(18950356933593750000,x**27)-GAPMul(3147430249023437500,x**30)+GAPMul(151602855468750000,x**33)-GAPMul(13449759521484375,x**36)+GAPMul(323777695312500,x**39)-GAPMul(11012800781250,x**42)+GAPMul(47847937500,x**45)-GAPMul(1240640625,x**48)-GAPMul(43263000,x**51)-GAPMul(273600,x**54)-GAPMul(512,x**57)

def p4_2283(x,y):
    return GAPMul(-x,y**11)+GAPMul(11,x**6)

def p4_2284(x,y):
    return GAPMul(228,x**5)+GAPMul(494,x**10)-GAPMul(228,x**15)+x**20

ChevieData["G4_22"]["Invariants"]=p4_2246

def p4_2285(ST):
    d={"4":p4_2286,
        "5":p4_2287,
        "6":p4_2288,
        "7":p4_2289,
        "8":p4_2290,
        "9":p4_2291,
        "10":p4_2292,
        "11":p4_2293,
        "12":p4_2294,
        "13":p4_2295,
        "14":p4_2296,
        "15":p4_2297,
        "16":p4_2298,
        "17":p4_2299,
        "18":p4_22100,
        "19":p4_22101,
        "20":p4_22102,
        "21":p4_22103,
        "22":p4_22104}
    return d[ST]

def p4_2286(t1,t2):
    return -t2**2+t1**3

def p4_2287(t1,t2):
    return GAPMul(64,t2**2)-GAPMul(t1**2,t2)

def p4_2288(t1,t2):
    return GAPMul(64,t2**2)+GAPMul(t1**3,t2)

def p4_2289(t1,t2):
    return GAPMul(t2**2,t1)+GAPMul(108,t1**3)

def p4_2290(t1,t2):
    return -t2**2+t1**3

def p4_2291(t1,t2):
    return GAPMul(t1**3,t2)-GAPMul(432,t2**2)

def p4_2292(t1,t2):
    return GAPMul(256,t2**2)+GAPMul(t1**2,t2)

def p4_2293(t1,t2):
    return GAPMul(96,t1)-GAPMul(t1**2,t2)+GAPMul(14080,t2**3)

def p4_2294(t1,t2):
    return t2**3-GAPMul(27,t1**4)

def p4_2295(t1,t2):
    return GAPMul(108,t2**3)-GAPMul(t1**3,t2)

def p4_2296(t1,t2):
    return GAPMul(16,t2**2)+GAPMul(27,t1**4)

def p4_2297(t1,t2):
    return GAPMul(256,t1)+GAPMul(t1**3,t2)

def p4_2298(t1,t2):
    return t2**2-t1**3

def p4_2299(t1,t2):
    return GAPMul(288,t2**2)+GAPMul(t1**3,t2)

def p4_22100(t1,t2):
    return GAPMul(288,t2**2)+GAPMul(t1**2,t2)

def p4_22101(t1,t2):
    return GAPMul(t1,t2**2)-GAPMul(746496,t1**3)

def p4_22102(t1,t2):
    return t2**2-GAPMul(64,t1**5)

def p4_22103(t1,t2):
    return GAPMul(625,t2**2)-GAPMul(64,t1**5)

def p4_22104(t1,t2):
    return t2**3+GAPMul(1728,t1**5)

ChevieData["G4_22"]["Discriminant"]=p4_2285

ChevieData["2G5"]["PhiFactors"]=[1,-1]

ChevieData["2G5"]["NrConjugacyClasses"]=9

def p4_22105():
    res={"classtext":[[],[1,2,2,1,2,2,1],[1,2,2,1,2,2,1,1],[1],[1,1,2,1,1],[1,1,2,2,1,1],[1,2],[1,2,1],[2,1,2,1]],
        "classes":[12,6,6,6,12,6,6,6,12],
        "orders":[2,24,24,24,6,8,24,8,6]}
    res["classnames"]=map(IntListToString,res["classtext"])
    return res

ChevieData["2G5"]["ClassInfo"]=p4_22105

def p4_22106():
    res={"charparams":[[1,0],[1,8,2],[1,16],[2,9],[2,5,2],[2,1],[3,2],[3,4],[3,6]],
        "extRefl":[1,6,2],
        "b":[0,8,16,9,5,1,2,4,12],
        "B":[0,8,16,15,11,7,14,4,12]}
    return res

ChevieData["2G5"]["CharInfo"]=p4_22106

def p4_22107():
    res={"identifier":"2G5",
        "size":72,
        "centralizers":[6,12,12,12,6,12,12,12,6],
        "irreducibles":[[1,1,1,1,1,1,1,1,1],-[1,ER(3),ER(3)**2,ER(3),ER(3)**2,1,ER(3)**2,1,ER(3)],[1,ER(3)**2,ER(3),ER(3)**2,ER(3),1,ER(3),1,ER(3)**2],[0,ER(-2),-ER(-2),-ER(-2),0,ER(-2),ER(-2),-ER(-2),0],[0,GAPMul(-ER(-2),ER(3)),GAPMul(ER(-2),ER(3)**2),GAPMul(ER(-2),ER(3)),0,-ER(-2),GAPMul(-ER(-2),ER(3)**2),ER(-2),0],-[0,GAPMul(ER(-2),ER(3)**2),GAPMul(-ER(-2),ER(3)),GAPMul(-ER(-2),ER(3)**2),0,ER(-2),GAPMul(ER(-2),ER(3)),-ER(-2),0],[1,-ER(3),-ER(3)**2,-ER(3),ER(3)**2,-1,-ER(3)**2,-1,ER(3)],[1,-ER(3)**2,-ER(3),-ER(3)**2,ER(3),-1,-ER(3),-1,ER(3)**2],[1,-1,-1,-1,1,-1,-1,-1,1]]}
    return ChevieData["compat"]["MakeCharacterTable"](res)

ChevieData["2G5"]["CharTable"]=p4_22107

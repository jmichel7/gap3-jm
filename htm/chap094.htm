<html><head><title>GAP3 Manual: 94 Parabolic modules for Iwahori-Hecke algebras</title></head>
<body bgcolor="ffffff">
<h1>94 Parabolic modules for Iwahori-Hecke algebras</h1>
<P><P><P>
Let <I>H</I>  be the  Hecke algebra  of the Coxeter  group <I>W</I>  with Coxeter
generating set  <I>S</I>, and let <I>I</I>  be a subset  of <I>S</I>. Let <I>&chi;</I>  be a
one-dimensional  character of  the parabolic  subalgebra <I>H<sub>I</sub></I>  of <I>H</I>.
Then <I>H&otimes;<sub>H<sub>I</sub></sub>&chi;</I>  (the induced  representation of  <I>&chi;</I> from
<I>H<sub>I</sub></I>  to  <I>H</I>)  is  naturally  a  <I>H</I>-module,  with  a  natural  basis
<I>MT<sub>w</sub>=T<sub>w</sub>&otimes; 1</I> indexed  by the reduced-<I>I</I> elements  of <I>W</I> (i.e.,
those elements <I>w</I> such that <I>l(ws)&gt;l(w)</I> for any <I>s&isin; I</I>).
<P>
The module  action of  an generator  <I>T<sub>s</sub></I> of  <I>H</I> which  satisfies the
quadratic  relation  <I>(T<sub>s</sub>-p<sub>s</sub>)(T<sub>s</sub>-q<sub>s</sub>)=0</I>  is  given  in  this  basis
by:  <center><table><tr><td><I>T<sub>s</sub>. MT<sub>w</sub>={</td><td><table style="display:inline-table;"><tr><td><I>
&chi;(T<sub>w<sup>-1</sup>sw</sub>)MT<sub>w</sub>,</I></td><td><I>
</i>if  <I>sw</I> is  not reduced-<I>I</I> (then <I>w<sup>-1</sup>sw&isin;  I</I>).<i></I></td></tr><tr><td><I> 
-p<sub>s</sub> q<sub>s</sub>MT<sub>sw</sub>+(p<sub>s</sub>+q<sub>s</sub>)MT<sub>w</sub>,</I></td><td><I>
</i>if <I>sw&lt;w</I> is reduced-<I>I</I>.<i></I></td></tr><tr><td><I> 
MT<sub>sw</sub>,</I></td><td><I> </i>if <I>sw&gt;w</I> is reduced-<I>I</I>.<i></I></td></tr><tr><td><I> 
</I></td></tr></table style="display:inline-table;"></td><td>.</I></td></tr></table></center>
<P>
Kazhdan-Lusztig bases of  an Hecke module are also defined  in the same
circumstances when Kazhdan-Lusztig bases of the algebra can be defined,
but only the case  of the base <code>C'</code> for <I>&chi;</I>  the sign character has
been implemented for now.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap094.htm#SECT001">Construction of Hecke module elements of the <I>MT</I> basis</a>
<LI> <A HREF="chap094.htm#SECT002">Construction of Hecke module elements of the primed <I>MC</I> basis</a>
<LI> <A HREF="chap094.htm#SECT003">Operations for Hecke module elements</a>
<LI> <A HREF="chap094.htm#SECT004">CreateHeckeModuleBasis</a>
</ol>
<A NAME="SECT001"><h2>94.1 Construction of Hecke module elements of the <I>MT</I> basis</h2></a>
<P><P>
<A name = "I0"></a>

<P>
<code>ModuleBasis( <var>H</var>, "MT"  [, <var>I</var> [,<var>chi</var>]] )</code>
<P>
<var>H</var> should  be an  Iwahori-Hecke algebra  of a  Coxeter group  <var>W</var> with
Coxeter generating set <var>S</var>, <var>I</var> should be a subset of <var>S</var> (specified by
a list of  the names of the  generators in <var>I</var>), and <var>chi</var>  should be a
one-dimensional character of the parabolic subalgebra of <var>H</var> determined
by <var>I</var>, represented by the list of its values on <I>{T<sub>s</sub>}<sub>s&isin; I</sub></I> (if
<var>chi</var>  takes the  same  value on  all  generators of  <I>H<sub>I</sub></I>  it can  be
represented by a single value).
<P>
The result is a function which can be used to make elements of the <code>MT</code>
basis of the Hecke module associated to <var>I</var> and <var>chi</var>.
<P>
If  omitted,  <var>I</var>  is  assumed to  be  the  first  <code>W.semiSimpleRank-1</code>
generators of <I>W</I> (this makes sense for an affine Weyl group where they
generate the corresponding linear Weyl group), and <var>chi</var> is taken to be
equal to <I>-1</I> (which specifies the sign character of <I>H</I>).
<P>
It  is convenient  to assign  this function  with a  shorter name  when
computing with elements of the Hecke  module. In what follows we assume
that we have done the assignment: 
<P>
<pre>    gap> W:=CoxeterGroup("A",2);;Wa:=Affine(W);;
    gap> q:=X(Rationals);;q.name:="q";;
    gap> H:=Hecke(Wa,q);
    Hecke(~A2,q)
    gap> MT:=ModuleBasis(H,"MT");
    function ( arg ) ... end</pre>
<P>
<code>MT( <var>w</var> )</code>
<P>
Here  <var>w</var> is  an element  of the  Coxeter group  <code>Group(H)</code>. The  basis
element  <I>MT<sub>w</sub></I> is  returned if  <I>w</I> is  reduced-<var>I</var>, and  otherwise an
error is signaled.
<P><P>
<code>MT( <var>elts</var>, <var>coeffs</var>)</code>
<P>
In this form, <code>elts</code> is a list of elements of <code>Group(H)</code> and <code>coeffs</code> a
list  of coefficients  which  should be  of the  same  length <code>k</code>.  The
element <code>Sum([1..k],i->coeffs[i]*MT(elts[i]))</code> is returned.
<P>
<code>MT( <var>list</var> )</code>
<P>
<code>MT( <var>s1</var>, .., <var>sn</var> )</code>
<P>
In  the above  two  forms, the  <strong>GAP3</strong>  list <var>list</var>  or  the <strong>GAP3</strong>  list
<code>[<var>s1</var>,..,<var>sn</var>]</code>  represents the  Coxeter word  for an  element <var>w</var>  of
<code>Group(H)</code>. The basis element <I>MT<sub>w</sub></I> is returned if <I>w</I> is reduced-<var>I</var>,
and otherwise an error is signaled.
<P>
The way elements of the Hecke module are printed depends on
<code>CHEVIE.PrintHecke</code>.   If   <code>CHEVIE.PrintHecke=rec(GAP:=true)</code>,   they  are
printed  in a way which  can be input back  in <strong>GAP3</strong>. When you load <strong>CHEVIE</strong>,
the <code>PrintHecke</code> is initially set to <code>rec()</code>.
<P><A NAME="SECT002"><h2>94.2 Construction of Hecke module elements of the primed <I>MC</I> basis</h2></a>
<P><P><P>
<code>ModuleBasis( <var>H</var>, "MC'" [, <var>I</var>] )</code>
<P>
<var>H</var> should be  an Iwahori-Hecke algebra with all parameters  a power of
the same indeterminate  of a Coxeter group <var>W</var>  with Coxeter generating
set <var>S</var> and <var>I</var>  should be a subset of <var>S</var> (specified by  a list of the
names of the  generators in <var>I</var>). The character <var>chi</var>  does not have to
be specified since in this case only <var>chi</var><code>=-1</code> has been implemented.
<P>
If  omitted,  <var>I</var>  is  assumed to  be  the  first  <code>W.semiSimpleRank-1</code>
generators of <I>W</I> (this makes sense for an affine Weyl group where they
generate the corresponding linear Weyl group).
<P>
The result  is a  function which can  be used to  make elements  of the
<code>MC'</code>  basis of  the  Hecke  module associated  to  <var>I</var>  and the  sign
character.  In  this particular  case,  the  <I>MC'</I> basis  can  be
defined for  an reduced-<I>I</I> element <I>w</I>  in terms of the  <I>MT</I> basis by
<I>MC'<sub>w</sub>=C'<sub>w</sub> MT<sub>1</sub></I>.
<P>
<pre>    gap> H:=Hecke(Wa,q^2);
    Hecke(~A2,q^2)
    gap> MC:=ModuleBasis(H,"MC'");
    #warning: MC' basis: q chosen as 2nd root of q\^2
    function ( arg ) ... end</pre>
<P><A NAME="SECT003"><h2>94.3 Operations for Hecke module elements</h2></a>
<P><P><P>
<DL><DT><code>+</code>, <code>-</code>:<DD><BR> one can add or subtract two Hecke module elements.
</DL><P>
<DL><DT><code><var>Basis</var>(<var>x</var>)</code>:<DD><BR> this  call will convert  Hecke module element  <var>x</var> to
basis  <code><var>Basis</var></code>. With  the  same initializations  as  in the  previous
sections, we have:
</DL><P>
<pre>    gap> MT:=ModuleBasis(H,"MT");;
    gap> MC(MT(1,2,3));
    -MC'()+qMC'(3)-q^2MC'(1,3)-q^2MC'(2,3)+q^3MC'(1,2,3)</pre>
<P>
<DL><DT><code>*</code>:<DD><BR>  one  can  multiply  on   the  left  an  Hecke  module  element
by  an  element of  the  corresponding  Hecke  algebra. With  the  same
initializations as in the previous sections, we have:
</DL><P>
<pre>    gap> H:=Hecke(Wa,q);
    Hecke(~A2,q)
    gap> MT:=ModuleBasis(H,"MT");;
    gap> T:=Basis(H,"T");
    function ( arg ) ... end
    gap> T(1)*MT(1,2,3);
    qMT(2,3)+(q-1)MT(1,2,3)</pre>
<P><A NAME="SECT004"><h2>94.4 CreateHeckeModuleBasis</h2></a>
<P><P>
<A name = "I1"></a>

<P>
<code>CreateHeckeModuleBasis(<var>basis</var>, <var>ops</var>, <var>algebraops</var>)</code>
<P>
This function is completely parallel to the function <code>CreateHeckeBasis</code>.
See the description  of this last function. The only  difference is that
it is not <code><var>ops</var>.T</code> which is  required to be bound, but <code><var>ops</var>.MT</code> which
should contain  a function which takes  an element in the  basis <var>basis</var>
and converts it to the <code>MT</code> basis.
<P><a href ="chap093.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap095.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
<html><head><title>GAP3 Manual: 74 AREP</title></head>
<body bgcolor="ffffff">
<h1>74 AREP</h1>
<P><P><P>
The share package \AREP provides an infrastructure and high level
functions to do efficient calculations in constructive representation
theory. By the term ``constructive" we mean that group
representations are constructed and manipulated up to equality -- not
only up to equivalence as it is done by using characters. Hence you
can think of it as working with matrix representations, but in a very
efficient way using the special structure of the matrices occuring in
representation theory of finite groups. The package is named after
its most important class <strong> ARep</strong> (see <a href="chap074.htm#SECT066">AReps</a>) (<strong> A</strong>bstract <strong>
Rep</strong>resentations)
\footnote
A note on the name:  
We have chosen ``abstract" because we manipulate expressions
for representations, not constants. However, ``concrete" 
would also be right because the representations are given with 
respect to a fixed basis of the underlying vector space. The 
name ARep is thus, for historical reasons, somewhat misleading.

implementing this idea.
<P>
A striking application of constructive representation theory is the
decomposition of matrices representing discrete signal transforms into
a product of highly structured sparse matrices (realized in 
<a href="chap074.htm#SECT147">Matrix Decomposition</a>). This decomposition can be viewed as a 
fast algorithm for the signal transform. 
Another application is the construction of
fast Fourier transforms for solvable groups (realized in
<a href="chap074.htm#SECT123">DecompositionMonRep</a>). The package has evolved out of this area of
application into a more general tool.
<P>
The package \AREP consists of the following parts:

<P>&bull; <strong> Monomial Matrices:</strong> A monomial matrix is matrix 
containing exactly one non-zero entry in every row and column. 
Hence storing and computing with monomial matrices can be done 
efficiently. This is realized in the class <strong> Mon</strong>, 
Sections <a href="chap074.htm#SECT002">Mons</a> -- <a href="chap074.htm#SECT021">CharPolyCyclesMon</a>. 
<P>
<P>&bull;<strong> Structured Matrices:</strong> The class <strong> AMat</strong>, 
Sections <a href="chap074.htm#SECT022">AMats</a> -- <a href="chap074.htm#SECT065">UpperBoundLinearComplexityAMat</a>, is created to 
represent and calculate with structured matrices, like e.g. 
<I>2.(A&oplus; B)<sup>C</sup>&otimes; D. E<sup>2</sup></I>, where <I>A, B, C, D, E</I> are 
matrices of compatible size and characteristic. 
<P>
<P>&bull; <strong> Group Representations:</strong> The class <strong> ARep</strong>, 
Sections <a href="chap074.htm#SECT066">AReps</a> -- <a href="chap074.htm#SECT123">DecompositionMonRep</a>, is created to 
represent and manipulate structured representations up to 
equality, like e.g. <I>(&phi;\uparrow<sub>T</sub> G)<sup>M</sup>&otimes;&psi;</I>. 
Special care is taken of monomial representations.
<P>
<P>&bull; <strong> Symmetry of Matrices:</strong> In 
Sections <a href="chap074.htm#SECT124">Symmetry of Matrices</a> -- <a href="chap074.htm#SECT127">PermIrredSymmetry</a> 
functions are provided 
to compute certain kinds of symmetry of a given matrix. 
Symmetry allows to describe structure contained in a matrix.
<P>
<P>&bull; <strong> Discrete Signal Transforms:</strong> 
Sections <a href="chap074.htm#SECT128">Discrete Signal Transforms</a> -- 
<a href="chap074.htm#SECT146">InverseRationalizedHaarTransform</a> describe functions to 
construct many well-known discrete signal transforms.
<P>
<P>&bull; <strong> Matrix Decomposition:</strong> 
Sections <a href="chap074.htm#SECT147">Matrix Decomposition</a> -- 
<a href="chap074.htm#SECT149">MatrixDecompositionByMonMonSymmetry</a> describe functions
to decompose a discrete signal transform into a product 
of highly structured sparse matrices.
<P>
<P>&bull; <strong> Tools for Complex Numbers, Matrices and Permutations:</strong> 
Sections <a href="chap074.htm#SECT151">Complex Numbers</a> -- <a href="chap074.htm#SECT169">TensorProductPerm</a> describe
useful tools for the computation with complex numbers, matrices
and permutations.

<P>
All functions described are written entirely in the 
<strong>GAP3</strong> language. The functions for the computation of
the symmetry of a matrix (see <a href="chap074.htm#SECT124">Symmetry of Matrices</a>) 
may use the external C program <code>desauto</code> written by J. Leon
and contained in the share package \sf GUAVA.
However, the use of this program is optional and will only 
influence the speed and not the executability of the functions.
<P>
The package \AREP was created in the framework of our theses where
the background of constructive representation theory (see
<A href="biblio.htm#Pue98"><cite>Pue98</cite></a>) and searching for symmetry of matrices (see
<A href="biblio.htm#Egn97"><cite>Egn97</cite></a>) can be found.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap074.htm#SECT001">Loading AREP</a>
<LI> <A HREF="chap074.htm#SECT002">Mons</a>
<LI> <A HREF="chap074.htm#SECT003">Comparison of Mons</a>
<LI> <A HREF="chap074.htm#SECT004">Basic Operations for Mons</a>
<LI> <A HREF="chap074.htm#SECT005">Mon</a>
<LI> <A HREF="chap074.htm#SECT006">IsMon</a>
<LI> <A HREF="chap074.htm#SECT007">IsPermMon</a>
<LI> <A HREF="chap074.htm#SECT008">IsDiagMon</a>
<LI> <A HREF="chap074.htm#SECT009">PermMon</a>
<LI> <A HREF="chap074.htm#SECT010">MatMon</a>
<LI> <A HREF="chap074.htm#SECT011">MonMat</a>
<LI> <A HREF="chap074.htm#SECT012">DegreeMon</a>
<LI> <A HREF="chap074.htm#SECT013">CharacteristicMon</a>
<LI> <A HREF="chap074.htm#SECT014">OrderMon</a>
<LI> <A HREF="chap074.htm#SECT015">TransposedMon</a>
<LI> <A HREF="chap074.htm#SECT016">DeterminantMon</a>
<LI> <A HREF="chap074.htm#SECT017">TraceMon</a>
<LI> <A HREF="chap074.htm#SECT018">GaloisMon</a>
<LI> <A HREF="chap074.htm#SECT019">DirectSumMon</a>
<LI> <A HREF="chap074.htm#SECT020">TensorProductMon</a>
<LI> <A HREF="chap074.htm#SECT021">CharPolyCyclesMon</a>
<LI> <A HREF="chap074.htm#SECT022">AMats</a>
<LI> <A HREF="chap074.htm#SECT023">AMatPerm</a>
<LI> <A HREF="chap074.htm#SECT024">AMatMon</a>
<LI> <A HREF="chap074.htm#SECT025">AMatMat</a>
<LI> <A HREF="chap074.htm#SECT026">IsAMat</a>
<LI> <A HREF="chap074.htm#SECT027">IdentityPermAMat</a>
<LI> <A HREF="chap074.htm#SECT028">IdentityMonAMat</a>
<LI> <A HREF="chap074.htm#SECT029">IdentityMatAMat</a>
<LI> <A HREF="chap074.htm#SECT030">IdentityAMat</a>
<LI> <A HREF="chap074.htm#SECT031">AllOneAMat</a>
<LI> <A HREF="chap074.htm#SECT032">NullAMat</a>
<LI> <A HREF="chap074.htm#SECT033">DiagonalAMat</a>
<LI> <A HREF="chap074.htm#SECT034">DFTAMat</a>
<LI> <A HREF="chap074.htm#SECT035">SORAMat</a>
<LI> <A HREF="chap074.htm#SECT036">ScalarMultipleAMat</a>
<LI> <A HREF="chap074.htm#SECT037">Product and Quotient of AMats</a>
<LI> <A HREF="chap074.htm#SECT038">PowerAMat</a>
<LI> <A HREF="chap074.htm#SECT039">ConjugateAMat</a>
<LI> <A HREF="chap074.htm#SECT040">DirectSumAMat</a>
<LI> <A HREF="chap074.htm#SECT041">TensorProductAMat</a>
<LI> <A HREF="chap074.htm#SECT042">GaloisConjugateAMat</a>
<LI> <A HREF="chap074.htm#SECT043">Comparison of AMats</a>
<LI> <A HREF="chap074.htm#SECT044">Converting AMats</a>
<LI> <A HREF="chap074.htm#SECT045">IsIdentityMat</a>
<LI> <A HREF="chap074.htm#SECT046">IsPermMat</a>
<LI> <A HREF="chap074.htm#SECT047">IsMonMat</a>
<LI> <A HREF="chap074.htm#SECT048">PermAMat</a>
<LI> <A HREF="chap074.htm#SECT049">MonAMat</a>
<LI> <A HREF="chap074.htm#SECT050">MatAMat</a>
<LI> <A HREF="chap074.htm#SECT051">PermAMatAMat</a>
<LI> <A HREF="chap074.htm#SECT052">MonAMatAMat</a>
<LI> <A HREF="chap074.htm#SECT053">MatAMatAMat</a>
<LI> <A HREF="chap074.htm#SECT054">Functions for AMats</a>
<LI> <A HREF="chap074.htm#SECT055">InverseAMat</a>
<LI> <A HREF="chap074.htm#SECT056">TransposedAMat</a>
<LI> <A HREF="chap074.htm#SECT057">DeterminantAMat</a>
<LI> <A HREF="chap074.htm#SECT058">TraceAMat</a>
<LI> <A HREF="chap074.htm#SECT059">RankAMat</a>
<LI> <A HREF="chap074.htm#SECT060">SimplifyAMat</a>
<LI> <A HREF="chap074.htm#SECT061">kbsAMat</a>
<LI> <A HREF="chap074.htm#SECT062">kbsDecompositionAMat</a>
<LI> <A HREF="chap074.htm#SECT063">AMatSparseMat</a>
<LI> <A HREF="chap074.htm#SECT064">SubmatrixAMat</a>
<LI> <A HREF="chap074.htm#SECT065">UpperBoundLinearComplexityAMat</a>
<LI> <A HREF="chap074.htm#SECT066">AReps</a>
<LI> <A HREF="chap074.htm#SECT067">GroupWithGenerators</a>
<LI> <A HREF="chap074.htm#SECT068">TrivialPermARep</a>
<LI> <A HREF="chap074.htm#SECT069">TrivialMonARep</a>
<LI> <A HREF="chap074.htm#SECT070">TrivialMatARep</a>
<LI> <A HREF="chap074.htm#SECT071">RegularARep</a>
<LI> <A HREF="chap074.htm#SECT072">NaturalARep</a>
<LI> <A HREF="chap074.htm#SECT073">ARepByImages</a>
<LI> <A HREF="chap074.htm#SECT074">ARepByHom</a>
<LI> <A HREF="chap074.htm#SECT075">ARepByCharacter</a>
<LI> <A HREF="chap074.htm#SECT076">ConjugateARep</a>
<LI> <A HREF="chap074.htm#SECT077">DirectSumARep</a>
<LI> <A HREF="chap074.htm#SECT078">InnerTensorProductARep</a>
<LI> <A HREF="chap074.htm#SECT079">OuterTensorProductARep</a>
<LI> <A HREF="chap074.htm#SECT080">RestrictionARep</a>
<LI> <A HREF="chap074.htm#SECT081">InductionARep</a>
<LI> <A HREF="chap074.htm#SECT082">ExtensionARep</a>
<LI> <A HREF="chap074.htm#SECT083">GaloisConjugateARep</a>
<LI> <A HREF="chap074.htm#SECT084">Basic Functions for AReps</a>
<LI> <A HREF="chap074.htm#SECT085">Comparison of AReps</a>
<LI> <A HREF="chap074.htm#SECT086">ImageARep</a>
<LI> <A HREF="chap074.htm#SECT087">IsEquivalentARep</a>
<LI> <A HREF="chap074.htm#SECT088">CharacterARep</a>
<LI> <A HREF="chap074.htm#SECT089">IsIrreducibleARep</a>
<LI> <A HREF="chap074.htm#SECT090">KernelARep</a>
<LI> <A HREF="chap074.htm#SECT091">IsFaithfulARep</a>
<LI> <A HREF="chap074.htm#SECT092">ARepWithCharacter</a>
<LI> <A HREF="chap074.htm#SECT093">GeneralFourierTransform</a>
<LI> <A HREF="chap074.htm#SECT094">Converting AReps</a>
<LI> <A HREF="chap074.htm#SECT095">IsPermRep</a>
<LI> <A HREF="chap074.htm#SECT096">IsMonRep</a>
<LI> <A HREF="chap074.htm#SECT097">PermARepARep</a>
<LI> <A HREF="chap074.htm#SECT098">MonARepARep</a>
<LI> <A HREF="chap074.htm#SECT099">MatARepARep</a>
<LI> <A HREF="chap074.htm#SECT100">Higher Functions for AReps</a>
<LI> <A HREF="chap074.htm#SECT101">IsRestrictedCharacter</a>
<LI> <A HREF="chap074.htm#SECT102">AllExtendingCharacters</a>
<LI> <A HREF="chap074.htm#SECT103">OneExtendingCharacter</a>
<LI> <A HREF="chap074.htm#SECT104">IntertwiningSpaceARep</a>
<LI> <A HREF="chap074.htm#SECT105">IntertwiningNumberARep</a>
<LI> <A HREF="chap074.htm#SECT106">UnderlyingPermRep</a>
<LI> <A HREF="chap074.htm#SECT107">IsTransitiveMonRep</a>
<LI> <A HREF="chap074.htm#SECT108">IsPrimitiveMonRep</a>
<LI> <A HREF="chap074.htm#SECT109">TransitivityDegreeMonRep</a>
<LI> <A HREF="chap074.htm#SECT110">OrbitDecompositionMonRep</a>
<LI> <A HREF="chap074.htm#SECT111">TransitiveToInductionMonRep</a>
<LI> <A HREF="chap074.htm#SECT112">InsertedInductionARep</a>
<LI> <A HREF="chap074.htm#SECT113">ConjugationPermReps</a>
<LI> <A HREF="chap074.htm#SECT114">ConjugationTransitiveMonReps</a>
<LI> <A HREF="chap074.htm#SECT115">TransversalChangeInductionARep</a>
<LI> <A HREF="chap074.htm#SECT116">OuterTensorProductDecompositionMonRep</a>
<LI> <A HREF="chap074.htm#SECT117">InnerConjugationARep</a>
<LI> <A HREF="chap074.htm#SECT118">RestrictionInductionARep</a>
<LI> <A HREF="chap074.htm#SECT119">kbsARep</a>
<LI> <A HREF="chap074.htm#SECT120">RestrictionToSubmoduleARep</a>
<LI> <A HREF="chap074.htm#SECT121">kbsDecompositionARep</a>
<LI> <A HREF="chap074.htm#SECT122">ExtensionOnedimensionalAbelianRep</a>
<LI> <A HREF="chap074.htm#SECT123">DecompositionMonRep</a>
<LI> <A HREF="chap074.htm#SECT124">Symmetry of Matrices</a>
<LI> <A HREF="chap074.htm#SECT125">PermPermSymmetry</a>
<LI> <A HREF="chap074.htm#SECT126">MonMonSymmetry</a>
<LI> <A HREF="chap074.htm#SECT127">PermIrredSymmetry</a>
<LI> <A HREF="chap074.htm#SECT128">Discrete Signal Transforms</a>
<LI> <A HREF="chap074.htm#SECT129">DiscreteFourierTransform</a>
<LI> <A HREF="chap074.htm#SECT130">InverseDiscreteFourierTransform</a>
<LI> <A HREF="chap074.htm#SECT131">DiscreteHartleyTransform</a>
<LI> <A HREF="chap074.htm#SECT132">InverseDiscreteHartleyTransform</a>
<LI> <A HREF="chap074.htm#SECT133">DiscreteCosineTransform</a>
<LI> <A HREF="chap074.htm#SECT134">InverseDiscreteCosineTransform</a>
<LI> <A HREF="chap074.htm#SECT135">DiscreteCosineTransformIV</a>
<LI> <A HREF="chap074.htm#SECT136">InverseDiscreteCosineTransformIV</a>
<LI> <A HREF="chap074.htm#SECT137">DiscreteCosineTransformI</a>
<LI> <A HREF="chap074.htm#SECT138">InverseDiscreteCosineTransformI</a>
<LI> <A HREF="chap074.htm#SECT139">WalshHadamardTransform</a>
<LI> <A HREF="chap074.htm#SECT140">InverseWalshHadamardTransform</a>
<LI> <A HREF="chap074.htm#SECT141">SlantTransform</a>
<LI> <A HREF="chap074.htm#SECT142">InverseSlantTransform</a>
<LI> <A HREF="chap074.htm#SECT143">HaarTransform</a>
<LI> <A HREF="chap074.htm#SECT144">InverseHaarTransform</a>
<LI> <A HREF="chap074.htm#SECT145">RationalizedHaarTransform</a>
<LI> <A HREF="chap074.htm#SECT146">InverseRationalizedHaarTransform</a>
<LI> <A HREF="chap074.htm#SECT147">Matrix Decomposition</a>
<LI> <A HREF="chap074.htm#SECT148">MatrixDecompositionByPermPermSymmetry</a>
<LI> <A HREF="chap074.htm#SECT149">MatrixDecompositionByMonMonSymmetry</a>
<LI> <A HREF="chap074.htm#SECT150">MatrixDecompositionByPermIrredSymmetry</a>
<LI> <A HREF="chap074.htm#SECT151">Complex Numbers</a>
<LI> <A HREF="chap074.htm#SECT152">ImaginaryUnit</a>
<LI> <A HREF="chap074.htm#SECT153">Re</a>
<LI> <A HREF="chap074.htm#SECT154">Im</a>
<LI> <A HREF="chap074.htm#SECT155">AbsSqr</a>
<LI> <A HREF="chap074.htm#SECT156">Sqrt</a>
<LI> <A HREF="chap074.htm#SECT157">ExpIPi</a>
<LI> <A HREF="chap074.htm#SECT158">CosPi</a>
<LI> <A HREF="chap074.htm#SECT159">SinPi</a>
<LI> <A HREF="chap074.htm#SECT160">TanPi</a>
<LI> <A HREF="chap074.htm#SECT161">Functions for Matrices and Permutations</a>
<LI> <A HREF="chap074.htm#SECT162">TensorProductMat</a>
<LI> <A HREF="chap074.htm#SECT163">MatPerm</a>
<LI> <A HREF="chap074.htm#SECT164">PermMat</a>
<LI> <A HREF="chap074.htm#SECT165">PermutedMat</a>
<LI> <A HREF="chap074.htm#SECT166">DirectSummandsPermutedMat</a>
<LI> <A HREF="chap074.htm#SECT167">kbs</a>
<LI> <A HREF="chap074.htm#SECT168">DirectSumPerm</a>
<LI> <A HREF="chap074.htm#SECT169">TensorProductPerm</a>
</ol>
<A NAME="SECT001"><h2>74.1 Loading AREP</h2></a>
<P><P><P>
After having started <strong>GAP3</strong> the \AREP package needs to be 
loaded. This is done by typing:
<P>
\renewcommand\baselinestretch0.8
<pre>    gap> RequirePackage("arep");

                 ___   ___   ___  ___   
                |   | |   | |    |   |   Version 1.0, 16 Mar 1998
                |___| |___| |___ |___|
                |   | |  \  |    |       by Sebastian Egner
                |   | |   \ |___ |          Markus Pueschel

               Abstract REPresentations </pre>
<P>
\renewcommand\baselinestretch1
<P><P>
If \AREP isn't already in memory it is loaded and its 
banner is displayed. If you are a frequent user of \AREP 
you might consider putting this line into your <code>.gaprc</code> file.
<P><A NAME="SECT002"><h2>74.2 Mons</h2></a>
<P><P>
The class <strong> Mon</strong> is created to represent and calculate
efficiently with monomial matrices. A monomial matrix is a
matrix which contains exactly one non-zero entry in every
row and every column. Hence monomial matrices are always invertible 
and a generalization of permutation matrices. The elements
of the class <strong> Mon</strong> are called ``mons". A mon <var>m</var> is a 
record with at least the following fields.
<P>
<center>
\begintabularlll
<code>isMon</code>          & := & <code>true</code><BR> 
<code>isGroupElement</code> & := & <code>true</code><BR> 
<code>domain</code>         & := & <code>GroupElements</code><BR> 
<code>operations</code>     & := & <code>MonOps</code><BR> 
<code>char</code>           & : & characteristic of the base field<BR> 
<code>perm</code>           & : & a permutation<BR> 
<code>diag</code>           & : & a list of non-zero field elements
\endtabular    
</center>
<P>
The MonOps class is derived from the GroupElementOps class, 
so that groups of mons can be constructed. The monomial matrix
represented by a mon <var>m</var> is given by
<center><table><tr><td><I>
[&delta;<sub>i<sup><var>p</var></sup> j</sub>| i,j&isin;{1,...,<code>Length( <var>m</var>.diag )</code>}]. 
<code>ApplyFunc(DiagonalMat, <var>m</var>.diag )</code>,
</I></td></tr></table></center>
where <I>p</I> = <code><var>m</var>.perm</code> and <I>&delta;<sub>k<span style="font-family: cursive">l</span></sub></I> denotes the 
Kronecker symbol (<I>&delta;<sub>k<span style="font-family: cursive">l</span></sub> = 1</I> if <I>k = <span style="font-family: cursive">l</span></I> and <I>= 0</I> else). 
Mons are 
created using the function <code>Mon</code>. The following sections describe 
functions used for the calculation with mons.
<P>
Some remarks on the design of <strong> Mon</strong>: Mons cannot be mixed 
with <strong>GAP3</strong>-matrices (which are just lists of lists of field
elements); use <code>MonMat</code> (<a href="chap074.htm#SECT011">MonMat</a>) and <code>MatMon</code> (<a href="chap074.htm#SECT010">MatMon</a>) to convert
explicitly. Mons are lightweighted, e.g. only the characteristic of
the base field is stored.  Mons are group elements but there are no
efficient functions implemented to compute with mon groups. You should
think of mons as being a similar thing as integers or permutations: 
They are just fundamental objects to work with.
<P>
The functions concerning mons are implemented in the file 
<code>"arep/lib/mon.g"</code>.
<P><A NAME="SECT003"><h2>74.3 Comparison of Mons</h2></a>
<P><P>
<A name = "I0"></a>

<A name = "I1"></a>

<P>
<code><var><I>m<sub>1</sub></I></var> = <var><I>m<sub>2</sub></I></var></code> <BR> 
<code><var><I>m<sub>1</sub></I></var> <> <var><I>m<sub>2</sub></I></var></code>
<P>
The equality operator <code>=</code> evaluates to <code>true</code>  if the mons <var><I>m<sub>1</sub></I></var>
and <var><I>m<sub>2</sub></I></var> are  equal and  to <code>false</code> otherwise. The  inequality operator
<code><></code> evaluates to <code>true</code> if the mons <var><I>m<sub>1</sub></I></var> and <var><I>m<sub>2</sub></I></var> are not equal
and to <code>false</code> otherwise.
<P>
Two mons are equal iff they define the same monomial matrix. Note
that the monomial matrix being represented has a certain size. The
sizes must agree, too.
<P>
<P>
<code><var><I>m<sub>1</sub></I></var> < <var><I>m<sub>2</sub></I></var></code> <BR> 
<code><var><I>m<sub>1</sub></I></var> <= <var><I>m<sub>2</sub></I></var></code> <BR> 
<code><var><I>m<sub>1</sub></I></var> >= <var><I>m<sub>2</sub></I></var></code> <BR> 
<code><var><I>m<sub>1</sub></I></var> > <var><I>m<sub>2</sub></I></var></code>
<P>
The operators <code><</code>, <code><=</code>, <code>>=</code>, and <code>></code> evaluate to <code>true</code> if the 
mon <var><I>m<sub>1</sub></I></var> is strictly less than, less than or equal to, greater than or
equal to, and strictly greater than the mon <var><I>m<sub>2</sub></I></var>. 
<P>
The ordering of mons <var>m</var> is defined via the ordering 
of the pairs <code>[<var>m</var>.perm, <var>m</var>.diag]</code>.
<P><A NAME="SECT004"><h2>74.4 Basic Operations for Mons</h2></a>
<P><P><P>
The MonOps class is derived from the GroupElementsOps class.
<P>
<P>
<code><var><I>m<sub>1</sub></I></var> * <var><I>m<sub>2</sub></I></var></code><BR> 
<code><var><I>m<sub>1</sub></I></var> / <var><I>m<sub>2</sub></I></var></code>
<P>
The operators  <code>*</code> and <code>/</code> evaluate to the product and quotient of  the
two mons <var><I>m<sub>1</sub></I></var> and <var><I>m<sub>2</sub></I></var>. The product is defined via the product of 
the corresponding (monomial) matrices. Of course the mons must be of
equal size and characteristic otherwise an error is signaled.
<P>
<P>
<code><var><I>m<sub>1</sub></I></var> ^ <var><I>m<sub>2</sub></I></var></code>
<P>
The operator <code>^</code> evaluates to the conjugate 
<I>&lt;m<sub>2</sub>&gt;<sup>-1</sup>* <var>m_1</var>* <var>m_2</var></I>  of
<var><I>m<sub>1</sub></I></var> under <var><I>m<sub>2</sub></I></var> for two mons <var><I>m<sub>1</sub></I></var> and <var><I>m<sub>2</sub></I></var>. 
The mons must be of equal size and characteristic 
otherwise an error is signaled.
<P>
<P>
<code><var>m</var> ^ <var>i</var></code>
<P>
The powering operator  <code>^</code> returns the  <var>i</var>-th power  of the mon
<var>m</var> and the integer <var>i</var>. 
<P>
<P>
<code>Comm( <var><I>m<sub>1</sub></I></var>, <var><I>m<sub>2</sub></I></var> )</code>
<P>
<code>Comm</code>  returns the commutator 
<I>&lt;m<sub>1</sub>&gt;<sup>-1</sup>*  <var>m_2</var><sup>-1</sup>* <var>m_1</var>*<var>m_2</var></I> of two
mons <var><I>m<sub>1</sub></I></var> and <var><I>m<sub>2</sub></I></var>. The operands must be of equal size
and characteristic otherwise an error is signaled.
<P>
<P>
<code>LeftQuotient( <var><I>m<sub>1</sub></I></var>, <var><I>m<sub>2</sub></I></var> )</code>
<P>
<code>LeftQuotient</code> returns the  left quotient <I>&lt;m<sub>1</sub>&gt;<sup>-1</sup>*<var>m_2</var></I> of two 
mons <var><I>m<sub>1</sub></I></var> and <var><I>m<sub>2</sub></I></var>. The operands must be of equal size
and characteristic otherwise an error is signaled.
<P><A NAME="SECT005"><h2>74.5 Mon</h2></a>
<P><P><P>
<code>Mon( <var>p</var>, <var>D</var> )</code>
<P>
Let <var>p</var> be a permutation and <var>D</var> a list of field elements <I> &ne; 0</I> of
the same characteristic. <code>Mon</code> returns a mon representing the
monomial matrix given by 
<I>[&delta;<sub>i<sup><var>p</var></sup> j</sub>| i,j&isin;{1,...,<code>Length( <var>D</var> )</code>}]. 
<code>ApplyFunc(DiagonalMat, <var>D</var> )</code></I>, where <I>&delta;<sub>k<span style="font-family: cursive">l</span></sub></I> denotes the 
Kronecker symbol. The function will signal an error if 
the length of <var>D</var> is less than the largest moved point of <var>p</var>.
<P>
<pre>    gap> Mon( (1,2), [1, 2, 3] );
    Mon(
      (1,2),
      [ 1, 2, 3 ]
    )
    gap> Mon( (1,3,4), [Z(3)^0, Z(3)^2, Z(3), Z(9)]);
    Mon(
      (1,3,4),
      [ Z(3)^0, Z(3)^0, Z(3), Z(3^2) ]
    ) </pre>
<P>
<code>Mon( <var>D</var>, <var>p</var> )</code>
<P>
<code>Mon</code> returns a mon representing the monomial matrix given by 
<I><code>ApplyFunc(DiagonalMat, <var>D</var> )</code>.
[&delta;<sub>i<sup><var>p</var></sup> j</sub>| i,j&isin;{1,...,<code>Length( <var>D</var> )</code>}]</I>,
where <I>&delta;<sub>k<span style="font-family: cursive">l</span></sub></I> denotes the Kronecker symbol.
Note that in the output the diagonal is commuted to the right side, 
but it still represents the same monomial matrix.
<P>
<pre>    gap> Mon( [1,2,3], (1,2) );
    Mon(
      (1,2),
      [ 2, 1, 3 ]
    )
    gap> Mon( [Z(3)^0, Z(3)^2, Z(3), Z(9)], (1,3,4) ); 
    Mon(
      (1,3,4),
      [ Z(3^2), Z(3)^0, Z(3)^0, Z(3) ]
    ) </pre>
<P>
<code>Mon( <var>D</var> )</code>
<P>
<code>Mon</code> returns a mon representing the (monomial) diagonal matrix
given by the list <var>D</var>.
<P>
<pre>    gap> Mon( [1, 2, 3, 4] );
    Mon( [ 1, 2, 3, 4 ] ) </pre>
<P>
<code>Mon( <var>p</var>, <var>d</var> )</code><BR> 
<code>Mon( <var>p</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>Mon( <var>p</var>, <var>d</var>, <var>field</var> )</code>
<P>
Let <var>p</var> be a permutation and <var>d</var> a positive integer. <code>Mon</code>
returns a mon representing the <I>(<var>d</var>&times;<var>d</var>)</I> permutation matrix
corresponding to <var>p</var> using the convention 
<I>[&delta;<sub>i<sup><var>p</var></sup> j</sub>| i,j&isin;{1,...,d}]</I>, where 
<I>&delta;<sub>k<span style="font-family: cursive">l</span></sub></I> denotes the Kronecker symbol. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied. 
The default characteristic is zero. The function will signal 
an error if the degree <var>d</var> is less than the largest moved point of <var>p</var>.
<P>
<pre>    gap> Mon( (1,2), 3 );
    Mon( (1,2), 3 )
    gap> Mon( (1,2,3), 3, 5 );
    Mon( (1,2,3), 3, GF(5) ) </pre>
<P>
<code>Mon( <var>m</var> )</code>
<P>
Let <var>m</var> a mon. <code>Mon</code> returns <var>m</var>.
<P>
<pre>    gap> Mon( Mon( (1,2), [1, 2, 3] ) );
    Mon(
      (1,2),
      [ 1, 2, 3 ]
    ) </pre>
<P><A NAME="SECT006"><h2>74.6 IsMon</h2></a>
<P><P>
<A name = "I2"></a>

<P>
<code>IsMon( <var>obj</var> )</code>
<P>
<code>IsMon</code>  returns  <code>true</code> if  <var>obj</var>,  which may  be  an object of
arbitrary type, is a mon, and  <code>false</code> otherwise. The function
will signal an error if <var>obj</var> is an unbound variable.
<P>
<pre>    gap> IsMon( Mon( (1,2), [1, 2, 3] ) );
    true
    gap> IsMon( (1,2) );
    false </pre>
<P><A NAME="SECT007"><h2>74.7 IsPermMon</h2></a>
<P><P><P>
<code>IsPermMon( <var>m</var> )</code>
<P>
<code>IsPermMon</code> returns <code>true</code> if the mon <var>m</var> represents a 
permutation matrix and <code>false</code> otherwise.
<P>
<pre>    gap> IsPermMon( Mon( (1,2), [1, 2, 3] ) );
    false
    gap> IsPermMon( Mon( (1,2), 2) );
    true </pre>
<P><A NAME="SECT008"><h2>74.8 IsDiagMon</h2></a>
<P><P><P>
<code>IsDiagMon( <var>m</var> )</code>
<P>
<code>IsDiagMon</code> returns <code>true</code> if the mon <var>m</var> represents a diagonal matrix
and <code>false</code> otherwise.
<P>
<pre>    gap> IsDiagMon( Mon( (1,2), 2) );
    false
    gap> IsDiagMon( Mon( [1, 2, 3, 4] ) );
    true </pre>
<P><A NAME="SECT009"><h2>74.9 PermMon</h2></a>
<P><P><P>
<code>PermMon( <var>m</var> )</code>
<P>
<code>PermMon</code> converts the mon <var>m</var> to a permutation if possible and
returns <code>false</code> otherwise.
<P>
<pre>    gap> PermMon( Mon( (1,2), 5) );
    (1,2)
    gap> PermMon( Mon( [1,2] ) );
    false </pre>
<P><A NAME="SECT010"><h2>74.10 MatMon</h2></a>
<P><P><P>
<code>MatMon( <var>m</var> )</code>
<P>
<code>MatMon</code> converts the mon <var>m</var> to a matrix (i.e. a list of lists
of field elements).
<P>
<pre>    gap> MatMon( Mon( (1,2), [1, 2, 3] ) );
    [ [ 0, 2, 0 ], [ 1, 0, 0 ], [ 0, 0, 3 ] ]
    gap> MatMon( Mon( (1,2), 3) );
    [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] </pre>
<P><A NAME="SECT011"><h2>74.11 MonMat</h2></a>
<P><P><P>
<code>MonMat( <var>M</var> )</code>
<P>
<code>MonMat</code> converts the matrix <var>M</var> to a mon if possible and returns
<code>false</code> otherwise.
<P>
<pre>    gap> MonMat( [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] );
    Mon( (1,2), 3 )
    gap> MonMat( [ [ 0, 1, 0 ], [ E(3), 0, 0 ], [ 0, 0, 4 ] ] );
    Mon(
      (1,2),
      [ E(3), 1, 4 ]
    ) </pre>
<P><A NAME="SECT012"><h2>74.12 DegreeMon</h2></a>
<P><P><P>
<code>DegreeMon( <var>m</var> )</code>
<P>
<code>DegreeMon</code> returns the degree of the mon <var>m</var>. The degree is the size
of the represented matrix.
<P>
<pre>    gap> DegreeMon( Mon( (1,2), [1, 2, 3] ) );
    3 </pre>
<P><A NAME="SECT013"><h2>74.13 CharacteristicMon</h2></a>
<P><P><P>
<code>CharacteristicMon( <var>m</var> )</code>
<P>
<code>CharacteristicMon</code> returns the characteristic of the field 
from which the components of the mon <var>m</var> are.
<P>
<pre>    gap> CharacteristicMon( Mon( [1,2] ) );
    0
    gap> CharacteristicMon( Mon( (1,2), 4, 5) );
    5 </pre>
<P><A NAME="SECT014"><h2>74.14 OrderMon</h2></a>
<P><P><P>
<code>OrderMon( <var>m</var> )</code>
<P>
<code>OrderMon</code> returns the order of the monomial matrix represented by the
mon <var>m</var>. The order of <var>m</var> is the least positive integer <I>r</I> such that
<I>&lt;m&gt;<sup>r</sup></I> is the identity. Note that the order might be infinite.
<P>
<pre>    gap> OrderMon( Mon( [1,2] ) );
    "infinity"
    gap> OrderMon( Mon( (1,2), [1, E(3), E(3)^2] ) );
    6 </pre>
<P><A NAME="SECT015"><h2>74.15 TransposedMon</h2></a>
<P><P><P>
<code>TransposedMon( <var>m</var> )</code>
<P>
<code>TransposedMon</code> returns a mon representing the transposed monomial
matrix of the mon <var>m</var>.
<P>
<pre>    gap> TransposedMon( Mon( [1,2] ) );
    Mon( [ 1, 2 ] )
    gap> TransposedMon( Mon( (1,2,3), 4 ) );
    Mon( (1,3,2), 4 ) </pre>
<P><A NAME="SECT016"><h2>74.16 DeterminantMon</h2></a>
<P><P><P>
<code>DeterminantMon( <var>m</var> )</code>
<P>
<code>DeterminantMon</code> returns the determinant of the monomial matrix
represented by the mon <var>m</var>.
<P>
<pre>    gap> DeterminantMon( Mon( (1,2), [1, E(3), E(3)^2] ) );
    -1
    gap> DeterminantMon( Mon( [1,2] ) );
    2 </pre>
<P><A NAME="SECT017"><h2>74.17 TraceMon</h2></a>
<P><P><P>
<code>TraceMon( <var>m</var> )</code>
<P>
<code>TraceMon</code> returns the trace of the monomial matrix
represented by the mon <var>m</var>.
<P>
<pre>    gap> TraceMon( Mon( (1,2), 4, 5) );
    Z(5)
    gap> TraceMon( Mon( [1,2] ) );
    3 </pre>
<P><A NAME="SECT018"><h2>74.18 GaloisMon</h2></a>
<P><P><P>
<code>GaloisMon( <var>m</var>, <var>aut</var> )</code><BR> 
<code>GaloisMon( <var>m</var>, <var>k</var> )</code>
<P>
<code>GaloisMon</code> returns a mon which is a galois conjugate of the mon <var>m</var>. 
This means that each component of the represented matrix is mapped
with an automorphism of the underlying field.
The conjugating automorphism may either be a field automorphism <var>aut</var>
or an integer <var>k</var> specifying the automorphism <code>x -> GaloisCyc(x, <var>k</var>)</code>
in the case characteristic = 0 or <code>x -> x^(FrobeniusAut^<var>k</var>)</code> in the
case characteristic = <I>p</I> prime.
<P>
<pre>    gap> GaloisMon( Mon( (1,2), [1, E(3), E(3)^2] ), -1 );
    Mon(
      (1,2),
      [ 1, E(3)^2, E(3) ]
    )
    gap> aut := FrobeniusAutomorphism( GF(4) );
    FrobeniusAutomorphism( GF(2^2) )
    gap> GaloisMon( Mon( [ Z(2)^0, Z(2^2), Z(2^2)^2 ] ), aut );
    Mon( [ Z(2)^0, Z(2^2)^2, Z(2^2) ] ) </pre>
<P><A NAME="SECT019"><h2>74.19 DirectSumMon</h2></a>
<P><P><P>
<code>DirectSumMon( <var><I>m<sub>1</sub></I></var>, ..., <var><I>m<sub>k</sub></I></var> )</code>
<P>
<code>DirectSumMon</code> returns the direct sum of the mons 
<var><I>m<sub>1</sub></I></var>, ..., <var><I>m<sub>k</sub></I></var>. The direct sum of mons is defined via
the direct sum of the represented matrices. 
Note that the mons must have the same characteristic.
<P>
<pre>    gap> m1 := Mon( (1,2), [1, E(3), E(3)^2] );
    Mon(
      (1,2),
      [ 1, E(3), E(3)^2 ]
    )
    gap> m2 := Mon( (1,2), 3);
    Mon( (1,2), 3 )
    gap> DirectSumMon( m1, m2 );
    Mon(
      (1,2)(4,5),
      [ 1, E(3), E(3)^2, 1, 1, 1 ]
    ) </pre>
<P>
<code>DirectSumMon( <var>list</var> )</code>
<P>
<code>DirectSumMon</code> returns a mon representing the direct sum of the mons
in <var>list</var>.
<P>
<pre>    gap> m1 := Mon( (1,2), [1, E(3), E(3)^2] );
    Mon(
      (1,2),
      [ 1, E(3), E(3)^2 ]
    )
    gap> m2 := Mon( (1,2), 3);
    Mon( (1,2), 3 )
    gap> DirectSumMon( [m1, m2] );
    Mon(
      (1,2)(4,5),
      [ 1, E(3), E(3)^2, 1, 1, 1 ]
    ) </pre>
<P><A NAME="SECT020"><h2>74.20 TensorProductMon</h2></a>
<P><P><P>
<code>TensorProductMon( <var><I>m<sub>1</sub></I></var>, ..., <var><I>m<sub>k</sub></I></var> )</code>
<P>
<code>TensorProductMon</code> returns the tensor product of the mons 
<var><I>m<sub>1</sub></I></var>, ..., <var><I>m<sub>k</sub></I></var>. The tensor product of mons is defined via
the tensor product (or Kronecker product) of the represented matrices. 
Note that the mons must have the same characteristic.
<P>
<pre>    gap> m1 := Mon( (1,2), [1, E(3), E(3)^2] );
    Mon(
      (1,2),
      [ 1, E(3), E(3)^2 ]
    )
    gap> m2 := Mon( (1,2), 3);
    Mon( (1,2), 3 )
    gap> TensorProductMon( m1, m2 );
    Mon(
      (1,5)(2,4)(3,6)(7,8),
      [ 1, 1, 1, E(3), E(3), E(3), E(3)^2, E(3)^2, E(3)^2 ]
    ) </pre>
<P>
<code>TensorProductMon( <var>list</var> )</code>
<P>
<code>TensorProductMon</code> returns a mon representing the tensor product 
of the mons in <var>list</var>.
<P>
<pre>    gap> m1 := Mon( (1,2), [1, E(3), E(3)^2] );
    Mon(
      (1,2),
      [ 1, E(3), E(3)^2 ]
    )
    gap> m2 := Mon( (1,2), 3);
    Mon( (1,2), 3 )
    gap> TensorProductMon( [m1, m2] );
    Mon(
      (1,5)(2,4)(3,6)(7,8),
      [ 1, 1, 1, E(3), E(3), E(3), E(3)^2, E(3)^2, E(3)^2 ]
    ) </pre>
<P><A NAME="SECT021"><h2>74.21 CharPolyCyclesMon</h2></a>
<P><P><P>
<code>CharPolyCyclesMon( <var>m</var> )</code>
<P>
<code>CharPolyCyclesMon</code> returns the sorted list of the characteristic
polynomials of the cycles of the mon <var>m</var>.  All polynomials are written
in a common polynomial ring.  Applying <code>Product</code> to the result yields
the characteristic polynomial of <var>m</var>.
<P>
<pre>    gap> CharPolyCyclesMon( Mon( (1,2), 3 ) );
    [ X(Rationals) - 1, X(Rationals)^2 - 1 ]
    gap> CharPolyCyclesMon( Mon( (1,2), [1, E(3), E(3)^2] ) );
    [ X(CF(3)) + (-E(3)^2), X(CF(3))^2 + (-E(3)) ] </pre>
<P><A NAME="SECT022"><h2>74.22 AMats</h2></a>
<P><P><P>
The class <strong> AMat</strong> (<strong> A</strong>bstract <strong> Mat</strong>rices) 
is created to represent and calculate efficiently with 
structured matrices like e.g.
<I>2.(A&oplus; B)<sup>C</sup>&otimes; D. E<sup>2</sup></I>, where <I>A, B, C, D, E</I> are 
matrices of compatible size/characteristic and <I>&oplus;, &otimes;</I> denote
the direct sum and tensor product (Kronecker product) resp.
of matrices. The elements of the class <strong> AMat</strong> are called
``amats" and implement a recursive datastructure to form
expressions like the one above. Basic constructors for amats
allow to create permutation matrices (see <code>AMatPerm</code>, <a href="chap074.htm#SECT023">AMatPerm</a>), 
monomial matrices (see <code>AMatMon</code>, <a href="chap074.htm#SECT024">AMatMon</a>) and 
general matrices (see <code>AMatMat</code>, <a href="chap074.htm#SECT025">AMatMat</a>) in an efficient way (e.g. a
permutation matrix is defined by a permutation, the degree 
and the characteristic). Higher constructors allow to construct
direct sums (see <code>DirectSumAMat</code>, <a href="chap074.htm#SECT040">DirectSumAMat</a>), 
tensor products (see <code>TensorProductAMat</code>, <a href="chap074.htm#SECT041">TensorProductAMat</a>) 
etc. from given amats. 
Note that while building up a highly structured amat from other amats 
no computation is done beside checks for compatibility. 
To obtain the matrix represented by an amat the appropiate
function has to be applied (e.g. <code>MatAMat</code>, <a href="chap074.htm#SECT050">MatAMat</a>).
<P>
Some remarks on the design of <strong> AMat</strong>: The class <strong> AMat</strong> is
what is called a term algebra for expressions representing highly
structured matrices over certain base fields. Amats are not
necessarily square but can also be rectangular. Hence, if an amat
must be invertible (e.g. when it shall conjugate another amat) this
has to be proven by computation. To avoid many of these calculations
the result (the inverse) is stored in the object and many functions
accept a ``hint".  E.g. by supplying the hint ``invertible" in the
example above the explicit check for invertibility is suppressed.
Using and passing correct hints is essential for efficient computation.
A common problem in the design of non-trivial term algebras is the 
simplification strategy: Aggressive or conservative simplification? 
Our approach here is extremely conservative. This means even trivial 
subexpressions like <I>1*A</I> are not automatically simplified.
This allows the user to write functions that return their result
always in a fixed structure, e.g. the result is always a conjugated
direct sum of tensor products even though the conjugation might be 
trivial.
Finally, note that amats and normal matrices (i.e. lists of lists 
of field elements) do not mix -- you have to convert explicitly
with <code>AMatMat</code>, <code>MatAMat</code> etc. This greatly simplifies the 
amat module.
<P>
We define an amat recursively in Backus-Naur-Form 
as the disjoint union of the following cases.
<P><P>
\raggedbottom
<P>
beg-tabular<s></s>lllll
\multicolumn5l<var>amat</var> ::= <BR> 
 ;  &\multicolumn4latomic cases <BR> 
 &   & <var>perm</var> & ; & ``perm" (invertible)<BR> 
 & <I>|</I> & <var>mon</var>  & ; & ``mon" (invertible)<BR> 
 & <I>|</I> & <var>mat</var>  & ; & ``mat"<BR> 
<BR> 
 ; &\multicolumn4lcomposed cases<BR> 
 & <I>|</I> & <var>scalar</var> <I>.</I> <var>amat</var>              & ; & ``scalarMultiple"<BR> 
 & <I>|</I> & <var>amat</var> <I>.</I> ... <I>.</I> <var>amat</var>    & ; & ``product"<BR> 
 & <I>|</I> & <var>amat</var> \^ <var>int</var>                      & ; & ``power"<BR> 
 & <I>|</I> & <var>amat</var> \^ <var>amat</var>                     & ; & ``conjugate"<BR> 
 & <I>|</I> & <var>amat</var> <I>&oplus;</I> ... <I>&oplus;</I> <var>amat</var>  & ; & ``directSum"<BR> 
 & <I>|</I> & <var>amat</var> <I>&otimes;</I> ... <I>&otimes;</I> <var>amat</var>& ; & ``tensorProduct"<BR> 
 & <I>|</I> & GaloisConjugate(<var>amat</var>, <var>aut</var>)       & ; & ``galoisConjugate".
end-tabular<s></s>
<P>
<P>
An amat <var>A</var> is a record with at least the following fields:  
<P>
<P>
<center>
\begintabularlll
<code>isAMat</code>     & := & <code>true</code><BR> 
<code>operations</code> & := & <code>AMatOps</code><BR> 
<code>type</code>       & : & a string identifying the type of A<BR> 
<code>dimensions</code> & : & size of the matrix represented ( = [rows, columns] )<BR> 
<code>char</code>       & : & characteristic of the base field
\endtabular    
</center>
<P>
The cases as stated above are distinguished by the field <code>.type</code>
of an amat. Depending on the type additional fields are mandatory
as follows: 
<P>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "perm":</code><BR> 
<code>element</code>      & defining permutation
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "mon":</code><BR> 
<code>element</code>      & defining mon-object (see <a href="chap074.htm#SECT002">Mons</a>)
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "mat":</code><BR> 
<code>element</code>      & defining matrix (list of lists of field elements)
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "scalarMultiple":</code><BR> 
<code>element</code>      & the AMat multiplied<BR> 
<code>scalar</code>       & the scalar<BR> 
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "product":</code><BR> 
<code>factors</code>      & list of AMats of compatible dimensions 
and the same characteristic<BR> 
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "power":</code><BR> 
<code>element</code>      & the square AMat to be raised to exponent<BR> 
<code>exponent</code>     & the exponent (an integer)
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "conjugate":</code><BR> 
<code>element</code>      & the square AMat to be conjugated<BR> 
<code>conjugation</code>  & the conjugating invertible AMat
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "directSum":</code><BR> 
<code>summands</code>     & List of AMats of the same characteristic
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "tensorProduct":</code><BR> 
<code>factors</code>      & List of AMats of the same characteristic
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp9cm}
\multicolumn2l<code>type = "galoisConjugate":</code><BR> 
<code>element</code>      & the AMat to be Galois conjugated<BR> 
<code>galoisAut</code>    & the Galois automorphism
end-tabular<s></s>
<P>
<P>
Note that there is an important difference between the 
<em> type of an amat</em> and the 
<em> type of the matrix being represented by the amat</em>: 
An amat can be of type ``mat" but the matrix is in fact
a permutation matrix. This distinction is refelcted in the naming
of the functions: ``XAMat" refers to the type of the 
amat, ``XMat" to the type of the matrix being represented,
<P>
Here a short overview of the functions concerning amats. 
sections <a href="chap074.htm#SECT023">AMatPerm</a> -- <a href="chap074.htm#SECT043">Comparison of AMats</a> are concerned with
the construction of amats, sections <a href="chap074.htm#SECT044">Converting AMats</a> -- <a href="chap074.htm#SECT053">MatAMatAMat</a> 
with the convertability and conversion of amats to permutations, mons
and matrices, sections 
<a href="chap074.htm#SECT054">Functions for AMats</a> -- <a href="chap074.htm#SECT065">UpperBoundLinearComplexityAMat</a>
contain functions for amats, e.g. computation of the determinant or 
simplification of amats.
<P>
The functions concerning amats are implemented in the file
<code>"arep/lib/amat.g"</code>.
<A NAME="SECT023"><h2>74.23 AMatPerm</h2></a>
<P><P><P>
<code>AMatPerm( <var>p</var>, <var>d</var> )</code><BR> 
<code>AMatPerm( <var>p</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>AMatPerm( <var>p</var>, <var>d</var>, <var>field</var> )</code>
<P>
<code>AMatPerm</code> returns an amat of type <code>"perm"</code> representing 
the <I>(<var>d</var>&times;<var>d</var>)</I> permutation matrix 
<I>[&delta;<sub>i<sup><var>p</var></sup> j</sub>| i,j&isin;{1,...,<var>d</var>}]</I> 
corresponding to the permutation <var>p</var>. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied. 
The default characteristic is zero. The function will signal 
an error if the degree <var>d</var> is less than the largest moved point of <var>p</var>.
<P>
<pre>    gap> AMatPerm( (1,2), 5 );
    AMatPerm((1,2), 5)
    gap> AMatPerm( (1,2,3), 5 , 3);
    AMatPerm((1,2,3), 5, GF(3))
    gap> A := AMatPerm( (1,2,3), 5 , Rationals);
    AMatPerm((1,2,3), 5) 
    gap> A.type;
    "perm" </pre>
<P><A NAME="SECT024"><h2>74.24 AMatMon</h2></a>
<P><P><P>
<code>AMatMon( <var>m</var> )</code>
<P>
<code>AMatMon</code> returns an amat of type <code>"mon"</code> representing the
monomial matrix given by the mon <var>m</var>. For the explanation of mons
please refer to <a href="chap074.htm#SECT002">Mons</a>.
<P>
<pre>    gap> AMatMon( Mon( (1,2), [1, E(3), E(3)^2] ) );
    AMatMon( Mon(
      (1,2),
      [ 1, E(3), E(3)^2 ]
    ) )
    gap> A := AMatMon( Mon( (1,2), 3) );
    AMatMon( Mon( (1,2), 3 ) )
    gap> A.type;
    "mon" </pre>
<P><A NAME="SECT025"><h2>74.25 AMatMat</h2></a>
<P><P><P>
<code>AMatMat( <var>M</var> )</code><BR> 
<code>AMatMat( <var>M</var>, <var>hint</var> )</code>
<P>
<code>AMatMat</code> returns an amat of type <code>"mat"</code> representing the
matrix <var>M</var>. If the optional <var>hint</var> <code>"invertible"</code> is supplied
then the field <code>.isInvertible</code> of the amat is set to <code>true</code> (without
checking) indicating that the matrix represented is invertible.
<P>
<pre>    gap> AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    ) 
    gap> A := AMatMat( [ [1,2], [3,4] ] , "invertible");    
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ],
      "invertible"
    )
    gap> A.isInvertible;
    true </pre>
<P><A NAME="SECT026"><h2>74.26 IsAMat</h2></a>
<P><P>
<A name = "I3"></a>

<P>
<code>IsAMat( <var>obj</var> )</code>
<P>
<code>IsAMat</code>  returns  <code>true</code> if  <var>obj</var>,  which may  be  an object of
arbitrary type, is an amat, and  <code>false</code> otherwise. 
<P>
<pre>    gap> IsAMat( AMatPerm( (1,2,3), 3 ) );
    true
    gap> IsAMat( 1/2 );
    false </pre>
<P><A NAME="SECT027"><h2>74.27 IdentityPermAMat</h2></a>
<P><P><P>
<code>IdentityPermAMat( <var>n</var> )</code><BR> 
<code>IdentityPermAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>IdentityPermAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>IdentityPermAMat</code> returns an amat of type <code>"perm"</code> representing
the <I>(<var>n</var>&times;<var>n</var>)</I> identity matrix. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied to obtain 
the identity matrix of arbitrary characteristic. 
The default characteristic is zero. Note that the same result
can be obtained by using <code>AMatPerm</code>.
<P>
<pre>    gap> IdentityPermAMat( 3 );
    IdentityPermAMat(3)
    gap> AMatPerm( ( ), 3);
    IdentityPermAMat(3)
    gap> IdentityPermAMat( 3 , GF(3) );
    IdentityPermAMat(3, GF(3)) </pre>
<P><A NAME="SECT028"><h2>74.28 IdentityMonAMat</h2></a>
<P><P><P>
<code>IdentityMonAMat( <var>n</var> )</code><BR> 
<code>IdentityMonAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>IdentityMonAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>IdentityMonAMat</code> returns an amat of type <code>"mon"</code> representing
the <I>(<var>n</var>&times;<var>n</var>)</I> identity matrix. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied to obtain 
the identity matrix of arbitrary characteristic. 
The default characteristic is zero. Note that the same result
can be obtained by using <code>AMatMon</code>.
<P>
<pre>    gap> IdentityMonAMat( 3 );         
    IdentityMonAMat(3)
    gap> AMatMon( Mon( ( ), 3 ) );
    IdentityMonAMat(3)
    gap> IdentityMonAMat( 3, 3 );
    IdentityMonAMat(3, GF(3)) </pre>
<P><A NAME="SECT029"><h2>74.29 IdentityMatAMat</h2></a>
<P><P><P>
<code>IdentityMatAMat( <var>n</var> )</code><BR> 
<code>IdentityMatAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>IdentityMatAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>IdentityMatAMat</code> returns an amat of type <code>"mat"</code> representing
the <I>(<var>n</var>&times;<var>n</var>)</I> identity matrix. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied to obtain 
the identity matrix of arbitrary characteristic. 
The default characteristic is zero. Note that the same result
can be obtained by using <code>AMatMat</code>.
<P>
<pre>    gap> IdentityMatAMat( 3 );   
    IdentityMatAMat(3)
    gap> AMatMat( [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ]);
    IdentityMatAMat(3)
    gap> IdentityMatAMat( 3, GF(3) );                  
    IdentityMatAMat(3, GF(3)) </pre>
<P>
<code>IdentityMatAMat( <var>dim</var> )</code><BR> 
<code>IdentityMatAMat( <var>dim</var>, <var>char</var> )</code><BR> 
<code>IdentityMatAMat( <var>dim</var>, <var>field</var> )</code>
<P>
Let <var>dim</var> be a pair of positive integers. <code>IdentityMatAMat</code> returns
an amat of type <code>"mat"</code> representing the rectangular identity
matrix with <code><var>dim</var>[1]</code> rows and <code><var>dim</var>[2]</code> columns. A rectangular
identity matrix has the entry 1 at the position <I>(i,j)</I> if <I>i = j</I>
and 0 else. As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the identity matrix of arbitrary characteristic. 
The default characteristic is zero. 
<P>
<pre>    gap> IdentityMatAMat( [2, 3] );
    IdentityMatAMat([ 2, 3 ])
    gap> IdentityMatAMat( [2, 3], 3 );
    IdentityMatAMat([ 2, 3 ], GF(3)) </pre>
<P><A NAME="SECT030"><h2>74.30 IdentityAMat</h2></a>
<P><P><P>
<code>IdentityAMat( <var>dim</var> )</code><BR> 
<code>IdentityAMat( <var>dim</var>, <var>char</var> )</code><BR> 
<code>IdentityAMat( <var>dim</var>, <var>field</var> )</code>
<P>
Let <var>dim</var> be a pair of positive integers. <code>IdentityAMat</code> returns an
amat of type <code>"perm"</code> if <code><var>dim</var>[1] = <var>dim</var>[2]</code> and an amat of type
<code>"mat"</code> else, representing the identity matrix with <code><var>dim</var>[1]</code> rows
and <code><var>dim</var>[2]</code> columns. A rectangular identity matrix has the entry 1
at the position <I>(i,j)</I> if <I>i = j</I> and 0 else. Use this function if
you do not know whether the matrix is square and you do not care about
the type. As optional parameter a characteristic <var>char</var> or a <var>field</var>
can be supplied to obtain the identity matrix of arbitrary
characteristic. The default characteristic is zero.
<P>
<pre>    gap> IdentityAMat( [2, 2] );
    IdentityPermAMat(2)
    gap> IdentityAMat( [2, 3] );
    IdentityMatAMat([ 2, 3 ]) </pre>
<P><A NAME="SECT031"><h2>74.31 AllOneAMat</h2></a>
<P><P><P>
<code>AllOneAMat( <var>n</var> )</code><BR> 
<code>AllOneAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>AllOneAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>AllOneAMat</code> returns an amat of type <code>"mat"</code> representing
the <I>(<var>n</var>&times;<var>n</var>)</I> all-one matrix. An all-one matrix has 
the entry 1 at each position. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied to obtain 
the all-one matrix of arbitrary characteristic. 
The default characteristic is zero.
<P>
<pre>    gap> AllOneAMat( 3 );
    AllOneAMat(3)
    gap> AllOneAMat( 3, 3);
    AllOneAMat(3, GF(3)) </pre>
<P>
<code>AllOneAMat( <var>dim</var> )</code><BR> 
<code>AllOneAMat( <var>dim</var>, <var>char</var> )</code><BR> 
<code>AllOneAMat( <var>dim</var>, <var>field</var> )</code>
<P>
Let <var>dim</var> a pair of positive integers. <code>AllOneAMat</code> returns
an amat of type <code>"mat"</code> representing the rectangular
all-one matrix with <code><var>dim</var>[1]</code> rows and <code><var>dim</var>[2]</code> columns. 
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the all-one matrix of arbitrary 
characteristic. The default characteristic is zero. 
<P>
<pre>    gap> AllOneAMat( [3, 2] );
    AllOneAMat([ 3, 2 ])
    gap> AllOneAMat( [3, 2], GF(5) ); 
    AllOneAMat([ 3, 2 ], GF(5)) </pre>
<P><A NAME="SECT032"><h2>74.32 NullAMat</h2></a>
<P><P><P>
<code>NullAMat( <var>n</var> )</code><BR> 
<code>NullAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>NullAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>NullAMat</code> returns an amat of type <code>"mat"</code> representing
the <I>(<var>n</var>&times;<var>n</var>)</I> all-zero matrix. An all-zero matrix has 
the entry 0 at each position. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied to obtain 
the all-zero matrix of arbitrary characteristic. 
The default characteristic is zero.
<P>
<pre>    gap> NullAMat( 3 );
    NullAMat(3)
    gap> NullAMat( 3, 3);
    NullAMat(3, GF(3)) </pre>
<P>
<code>NullAMat( <var>dim</var> )</code><BR> 
<code>NullAMat( <var>dim</var>, <var>char</var> )</code><BR> 
<code>NullAMat( <var>dim</var>, <var>field</var> )</code>
<P>
Let <var>dim</var> a pair of positive integers. <code>NullAMat</code> returns
an amat of type <code>"mat"</code> representing the rectangular
all-zero matrix with <code><var>dim</var>[1]</code> rows and <code><var>dim</var>[2]</code> columns. 
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the all-zero matrix of arbitrary characteristic. 
The default characteristic is zero. 
<P>
<pre>    gap> NullAMat( [3, 2] );
    NullAMat([ 3, 2 ])
    gap> NullAMat( [3, 2], GF(5) ); 
    NullAMat([ 3, 2 ], GF(5)) </pre>
<P><A NAME="SECT033"><h2>74.33 DiagonalAMat</h2></a>
<P><P><P>
<code>DiagonalAMat( <var>list</var> )</code>
<P>
Let <var>list</var> contain field elements of the same characteristic.
<code>DiagonalAMat</code> returns an amat representing the diagonal matrix
with diagonal entries in <var>list</var>. If all elements in <var>list</var> are
<I> &ne; 0</I> the returned amat is of type <code>"mon"</code>, else of type
<code>"directSum"</code> (see <a href="chap074.htm#SECT022">AMats</a>).
<P>
<pre>    gap> DiagonalAMat( [2, 3] );
    DiagonalAMat([ 2, 3 ])
    gap> DiagonalAMat( [0, 2, 3] );
    DirectSumAMat(
      NullAMat(1),
      AMatMat(
        [ [ 2 ] ]
      ),
      AMatMat(
        [ [ 3 ] ]
      )
    ) </pre>
<P><A NAME="SECT034"><h2>74.34 DFTAMat</h2></a>
<P><P><P>
<code>DFTAMat( <var>n</var> )</code><BR> 
<code>DFTAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>DFTAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>DFTAMat</code> returns a special amat of type <code>"mat"</code> representing the 
matrix 
<center><table><tr><td><I>
</i>DFT<i><sub><var>n</var></sub>  = [&omega;<sub><var>n</var></sub> <sup>i. j</sup>| i,j&isin;{0,...,<var>n</var>-1}],
</I></td></tr></table></center> 
with <I>&omega;<sub>n</sub></I> being a certain primitive <var>n</var>-th root of unity.
<I></i>DFT<i><sub>n</sub></I> represents the Discrete Fourier Transform on <var>n</var> 
points (see <a href="chap074.htm#SECT129">DiscreteFourierTransform</a>).
As optional parameter a characteristic <var>char</var> or a <var>field</var>
can be supplied to obtain the <I></i>DFT<i></I> of arbitrary characteristic. 
The default characteristic is zero. Note that for characteristic 
<I>p</I> prime the <I></i>DFT<i><sub>n</sub></I> exists iff <I></I>gcd<I>(p, n) = 1</I>. For a given 
finite <var>field</var> the <I></i>DFT<i><sub><var>n</var></sub> </I> exists iff <I>n|<code>Size( <var>F</var> )</code></I>. 
If these conditions are violated an error is signaled.
The choice of <I>&omega;<sub><var>n</var></sub> </I> is <code>E(<var>n</var>)</code> if <I>&lt;char&gt; = 0</I> and
<code>Z(<var>q</var>)^((<var>q-1</var>)/<var>n</var>)</code> for <I>&lt;char&gt; = p</I>, <var>q</var> an appropiate <I>p</I>-power.
<P>
<pre>    gap> DFTAMat(3);
    DFTAMat(3)
    gap> DFTAMat(3, 7);
    DFTAMat(3, 7) </pre>
<P><A NAME="SECT035"><h2>74.35 SORAMat</h2></a>
<P><P><P>
<code>SORAMat( <var>n</var> )</code><BR> 
<code>SORAMat( <var>n</var>, <var>char</var> )</code><BR> 
<code>SORAMat( <var>n</var>, <var>field</var> )</code>
<P>
<code>SORAMat</code> returns a special amat of type <code>"mat"</code> representing the 
matrix 
<center><table><tr><td><I>
</i>SOR<i><sub>n</sub> = [
  </td><td><table style="display:inline-table;"><tr><td><I>rrrrr
  1 </I></td><td><I> 1 </I></td><td><I> 1 </I></td><td><I>... </I></td><td><I> 1 </I></td></tr><tr><td><I> 
  1 </I></td><td><I> -1 </I></td><td><I> 0 </I></td><td><I> ... </I></td><td><I> 0 </I></td></tr><tr><td><I> 
  1 </I></td><td><I> 0 </I></td><td><I> -1 </I></td><td><I> ... </I></td><td><I> 0 </I></td></tr><tr><td><I> 
  &sdot; </I></td><td><I> &sdot; </I></td><td><I> &sdot;</I></td><td><I> \ddots </I></td><td><I> 0 </I></td></tr><tr><td><I> 
  1 </I></td><td><I> 0 </I></td><td><I> 0 </I></td><td><I> </I></td><td><I> -1
  </I></td></tr></table style="display:inline-table;"></td><td>].
</I></td></tr></table></center>
The <I></i>SOR<i><sub>n</sub></I> is the sparsest matrix that <strong> s</strong>plits off the
<strong> o</strong>ne-<strong> r</strong>epresentation in a permutation representation. As
optional parameter a characteristic <var>char</var> or a <var>field</var> can be
supplied to obtain the <I></i>SOR<i></I> of arbitrary characteristic. The
default characteristic is zero.
<P>
<pre>    gap> SORAMat( 4 );   
    SORAMat(4)
    gap> SORAMat( 4, 7); 
    SORAMat(4, 7) </pre>
<P><A NAME="SECT036"><h2>74.36 ScalarMultipleAMat</h2></a>
<P><P><P>
<code>ScalarMultipleAMat( <var>s</var>, <var>A</var> )</code>&emsp; or&emsp; <code><var>s</var> * <var>A</var></code>
<P>
Let <var>s</var> be a field element and <var>A</var> an amat. 
<code>ScalarMultipleAMat</code> returns an amat of type <code>"scalarMultiple"</code>
representing the scalar multiple of <var>s</var> with <var>A</var>, which must have
common characteristic otherwise an error is signaled. 
Note that <var>s</var> and <var>A</var> can be accessed in the fields <code>.scalar</code>
resp. <code>.element</code> of the result.
<P>
<pre>    gap> A := AMatPerm( (1,2,3), 4);
    AMatPerm((1,2,3), 4)
    gap> ScalarMultipleAMat( E(3), A );
    E(3) * AMatPerm((1,2,3), 4)
    gap> 2 * A;
    2 * AMatPerm((1,2,3), 4) </pre>
<P><A NAME="SECT037"><h2>74.37 Product and Quotient of AMats</h2></a>
<P><P><P>
<code><var>A</var> * <var>B</var></code>
<P>
Let <var>A</var> and <var>B</var> be amats. <code><var>A</var> * <var>B</var></code> returns an amat of
type <code>"product"</code> representing the product of <var>A</var> and <var>B</var>,
which must have compatible sizes and common characteristic
otherwise an error is signaled.
Note that the factors can be accessed in the field 
<code>.factors</code> of the result.
<P>
<pre>    gap> A := AMatPerm( (1,2,3), 4);
    AMatPerm((1,2,3), 4)
    gap> B := AMatMat( [ [1, 2], [3, 4], [5, 6], [7, 8] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 8 ] ]
    )
    gap> A * A;
    AMatPerm((1,2,3), 4) *
    AMatPerm((1,2,3), 4)
    gap> C := A * B;
    AMatPerm((1,2,3), 4) *
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 8 ] ]
    ) 
    gap> C.type;
    "product" </pre>
<P>
<code><var>A</var> / <var>B</var></code>
<P>
Let <var>A</var> and <var>B</var> be amats. <code><var>A</var> / <var>B</var></code> returns an amat of
type <code>"product"</code> representing the quotient of <var>A</var> and <var>B</var>.
The sizes and characteristics of <var>A</var> and <var>B</var> must be compatible, 
<var>B</var> must be square and invertible otherwise an error is signaled.
<P>
<pre>    gap> A := AMatPerm( (1,2,3), 4);
    AMatPerm((1,2,3), 4)
    gap> B := DiagonalAMat( [1, E(3), 1, 3] );
    DiagonalAMat([ 1, E(3), 1, 3 ])
    gap> A / B;
    AMatPerm((1,2,3), 4) *
    DiagonalAMat([ 1, E(3), 1, 3 ]) ^ -1 </pre>
<P><A NAME="SECT038"><h2>74.38 PowerAMat</h2></a>
<P><P><P>
<code>PowerAMat( <var>A</var>, <var>n</var> )</code>&emsp; or&emsp; <code><var>A</var> ^ <var>n</var></code><BR> 
<code>PowerAMat( <var>A</var>, <var>n</var>, <var>hint</var> )</code>
<P>
Let <var>A</var> be an amat and <var>n</var> an integer. <code>PowerAMat</code> returns 
an amat of type <code>"power"</code> representing the power of <var>A</var> with <var>n</var>.
<var>A</var> must be square otherwise an error is signaled. If <var>n</var> is 
negative then <var>A</var> is checked for invertibility if the
hint <code>"invertible"</code> is not supplied.
Note that <var>A</var> and <var>n</var> can be accessed in the fields 
<code>.element</code> resp. <code>.exponent</code> of the result.
<P>
<pre>    gap> A := AMatPerm( (1,2,3), 4);
    AMatPerm((1,2,3), 4)
    gap> B := PowerAMat(A, 3);      
    AMatPerm((1,2,3), 4) ^ 3
    gap> B ^ -2;
    ( AMatPerm((1,2,3), 4) ^ 3
    ) ^ -2 </pre>
<P><A NAME="SECT039"><h2>74.39 ConjugateAMat</h2></a>
<P><P><P>
<code>ConjugateAMat( <var>A</var>, <var>B</var> )</code>&emsp; or&emsp; <code><var>A</var> ^ <var>B</var></code><BR> 
<code>ConjugateAMat( <var>A</var>, <var>B</var>, <var>hint</var> )</code>
<P>
Let <var>A</var> and <var>B</var> be amats. <code>ConjugateAMat</code> returns 
an amat of type <code>"conjugate"</code> representing the conjugate of 
<var>A</var> with <var>B</var> (i.e. the matrix defined by <I>&lt;B&gt;<sup>-1</sup>.<var>A</var>.<var>B</var></I>).
<var>A</var> and <var>B</var> must be square otherwise an error is signaled. 
<var>B</var> is checked for invertibility if the
hint <code>"invertible"</code> is not supplied.
Note that <var>A</var> and <var>B</var> can be accessed in the fields <code>.element</code> 
resp. <code>conjugation</code> of the result.
<P>
<pre>    gap> A := AMatMon( Mon( (1,2), [1, E(4), -1] ) );
    AMatMon( Mon(
      (1,2),
      [ 1, E(4), -1 ]
    ) )
    gap> B := DFTAMat( 3 );
    DFTAMat(3)
    gap> ConjugateAMat( A, B, "invertible" );
    ConjugateAMat(
      AMatMon( Mon(
        (1,2),
        [ 1, E(4), -1 ]
      ) ),
      DFTAMat(3)
    )
    gap> B ^ SORAMat( 3 );
    ConjugateAMat(
      DFTAMat(3),
      SORAMat(3)
    ) </pre>
<P><A NAME="SECT040"><h2>74.40 DirectSumAMat</h2></a>
<P><P><P>
<code>DirectSumAMat( <var><I>A<sub>1</sub></I></var>, ..., <var><I>A<sub>k</sub></I></var> )</code>
<P>
<code>DirectSumAMat</code> returns an amat of type <code>"directSum"</code> representing
the direct sum of the amats <var><I>A<sub>1</sub></I></var>, ..., <var><I>A<sub>k</sub></I></var>, which must have 
common characteristic otherwise an error is signaled. Note that the direct 
summands can be accessed in the field <code>.summands</code> of the result.
<P>
<pre>    gap> A1 := AMatMat( [ [1, 2] ] );
    AMatMat(
      [ [ 1, 2 ] ]
    )
    gap> A2 := DFTAMat( 2 );
    DFTAMat(2)
    gap> A3 := AMatPerm( (1,2), 2 );
    AMatPerm((1,2), 2)
    gap> DirectSumAMat( E(3) * A1, A2 ^ 2, A3 );
    DirectSumAMat(
      E(3) * AMatMat( [ [ 1, 2 ] ] ),
      DFTAMat(2) ^ 2,
      AMatPerm((1,2), 2)
    ) </pre>
<P>
<code>DirectSumAMat( <var>list</var> )</code>
<P>
<code>DirectSumAMat</code> returns an amat of type <code>"directSum"</code> representing
the direct sum of the amats in <var>list</var>. The amats must have common
characteristic otherwise an error is signaled. The direct 
summands can be accessed in the field <code>.summands</code> of the result.
<P>
<pre>    gap> A := DiagonalAMat( [ Z(3), Z(3)^2 ]);
    DiagonalAMat([ Z(3), Z(3)^0 ])
    gap> B := AMatPerm( (1,2), 3, 3);
    AMatPerm((1,2), 3, GF(3))
    gap> DirectSumAMat( [A, B] );    
    DirectSumAMat(
      DiagonalAMat([ Z(3), Z(3)^0 ]),
      AMatPerm((1,2), 3, GF(3))
    ) </pre>
<P><A NAME="SECT041"><h2>74.41 TensorProductAMat</h2></a>
<P><P><P>
<code>TensorProductAMat( <var><I>A<sub>1</sub></I></var>, ..., <var><I>A<sub>k</sub></I></var> )</code>
<P>
<code>TensorProductAMat</code> returns an amat of type <code>"tensorProduct"</code> 
representing the tensor product (or Kronecker product) of the 
amats <var><I>A<sub>1</sub></I></var>, ..., <var><I>A<sub>k</sub></I></var>, 
which must have common characteristic otherwise an error is signaled.
Note that the tensor factors can be accessed in the field <code>.factors</code> of 
the result.
<P>
<pre>    gap> A := IdentityPermAMat( 2 );
    IdentityPermAMat(2)
    gap> B := AMatMat( [ [1, 2, 3], [4, 5, 6] ] );
    AMatMat(
      [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]
    )
    gap> TensorProductAMat( A, B );
    TensorProductAMat(
      IdentityPermAMat(2),
      AMatMat(
        [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]
      )
    ) </pre>
<P>
<code>TensorProductAMat( <var>list</var> )</code>
<P>
<code>TensorPoductAMat</code> returns an amat of type <code>"tensorProduct"</code> 
representing the tensor product of the amats in <var>list</var>. 
The amats must have common characteristic otherwise an error 
is signaled. The tensor factors can be accessed in the field 
<code>.factors</code> of the result.
<P>
<pre>    gap> A := AMatPerm( (1,2), 3 );
    AMatPerm((1,2), 3)
    gap> B := AMatMat( [ [1], [2] ]);
    AMatMat(
      [ [ 1 ], [ 2 ] ]
    )
    gap> TensorProductAMat( [A ^ 2, 2 * B] );
    TensorProductAMat(
      AMatPerm((1,2), 3) ^ 2,
      2 * AMatMat(
        [ [ 1 ], [ 2 ] ]
      )
    ) </pre>
<P><A NAME="SECT042"><h2>74.42 GaloisConjugateAMat</h2></a>
<P><P><P>
<code>GaloisConjugateAMat( <var>A</var>, <var>k</var> )</code><BR> 
<code>GaloisConjugateAMat( <var>A</var>, <var>aut</var> )</code>
<P>
<code>GaloisConjugateAMat</code> returns an amat which represents a Galois 
conjugate of the amat <var>A</var>. The 
conjugating automorphism may either be a field automorphism <var>aut</var>
or an integer <var>k</var> specifying the automorphism <code>x -> GaloisCyc(x, <var>k</var>)</code>
in the case characteristic = 0 or <code>x -> x^(FrobeniusAut^<var>k</var>)</code> 
in the case characteristic = <I>p</I> prime.
Note that <var>A</var> and <var>k/aut</var> can be accessed in the fields <code>.element</code> resp.
<code>.galoisAut</code> of the result.
<P>
<pre>    gap> A := DiagonalAMat( [1, E(3)] );
    DiagonalAMat([ 1, E(3) ])
    gap> GaloisConjugateAMat( A, -1 );
    GaloisConjugateAMat(
      DiagonalAMat([ 1, E(3) ]),
      -1
    )
    gap> aut := FrobeniusAutomorphism( GF(4) );
    FrobeniusAutomorphism( GF(2^2) )
    gap> B := AMatMon( Mon( (1,2), [ Z(2)^0, Z(2^2) ] ) );
    AMatMon( Mon(
      (1,2),
      [ Z(2)^0, Z(2^2) ]
    ) )
    gap> GaloisConjugateAMat( B, aut );
    GaloisConjugateAMat(
      AMatMon( Mon(
        (1,2),
        [ Z(2)^0, Z(2^2) ]
      ) ),
      FrobeniusAutomorphism( GF(2^2) )
    ) </pre>
<P><A NAME="SECT043"><h2>74.43 Comparison of AMats</h2></a>
<P><P>
<A name = "I4"></a>

<A name = "I5"></a>

<P>
<code><var>A</var> = <var>B</var></code> <BR> 
<code><var>A</var> <> <var>B</var></code>
<P>
The equality operator <code>=</code> evaluates to <code>true</code>  if the amats <var>A</var>
and <var>B</var> are  equal and  to <code>false</code> otherwise. The  inequality operator
<code><></code> evaluates to <code>true</code> if the amats <var>A</var> and <var>B</var> are not equal
and to <code>false</code> otherwise.
<P>
Two amats are equal iff they define the same matrix.
<P>
<pre>    gap> A := DiagonalAMat( [E(3), 1] );
    DiagonalAMat([ E(3), 1 ])
    gap> B := A ^ 3;
    DiagonalAMat([ E(3), 1 ]) ^ 3
    gap> B = IdentityPermAMat( 2 );
    true </pre>
<P>
<P>
<code><var>A</var> < <var>B</var></code> <BR> 
<code><var>A</var> <= <var>B</var></code> <BR> 
<code><var>A</var> >= <var>B</var></code> <BR> 
<code><var>A</var> > <var>B</var></code>
<P>
The operators <code><</code>, <code><=</code>, <code>>=</code>, and <code>></code> evaluate to <code>true</code> if the 
amat <var>A</var> is strictly less than, less than or equal to, greater than or
equal to, and strictly greater than the amat <var>B</var>. 
<P>
The ordering of amats is defined via the ordering 
of records.
<A NAME="SECT044"><h2>74.44 Converting AMats</h2></a>
<P><P><P>
The following sections describe the functions for the convertability 
and conversion of amats to permutations, mons (see <a href="chap074.htm#SECT002">Mons</a>) and matrices.
<P>
The names of the conversion functions are chosen according to the usual
<strong>GAP3</strong>-convention: <code>ChalkCheese</code> makes chalk from cheese.
The parts in the name (chalk, cheese) are
<P>
<P>
<center>
\begintabular{l@ -- l}
Perm & a <strong>GAP3</strong>-permutation, e.g. (1,2)<BR> 
Mon & a mon object, e.g. Mon( (1,2), 2 ) (see <a href="chap074.htm#SECT002">Mons</a>)<BR> 
Mat & a <strong>GAP3</strong>-matrix, e.g. [[1,2],[3,4]]<BR> 
AMat & an amat of any type<BR> 
PermAMat & an amat of type ``perm"<BR> 
MonAMat & an amat of type ``mon"<BR> 
MatAMat & an amat of type ``mat"
\endtabular
</center>
<P><A NAME="SECT045"><h2>74.45 IsIdentityMat</h2></a>
<P><P><P>
<code>IsIdentityMat( <var>A</var> )</code>
<P>
<code>IsIdentityMat</code> returns <code>true</code> if the matrix represented by 
the amat <var>A</var> is the identity matrix and <code>false</code> otherwise. 
Note that the name of the function 
is not <code>IsIdentityAMat</code> since <var>A</var> can be of any type but represents an
identity matrix in the mathematical sense. 
<P>
<pre>    gap> IsIdentityMat(AMatPerm( (1,2), 3 ));
    false
    gap> A := DiagonalAMat( [Z(3), Z(3)] ) ^ 2;  
    DiagonalAMat([ Z(3), Z(3) ]) ^ 2
    gap> IsIdentityMat(A);                   
    true </pre>
<P><A NAME="SECT046"><h2>74.46 IsPermMat</h2></a>
<P><P><P>
<code>IsPermMat( <var>A</var> )</code>
<P>
<code>IsPermMat</code> returns <code>true</code> if the matrix represented by the amat <var>A</var> is 
a permutation matrix and <code>false</code> otherwise. The name of the function 
is not <code>IsPermAMat</code> since <var>A</var> can be of any type but represents a 
permutation matrix in the mathematical sense. 
Note that <code>IsPermMat</code> sets and tests <code><var>A</var>.isPermMat</code>.
<P>
<pre>    gap> IsPermMat( AMatMon( Mon( (1,2), [1, -1] )));
    false
    gap> IsPermMat( DiagonalAMat( [Z(3), Z(9)] ) ^ 8);
    true </pre>
<P><A NAME="SECT047"><h2>74.47 IsMonMat</h2></a>
<P><P><P>
<code>IsMonMat( <var>A</var> )</code>
<P>
<code>IsMonMat</code> returns <code>true</code> if the matrix represented by the amat <var>A</var> is 
a monomial matrix (a matrix containing exactly one entry <I> &ne; 0</I> 
in every row and column) and <code>false</code> otherwise. 
The name of the function is not <code>IsMonAMat</code>
since <var>A</var> can be of any type but represents a monomial matrix
in the mathematical sense. Note that <code>IsMonMat</code> sets and tests 
<code><var>A</var>.isMonMat</code>.
<P>
<pre>    gap> IsMonMat( AMatPerm( (1,2), 3 ));
    true
    gap> IsMonMat( AMatPerm( (1,2,3), 3 ) ^ DFTAMat(3) );
    true </pre>
<P><A NAME="SECT048"><h2>74.48 PermAMat</h2></a>
<P><P><P>
<code>PermAMat( <var>A</var> )</code>
<P>
Let <var>A</var> be an amat. <code>PermAMat</code> returns the permutation represented 
by <var>A</var> if <var>A</var> is a permutation matrix (i.e. <code>IsPermMat( <var>A</var> ) = true</code>)
and <code>false</code> otherwise. Note that <code>PermAMat</code> sets and tests <code><var>A</var>.perm</code>.
<P>
<pre>    gap> PermAMat(AMatPerm( (1,2), 5 ));
    (1,2)
    gap> A := AMatMat( [ [Z(3)^0, Z(3)], [0*Z(3), Z(3)^0] ] );
    AMatMat(
      [ [ Z(3)^0, Z(3) ], [ 0*Z(3), Z(3)^0 ] ]
    )
    gap> PermAMat(A);                   
    false
    gap> PermAMat(A ^ 3);               
    () </pre>
<P><A NAME="SECT049"><h2>74.49 MonAMat</h2></a>
<P><P><P>
<code>MonAMat( <var>A</var> )</code>
<P>
Let <var>A</var> be an amat. <code>MonAMat</code> returns the mon (see <a href="chap074.htm#SECT002">Mons</a>) represented 
by <var>A</var> if <var>A</var> is a monomial matrix (i.e. <code>IsMonMat( <var>A</var> ) = true</code>)
and <code>false</code> otherwise. Note that <code>MonAMat</code> sets and tests <code><var>A</var>.mon</code>.
<P>
<pre>    gap> MonAMat(AMatPerm( (1,2,3), 5 ));
    Mon( (1,2,3), 5 )
    gap> MonAMat(AMatPerm( (1,2,3), 3 ) ^ DFTAMat(3) );
    Mon( [ 1, E(3), E(3)^2 ] ) 
    gap> MonAMat( AMatMat( [ [1, 2] ] ));
    false </pre>
<P><A NAME="SECT050"><h2>74.50 MatAMat</h2></a>
<P><P><P>
<code>MatAMat( <var>A</var> )</code>
<P>
<code>MatAMat</code> returns the matrix represented by the amat <var>A</var>. 
Note that <code>MatAMat</code> sets and tests <code><var>A</var>.mat</code>.
<P>
<pre>    gap> MatAMat( AMatPerm( (1,2), 3, 2 ));
    [ [ 0*Z(2), Z(2)^0, 0*Z(2) ], [ Z(2)^0, 0*Z(2), 0*Z(2) ], 
      [ 0*Z(2), 0*Z(2), Z(2)^0 ] ]
    gap> MatAMat(DFTAMat(3)); 
    [ [ 1, 1, 1 ], [ 1, E(3), E(3)^2 ], [ 1, E(3)^2, E(3) ] ]
    gap> A := IdentityPermAMat(2); 
    IdentityPermAMat(2)
    gap> B := AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> MatAMat(TensorProductAMat(A, B));
    [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ] </pre>
<P><A NAME="SECT051"><h2>74.51 PermAMatAMat</h2></a>
<P><P><P>
<code>PermAMatAMat( <var>A</var> )</code>
<P>
Let <var>A</var> be an amat. <code>PermAMatAMat</code> returns an amat of type <code>"perm"</code>
equal to <var>A</var> if <var>A</var> is a permutation matrix 
(i.e. <code>IsPermMat( <var>A</var> ) = true</code>) and <code>false</code> otherwise. 
<P>
<pre>    gap> PermAMatAMat(AMatMon(Mon( (1,2), 3 )));
    AMatPerm((1,2), 3)
    gap> PermAMatAMat(DiagonalAMat( [E(3), 1] ) ^ 3);
    IdentityPermAMat(2)
    gap> PermAMatAMat(AMatMat( [ [1,2] ] ));
    false </pre>
<P><A NAME="SECT052"><h2>74.52 MonAMatAMat</h2></a>
<P><P><P>
<code>MonAMatAMat( <var>A</var> )</code>
<P>
Let <var>A</var> be an amat. <code>MonAMatAMat</code> returns an amat of type <code>"mon"</code>
equal to <var>A</var> if <var>A</var> is a monomial matrix (i.e. <code>IsMonMat( <var>A</var> ) = true</code>)
and <code>false</code> otherwise. 
<P>
<pre>    gap> MonAMat(AMatPerm( (1,2), 3 ));
    Mon( (1,2), 3 )
    gap> MonAMat(DFTAMat(3)^2);
    Mon(
      (2,3),
      [ 3, 3, 3 ]
    )
    gap> MonAMat(AMatMat( [ [1, 2] ] ));
    false </pre>
<P><A NAME="SECT053"><h2>74.53 MatAMatAMat</h2></a>
<P><P><P>
<code>MatAMatAMat( <var>A</var> )</code>
<P>
<code>MatAMatAMat</code> returns an amat of type <code>"mat"</code> equal to <var>A</var>.
<P>
<pre>    gap> A := AMatPerm( (1,2), 2 );
    AMatPerm((1,2), 2)
    gap> B := AMatMat( [ [1,2] ] );
    AMatMat(
      [ [ 1, 2 ] ]
    )
    gap> MatAMatAMat(DirectSumAMat(A, B));
    AMatMat(
      [ [ 0, 1, 0, 0 ], [ 1, 0, 0, 0 ], [ 0, 0, 1, 2 ] ]
    ) </pre>
<P><A NAME="SECT054"><h2>74.54 Functions for AMats</h2></a>
<P><P><P>
The following sections describe useful functions for the calculation
with amats (e.g. calculation of the inverse, determinant of an amat 
as well as simplifying amats).
Most of these functions can take great advantage of the highly structured
form of the amats.
<P><A NAME="SECT055"><h2>74.55 InverseAMat</h2></a>
<P><P><P>
<code>InverseAMat( <var>A</var> )</code>
<P>
<code>InverseAMat</code> returns an amat representing the inverse of the amat <var>A</var>.
If <var>A</var> is not invertible, an error is signaled. The function uses 
mathematical rules to invert the direct sum, tensor product etc. of 
matrices. Note that <code>InverseAMat</code> sets and tests <code><var>A</var>.inverse</code>.
<P>
<pre>    gap> A := AMatPerm( (1,2), 3);                   
    AMatPerm((1,2), 3)
    gap> B := AMatMat( [ [1,2], [3,4] ]);
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> C := DiagonalAMat( [ E(3), 1] );
    DiagonalAMat([ E(3), 1 ])
    gap> D := DirectSumAMat(A, TensorProductAMat(B, C));
    DirectSumAMat(
      AMatPerm((1,2), 3),
      TensorProductAMat(
        AMatMat( [ [ 1, 2 ], [ 3, 4 ] ] ),
        DiagonalAMat([ E(3), 1 ])
      )
    )
    gap> InverseAMat(D);
    DirectSumAMat(
      AMatPerm((1,2), 3),
      TensorProductAMat(
        AMatMat(
          [ [ -2, 1 ], [ 3/2, -1/2 ] ],
          "invertible"
        ),
        DiagonalAMat([ E(3)^2, 1 ])
      )
    ) </pre>
<P><A NAME="SECT056"><h2>74.56 TransposedAMat</h2></a>
<P><P><P>
<code>TransposedAMat( <var>A</var> )</code>
<P>
<code>TransposedAMat</code> returns an amat representing the transpose of the 
amat <var>A</var>.
The function uses mathematical rules to transpose the direct sum, 
tensor product etc. of matrices.
<P>
<pre>    gap> A := AMatPerm( (1,2,3), 3);
    AMatPerm((1,2,3), 3)
    gap> B := AMatMat( [ [1, 2] ] );
    AMatMat(
      [ [ 1, 2 ] ]
    )
    gap> TransposedAMat(TensorProductAMat(A, B));
    TensorProductAMat(
      AMatPerm((1,3,2), 3),
      AMatMat(
        [ [ 1 ], [ 2 ] ]
      )
    ) </pre>
<P><A NAME="SECT057"><h2>74.57 DeterminantAMat</h2></a>
<P><P><P>
<code>DeterminantAMat( <var>A</var> )</code>
<P>
<code>DeterminantAMat</code> returns the determinant of the amat <var>A</var>. If 
<var>A</var> is not square an error is signaled.
The function uses mathematical rules to calculate the determinant of
the direct sum, tensor product etc. of matrices.
Note that <code>DeterminantAMat</code> sets and tests <code><var>A</var>.determinant</code>.
<P>
<pre>    gap> A := AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> B := AMatPerm( (1,2), 2 );
    AMatPerm((1,2), 2)
    gap> DeterminantAMat(TensorProductAMat(A, B));
    4 </pre>
<P><A NAME="SECT058"><h2>74.58 TraceAMat</h2></a>
<P><P><P>
<code>TraceAMat( <var>A</var> )</code>
<P>
<code>TraceAMat</code> returns the trace of the amat <var>A</var>. If 
<var>A</var> is not square an error is signaled.
The function uses mathematical rules to calculate the trace of
direct sums, tensor product etc. of matrices.
Note that <code>TraceAMat</code> sets and tests <code><var>A</var>.trace</code>.
<P>
<pre>    gap> A := DFTAMat(2);
    DFTAMat(2)
    gap> B := DiagonalAMat( [1, 2, 3] );
    DiagonalAMat([ 1, 2, 3 ])
    gap> TraceAMat(DirectSumAMat( A^2, B ));
    10 </pre>
<P><A NAME="SECT059"><h2>74.59 RankAMat</h2></a>
<P><P><P>
<code>RankAMat( <var>A</var> )</code>
<P>
<code>RankAMat</code> returns the rank of the amat <var>A</var>. Note that <code>RankAMat</code>
sets and tests <code><var>A</var>.rank</code>.
<P>
<pre>    gap> RankAMat(AllOneAMat(100));
    1
    gap> RankAMat(AMatPerm( (1,2), 10 ));
    10 </pre>
<P><A NAME="SECT060"><h2>74.60 SimplifyAMat</h2></a>
<P><P><P>
<code>SimplifyAMat( <var>A</var> )</code>
<P>
<code>SimplifyAMat</code> returns a simplified amat representing the same matrix 
as the amat <var>A</var>. The simplification is performed recursively according 
to certain rules.
E.g. the following simplifications are performed: 

<P>&bull; If <var>A</var> represents a permutation matrix, monomial matrix
then an amat of type ``perm", ``mon" resp. is returned.
<P>&bull; In a product resp. tensor product, trivial factors
are omitted.
<P>&bull; Trivial conjugation is omitted.
<P>&bull; In a direct sum adjacent permutation/monomial matrices 
are put together.
<P>&bull; In a product adjacent permutation/monomial matrices 
are multiplied together.
<P>&bull; Successive scalars are multiplied together.
<P>&bull; Successive exponents are multiplied together, negative 
exponents are evaluated using <code>InverseAMat</code>.

Note that important information about the matrix is 
shifted to the simplification.
<P>
<pre>    gap> A := IdentityPermAMat( 3 );
    IdentityPermAMat(3)
    gap> B := DiagonalAMat( [E(3), 1, 1] );
    DiagonalAMat([ E(3), 1, 1 ])
    gap> C := AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> D := DirectSumAMat(A ^ -1, 1 * B * A, C);
    DirectSumAMat(
      IdentityPermAMat(3) ^ -1,
      ( 1 * DiagonalAMat([ E(3), 1, 1 ])
      ) *
      IdentityPermAMat(3),
      AMatMat(
        [ [ 1, 2 ], [ 3, 4 ] ]
      )
    )
    gap> SimplifyAMat(D);
    DirectSumAMat(
      IdentityPermAMat(3),
      DiagonalAMat([ E(3), 1, 1 ]),
      AMatMat(
        [ [ 1, 2 ], [ 3, 4 ] ]
      )
    ) </pre>
<P><A NAME="SECT061"><h2>74.61 kbsAMat</h2></a>
<P><P><P>
<code>kbsAMat( <var><I>A<sub>1</sub></I></var>, ..., <var><I>A<sub>k</sub></I></var> )</code>
<P>
<code>kbsAMat</code> returns the joined kbs (conjugated blockstructure) 
of the amats <var><I>A<sub>1</sub></I></var>, ..., <var><I>A<sub>k</sub></I></var>.
The amats must be square and of common size and characteristic 
otherwise an error is signaled. The joined kbs of a list of 
<I>(n&times; n)</I>-matrices is a partition of <I>{1,...,n}</I> representing their
common blockstructure. For an exact definition see <a href="chap074.htm#SECT167">kbs</a>.
<P>
<pre>    gap> A := IdentityPermAMat(2);
    IdentityPermAMat(2)
    gap> B := AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> kbsAMat(TensorProductAMat(A, B));
    [ [ 1, 2 ], [ 3, 4 ] ]
    gap> kbsAMat(AMatPerm( (1,3)(2,4), 5 ));
    [ [ 1, 3 ], [ 2, 4 ], [ 5 ] ] </pre>
<P>
<code>kbsAMat( <var>list</var> )</code>
<P>
<code>kbsAMat</code> returns the joined kbs of the amats in <var>list</var> (see above).
<P><A NAME="SECT062"><h2>74.62 kbsDecompositionAMat</h2></a>
<P><P><P>
<code>kbsDecompositionAMat( <var>A</var> )</code>
<P>
<code>kbsDecompositionAMat</code> decomposes the amat <var>A</var> into a conjugated
(by an amat of type <code>"perm"</code>) direct sum of amats of type <code>"mat"</code> 
as far as possible. If <var>A</var> is not square an error is signaled.
The decomposition is performed according to the 
kbs (see <a href="chap074.htm#SECT167">kbs</a>) of <var>A</var> which is a partition of <I>{1,...,n}</I> 
(<I>n = </I> number of rows of <var>A</var>) describing the blockstructure of <var>A</var>.
<P>
<pre>    gap> A := AMatMat( [[1,0,2,0], [0,1,0,2], [3,0,4,0], [0,3,0,4]] );
    AMatMat(
      [ [ 1, 0, 2, 0 ], [ 0, 1, 0, 2 ], [ 3, 0, 4, 0 ], [ 0, 3, 0, 4 ] ]
    )
    gap> kbsDecompositionAMat(A);               
    ConjugateAMat(
      DirectSumAMat(
        AMatMat(
          [ [ 1, 2 ], [ 3, 4 ] ]
        ),
        AMatMat(
          [ [ 1, 2 ], [ 3, 4 ] ]
        )
      ),
      AMatPerm((2,3), 4)
    ) </pre>
<P><A NAME="SECT063"><h2>74.63 AMatSparseMat</h2></a>
<P><P><P>
<code>AMatSparseMat( <var>M</var> )</code>
<code>AMatSparseMat( <var>M</var>, <var>match-blocks</var> )</code>
<P>
Let <var>M</var> be a sparse matrix (i.e. containing entries <I> &ne; 0</I>).
<code>AMatSparseMat</code> returns an amat of the form <I>&lt;P&gt;<sub>1</sub>. <var>E</var><sub>1</sub>.
<var>D</var>. <var>E</var><sub>2</sub>. <var>P</var><sub>2</sub></I> where (for <I>i = 1,2</I>) <I>&lt;P&gt;<sub>i</sub></I> are amats of type
<code>"perm"</code>, <I>&lt;E&gt;<sub>i</sub></I> are identity-amats (might be rectangular) and <var>D</var>
is an amat of type <code>"directSum"</code>. If <var>match-blocks</var> is <code>true</code> or
not provided then, furthermore, the permutations <var><I>p<sub>1</sub></I></var> and <var><I>p<sub>2</sub></I></var>
are chosen such that equivalent summands of <var>D</var> are equal and
collected together by a tensor product. 
If <var>match-blocks</var> is <code>false</code> this is not done.
The major part of the work is done by the function 
<code>DirectSummandsPermutedMat</code> (see <a href="chap074.htm#SECT166">DirectSummandsPermutedMat</a>).
Use the function <code>SimplifyAMat</code> (see <a href="chap074.htm#SECT060">SimplifyAMat</a>) for
simplification of the result.
<P>
For an explanation of the algorithm see <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>.
<P>
<pre>    gap> M := [[0,0,0,0],[0,1,0,2],[0,0,3,0],[0,4,0,5]];; 
    gap> PrintArray(M);
    [ [  0,  0,  0,  0 ],
      [  0,  1,  0,  2 ],
      [  0,  0,  3,  0 ],
      [  0,  4,  0,  5 ] ]
    gap> AMatSparseMat(M);
    AMatPerm((1,4,3), 4) *
    IdentityMatAMat([ 4, 3 ]) *
    DirectSumAMat(
      TensorProductAMat(
        IdentityPermAMat(1),
        AMatMat(
          [ [ 3 ] ]
        )
      ),
      TensorProductAMat(
        IdentityPermAMat(1),
        AMatMat(
          [ [ 1, 2 ], [ 4, 5 ] ]
        )
      )
    ) *
    IdentityMatAMat([ 3, 4 ]) *
    AMatPerm((1,3,4), 4) </pre>
<P><A NAME="SECT064"><h2>74.64 SubmatrixAMat</h2></a>
<P><P><P>
<code>SubmatrixAMat( <var>A</var>, <var>inds</var> )</code>
<P>
Let <var>A</var> be an amat and <var>inds</var> a set of positive integers. 
<code>SubmatrixAMat</code> returns an amat of type <code>"mat"</code> representing 
the submatrix of <var>A</var> defined by extracting all entries with
row and column index in <var>inds</var>. 
<P>
<pre>    gap> A := AMatPerm( (1,2), 2 );
    AMatPerm((1,2), 2)
    gap> B := AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> SubmatrixAMat(TensorProductAMat(A, B), [2,3] );
    AMatMat(
      [ [ 0, 3 ], [ 2, 0 ] ]
    ) </pre>
<P><A NAME="SECT065"><h2>74.65 UpperBoundLinearComplexityAMat</h2></a>
<P><P><P>
<code>UpperBoundLinearComplexityAMat( <var>A</var> )</code>
<P>
<code>UpperBoundLinearComplexityAMat</code> returns an upper bound for the linear
complexity of the amat <var>A</var> according to the complexity model
<I>L<sub>&infin;</sub></I> of Clausen/Baum, <A href="biblio.htm#CB93"><cite>CB93</cite></a>. The linear complexity is
a measure for the complexity of the matrix-vector multiplication of a
given matrix with an arbitrary vector.
<P>
<pre>    gap> UpperBoundLinearComplexityAMat(DFTAMat(2));
    2
    gap> UpperBoundLinearComplexityAMat(DiagonalAMat( [2, 3] ));
    2
    gap> A := AMatPerm( (1,2), 3);
    AMatPerm((1,2), 3)
    gap> B := AMatMat( [ [1,2], [3,4] ] );
    AMatMat(
      [ [ 1, 2 ], [ 3, 4 ] ]
    )
    gap> UpperBoundLinearComplexityAMat(TensorProductAMat(A, B));
    24 </pre>
<P><A NAME="SECT066"><h2>74.66 AReps</h2></a>
<P><P><P>
The class <strong> ARep</strong> (<strong> A</strong>bstract <strong> Rep</strong>resentations) is 
created to represent and calculate efficiently with structured 
matrix representations of finite groups up to equality, e.g.  
expressions like 
<I>(&phi;\uparrow<sub>T</sub> G)<sup>M</sup>&otimes;&psi;</I> where <I>&phi;, &psi;</I> are
representations and <I>\uparrow, &otimes;</I> denotes the induction 
resp. inner tensor product of representations. 
The implementation idea is the same as with the class 
<strong> AMat</strong> (see <a href="chap074.htm#SECT022">AMats</a>), i.e. a representation is a record 
containing the necessary information
(e.g. degree, characteristic, list of images on the generators)
to define a representation up to equality. 
The elements of <strong> ARep</strong> are called ``areps" 
and are no group homomorphisms in the sense of <strong>GAP3</strong> (which is 
the reason for the term ``abstract" representation). 
Special care is taken of permutation and monomial representations,
which can be represented very efficiently by storing a list of 
permutations or mons (see <a href="chap074.htm#SECT002">Mons</a>) instead of matrices as 
images on the generators.
<P>
Areps can represent representations of any finite group and any
characteristic including modular (characteristic divides group size)
representations, but most of the higher functions will only work 
in the non-modular case or even only in the case of characteristic zero.
These restrictions are always indicated in the description of the
respective function.
<P>
Basic constructors allow to create areps, e.g. by supplying
the list of images on the generators (see <code>ARepByImages</code>, 
<a href="chap074.htm#SECT073">ARepByImages</a>). Since <strong>GAP3</strong> allows the manipulation of 
the generators given to construct a group, it is important
for consistency to have a field with generators one can rely on.
This is realized in the function <code>GroupWithGenerators</code>, 
<a href="chap074.htm#SECT067">GroupWithGenerators</a>.
<P>
Higher constructors allow to construct inductions (see <code>InductionARep</code>,
<a href="chap074.htm#SECT081">InductionARep</a>), direct sums (see <code>DirectSumARep</code>, <a href="chap074.htm#SECT077">DirectSumARep</a>), 
inner tensor products (see <code>InnerTensorProductARep</code>,
<a href="chap074.htm#SECT078">InnerTensorProductARep</a>) etc. from given areps.
<P>
Some remarks on the design of <strong> ARep</strong>: 
The class <strong> ARep</strong> is a term algebra for matrix representations
of finite groups (see also <strong> AMat</strong>, <a href="chap074.htm#SECT022">AMats</a>).
The simplification strategy is extremely conservative, 
which means that even trivial expressions like 
<code>GaloisConjugate(<var>R</var>, <var>id</var>)</code> are only simplified upon 
explicit request. 
As in <strong> AMat</strong> we use the ``hint"-concept extensively 
to suppress unnecessary expensive computations of little interest.
The class <strong> AMat</strong> is used in <strong> ARep</strong> in three ways: 
1. for images under areps, 2. for conjugating matrices 
(change of base of the underlying vector space) and 3. for elements
of the intertwining space of two areps.
Note that 3. requires non-invertible or even rectangular matrices 
to be represented.
A special point that deserves mentioning is the way in which areps 
act as homomorphisms anf how they are defined. Areps are <em> no</em> 
<strong>GAP3</strong>-homomorphisms. We simply did not manage to implement 
<strong> ARep</strong> as a term algebra <em> and</em> as <strong>GAP3</strong>-homomorphisms
in a relyable and efficient way which avoids maximal confusion. 
In addition, working with <strong> ARep</strong> usually involves many 
representations of the same group. This is supported in the 
most obvious way by fixing the list of generators used to 
create the group (see <a href="chap074.htm#SECT067">GroupWithGenerators</a>) and only varying 
the list of images. Although this strategy differs from the 
approach in <strong>GAP3</strong> (which deliberately manipulates the 
generating list used to construct the group) it turned out
to be very useful and efficient in the situation at hand.
<P>
We define an arep recursively in Backus-Naur-Form 
as the disjoint union of the following cases.
<P>
beg-tabular<s></s>lllll
\multicolumn5l<var>arep</var> ::= <BR> 
 ;  &\multicolumn4latomic cases <BR> 
 &   & <var>perm</var> & ; & ``perm"<BR> 
 & <I>|</I> & <var>mon</var>  & ; & ``mon"<BR> 
 & <I>|</I> & <var>mat</var>  & ; & ``mat"<BR> 
<BR> 
 ; &\multicolumn4lcomposed cases<BR> 
 & <I>|</I> & <var>arep</var> \^ <var>arep</var>                    & ; & ``conjugate"<BR> 
 & <I>|</I> & <var>arep</var> <I>&oplus;</I> ... <I>&oplus;</I> <var>arep</var>  & ; & ``directSum"<BR> 
 & <I>|</I> & <var>arep</var> <I>&otimes;</I> ... <I>&otimes;</I> <var>arep</var>& ; & ``innerTensorProduct"<BR> 
 & <I>|</I> & <var>arep</var> <I>#</I> ... <I>#</I> <var>arep</var>          & ; & ``outerTensorProduct"<BR> 
 & <I>|</I> & <var>arep</var> <I>\downarrow</I> <var>subgrp</var>         & ; & ``restriction"<BR> 
 & <I>|</I> & <var>arep</var> <I>\uparrow</I> <var>supgrp</var>, <var>transversal</var> & ; & ``induction"<BR> 
 & <I>|</I> & Extension(<var>arep</var>, <var>ext-character</var>)   & ; & ``extension"<BR> 
 & <I>|</I> & GaloisConjugate(<var>arep</var>, <var>aut</var>)       & ; & ``galoisConjugate"
end-tabular<s></s> 
<P>
<P>
An arep <var>R</var> is a record with the following fields mandatory
to all types of areps.
<P>
<P>
<center>
\begintabularlll
<code>isARep</code>     & := & <code>true</code><BR> 
<code>operations</code> & := & <code>AMatOps</code><BR> 
<code>char</code>       & : & characteristic of the base field<BR> 
<code>degree</code>     & : & degree of the representation<BR> 
<code>source</code>     & : & the group being represented, which must contain<BR> 
             &    & the field <code>.theGenerators</code>, see <a href="chap074.htm#SECT067">GroupWithGenerators</a><BR> 
<code>type</code>       & : & a string identifying the type of R
\endtabular    
</center>
<P>
The cases as stated above are distinguished by the field <code>.type</code>
of an arep <var>R</var>. Depending on the type additional fields are mandatory
as follows.
<P>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "perm":</code><BR> 
<code>theImages</code>    & list of permutations for the images 
of <code>source.theGenerators</code>
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "mon":</code><BR> 
<code>theImages</code>    & list of mons (see <a href="chap074.htm#SECT002">Mons</a>) for the images 
of <code>source.theGenerators</code>
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "mat":</code><BR> 
<code>theImages</code>    & list of matrices for the images 
of <code>source.theGenerators</code>
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "mat":</code><BR> 
<code>rep</code> & an arep to be conjugated<BR> 
<code>conjugation</code> & an amat (see <a href="chap074.htm#SECT022">AMats</a>) conjugating <code>rep</code>
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "directSum":</code><BR> 
<code>summands</code>    & list of areps of the same source and characteristic
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "innerTensorProduct":</code><BR> 
<code>factors</code>    & list of areps of the same characteristic
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "outerTensorProduct":</code><BR> 
<code>factors</code>    & list of areps of the same characteristic
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "restriction":</code><BR> 
<code>rep</code>    & an arep of a supergroup of <code>source</code>, the group <code>source</code><BR> 
 & and <code>rep.source</code> have the same parent group
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "induction":</code><BR> 
<code>rep</code>    & an arep of a subgroup of <code>source</code>, the group <code>source</code><BR> 
 & and <code>rep.source</code> have the same parent group<BR> 
<code>transversal</code> & a right transversal of <code>Cosets(source, rep.source)</code>
end-tabular<s></s>
<P>
beg-tabular<s></s>{p2.5cmp10cm}
\multicolumn2l<code>type = "galoisConjugate":</code><BR> 
<code>rep</code>    & an arep to be conjugated<BR> 
<code>galoisAut</code> & the Galois automorphism
end-tabular<s></s>
<P>
<P>
Note that most of the function concerning areps require calculation in
the source group. Hence it is most useful to choose aggroups or
permutation groups as sources if possible. Furthermore there is an
important difference between the <em> type of an arep</em> and the <em>
type of the representation being represented by the arep</em>: E.g. an
arep can be of type ``induction" but the representation is in fact a
permutation representation.  This distinction is reflected in the
naming of the functions: ``XARep" refers to the type of the arep,
``XRep" to the type of the representation being represented,
<P>
Here a short overview of the function concerning areps.
sections <a href="chap074.htm#SECT067">GroupWithGenerators</a> -- <a href="chap074.htm#SECT083">GaloisConjugateARep</a> are 
concerned with the construction of areps, sections 
<a href="chap074.htm#SECT084">Basic Functions for AReps</a> -- <a href="chap074.htm#SECT092">ARepWithCharacter</a> are
concerned with the evaluation of an arep at a point, tests for
equivalence and irreducibility, construction of an arep
with given character etc., sections <a href="chap074.htm#SECT094">Converting AReps</a> --
<a href="chap074.htm#SECT099">MatARepARep</a> deal with the conversion of areps to areps 
of type <code>"perm", "mon", "mat"</code>. 
Sections <a href="chap074.htm#SECT100">Higher Functions for AReps</a> -- <a href="chap074.htm#SECT123">DecompositionMonRep</a>
provide function for the computation of the intertwining space
of areps and a plenty of functions for monomial areps. The
most important function here is <code>DecompositionMonRep</code>
(see <a href="chap074.htm#SECT123">DecompositionMonRep</a>) performing the decomposition of 
a monomial arep including the computation of a highly
structured decomposition matrix. 
<P>
The basic functions concerning areps are implemented in the file
<code>"arep/lib/arep.g"</code>, the higher functions in
<code>"arep/lib/arepfcts.g"</code>.
<P>
For details on constructive representation theory and the theoretical
background of the higher functions please refer to <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>.
<P><A NAME="SECT067"><h2>74.67 GroupWithGenerators</h2></a>
<P><P><P>
<code>GroupWithGenerators( <var>G</var> )</code>
<P>
Let <var>G</var> be a group. <code>GroupWithGenerators</code> returns <var>G</var> with the 
field <code><var>G</var>.theGenerators</code> being set to a fixed non-empty generating
set of <var>G</var>. This function is created because <strong>GAP3</strong> has the freedom 
to manipulate the generators given to construct a group.
Based on the list <code><var>G</var>.theGenerators</code> areps can be 
constructed, e.g. by the images on that list 
(<code>ARepByImages</code>, <a href="chap074.htm#SECT073">ARepByImages</a>). If an arep for a group <var>G</var> 
is constructed with the field <code><var>G</var>.theGenerators</code> unbound a
warning is signaled and the field is set.
<P>
<pre>    gap> G := Group( (1,2) );
    Group( (1,2) )
    gap> GroupWithGenerators(G);
    Group( (1,2) )
    gap> G.theGenerators;
    [ (1,2) ]
    gap> G := Group( () );
    Group( () )
    gap> GroupWithGenerators(G);
    Group( () )
    gap> G.theGenerators;
    [ () ]
    gap> G.generators;
    [  ] </pre>
<P>
<code>GroupWithGenerators( <var>list</var> )</code>
<P>
<code>GroupWithGenerators</code> returns the group <var>G</var> generated by the elements
in <var>list</var>. The field <code><var>G</var>.theGenerators</code> is set to <var>list</var>. 
For the reason of this function see above.
<P>
<pre>    gap> G := GroupWithGenerators( [ (), (1,2), (1,2,3) ] );
    Group( (1,2), (1,2,3) )
    gap> G.theGenerators;
    [ (), (1,2), (1,2,3) ]
    gap> G.generators;
    [ (1,2), (1,2,3) ] </pre>
<P><A NAME="SECT068"><h2>74.68 TrivialPermARep</h2></a>
<P><P><P>
<code>TrivialPermARep( <var>G</var> )</code><BR> 
<code>TrivialPermARep( <var>G</var>, <var>d</var> )</code><BR> 
<code>TrivialPermARep( <var>G</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>TrivialPermARep( <var>G</var>, <var>d</var>, <var>field</var> )</code>
<P>
<code>TrivialPermARep</code> returns an arep of type <code>"perm"</code> representing 
the one representation of the group <var>G</var> of degree <var>d</var>. The default
degree is 1.
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the one representation of arbitrary 
characteristic. The default characteristic is zero.
<P>
<pre>    gap> G := GroupWithGenerators( [(1,2), (3,4)] ); 
    Group( (1,2), (3,4) )
    gap> TrivialPermARep(G, 2, 3);
    TrivialPermARep( GroupWithGenerators( [ (1,2), (3,4) ] ), 2, GF(3) )
    gap> G := GroupWithGenerators( [(1,2), (3,4)] );
    Group( (1,2), (3,4) )
    gap> R := TrivialPermARep(G, 2, 3);
    TrivialPermARep( GroupWithGenerators( [ (1,2), (3,4) ] ), 2, GF(3) )
    gap> R.degree;
    2
    gap> R.char;
    3 </pre>
<P><A NAME="SECT069"><h2>74.69 TrivialMonARep</h2></a>
<P><P><P>
<code>TrivialMonARep( <var>G</var> )</code><BR> 
<code>TrivialMonARep( <var>G</var>, <var>d</var> )</code><BR> 
<code>TrivialMonARep( <var>G</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>TrivialMonARep( <var>G</var>, <var>d</var>, <var>field</var> )</code>
<P>
<code>TrivialMonARep</code> returns an arep of type <code>"mon"</code> representing 
the one representation of the group <var>G</var> of degree <var>d</var>. The default
degree is 1.
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the one representation of arbitrary 
characteristic. The default characteristic is zero.
<P>
<pre>    gap> G := GroupWithGenerators( [(1,2), (3,4)] );
    Group( (1,2), (3,4) )
    gap> R := TrivialMonARep(G, 2);    
    TrivialMonARep( GroupWithGenerators( [ (1,2), (3,4) ] ), 2 )
    gap> R.theImages;
    [ Mon( (), 2 ), Mon( (), 2 ) ] </pre>
<P><A NAME="SECT070"><h2>74.70 TrivialMatARep</h2></a>
<P><P><P>
<code>TrivialMatARep( <var>G</var> )</code><BR> 
<code>TrivialMatARep( <var>G</var>, <var>d</var> )</code><BR> 
<code>TrivialMatARep( <var>G</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>TrivialMatARep( <var>G</var>, <var>d</var>, <var>field</var> )</code>
<P>
<code>TrivialMatARep</code> returns an arep of type <code>"mat"</code> representing 
the one representation of the group <var>G</var> of degree <var>d</var>. The default
degree is 1.
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the one representation of arbitrary 
characteristic. The default characteristic is zero.
<P>
<pre>    gap> G := GroupWithGenerators( [(1,2), (3,4)] );
    Group( (1,2), (3,4) )
    gap> R := TrivialMatARep(G);   
    TrivialMatARep( GroupWithGenerators( [ (1,2), (3,4) ] ) )
    gap> R.theImages;
    [ [ [ 1 ] ], [ [ 1 ] ] ] </pre>
<P><A NAME="SECT071"><h2>74.71 RegularARep</h2></a>
<P><P><P>
<code>RegularARep( <var>G</var> )</code><BR> 
<code>RegularARep( <var>G</var>, <var>char</var> )</code><BR> 
<code>RegularARep( <var>G</var>, <var>field</var> )</code>
<P>
<code>RegularARep</code> returns an arep of type <code>"induction"</code> representing
the regular representation of <var>G</var>. The regular representation is 
defined (up to equality) by the induction 
<I>R = (1<sub>{\mathsfE}</sub>\uparrow<sub>T</sub> <var>G</var>)</I> of the trivial representation
(of degree one) of the trivial subgroup <I>\mathsfE</I> of <var>G</var> with 
the transversal <var>T</var> being the ordered list of elements of <var>G</var>.
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied to obtain the regular representation of arbitrary 
characteristic. The default characteristic is zero.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(3));
    Group( (1,3), (2,3) )
    gap> RegularARep(G);
    RegularARep( GroupWithGenerators( [ (1,3), (2,3) ] ) )
    gap> RegularARep(G, GF(2));
    RegularARep( GroupWithGenerators( [ (1,3), (2,3) ] ), GF(2) ) </pre>
<P><A NAME="SECT072"><h2>74.72 NaturalARep</h2></a>
<P><P><P>
<code>NaturalARep( <var>G</var> )</code><BR> 
<code>NaturalARep( <var>G</var>, <var>d</var> )</code><BR> 
<code>NaturalARep( <var>G</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>NaturalARep( <var>G</var>, <var>d</var>, <var>field</var> )</code>
<P>
Let <var>G</var> be a mongroup or a matrix group (for mons see <a href="chap074.htm#SECT002">Mons</a>). 
<code>NaturalARep</code> returns an arep of type <code>"mon"</code> or <code>"mat"</code> resp. 
representing the representation given by <var>G</var>, 
which means that <var>G</var> is taken as a representation of itself.
<P>
For a permutation group <var>G</var> the desired degree <var>d</var> of the 
representation has to be supplied. The returned arep is of 
type <code>"perm"</code>. If <var>d</var> is smaller than the 
largest moved point of <var>G</var> an error is signaled. 
As optional parameter a characteristic <var>char</var> or a <var>field</var> 
can be supplied (if <var>G</var> is a permutation group).
Note that a mongroup or a matrix group as source of an arep
slows down most of the calculations with it.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2), (1,2,3) ] );
    Group( (1,2), (1,2,3) )
    gap> R := NaturalARep(G, 4);
    NaturalARep( GroupWithGenerators( [ (1,2), (1,2,3) ] ), 4 )
    gap> R.theImages;
    [ (1,2), (1,2,3) ]
    gap> R.degree;
    4
    gap> G := GroupWithGenerators( [ Mon( (1,2), [E(4), 1] ) ] );
    Group( Mon(
      (1,2),
      [ E(4), 1 ]
    ) )
    gap> NaturalARep(G);
    NaturalARep( 
      GroupWithGenerators( [ Mon(
          (1,2),
          [ E(4), 1 ]
        ) ] ) ) </pre>
<P><A NAME="SECT073"><h2>74.73 ARepByImages</h2></a>
<P><P><P>
<code>ARepByImages( <var>G</var>, <var>list</var> )</code><BR> 
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>hint</var> )</code>
<P>
<P>
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>d</var> )</code><BR> 
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>d</var>, <var>hint</var> )</code><BR> 
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>d</var>, <var>field</var> )</code><BR> 
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>d</var>, <var>char</var>, <var>hint</var> )</code><BR> 
<code>ARepByImages( <var>G</var>, <var>list</var>, <var>d</var>, <var>field</var>, <var>hint</var> )</code>
<P>
<code>ARepByImages</code> allows to construct an arep of the group <var>G</var> 
by supplying the <var>list</var> of images on the list <code><var>G</var>.theGenerators</code>.
<P>
Let <var>list</var> contain mons (see <a href="chap074.htm#SECT002">Mons</a>). <code>ARepByImages</code> returns an arep 
of type <code>"mon"</code> defined by mapping <code><var>G</var>.theGenerators</code> 
elementwise onto <var>list</var>.
<P>
Let <var>list</var> contain matrices. <code>ARepByImages</code> returns an arep 
of type <code>"mat"</code> defined by mapping <code><var>G</var>.theGenerators</code> 
elementwise onto <var>list</var>.
<P>
Let <var>list</var> contain permutations. <code>ARepByImages</code> returns an arep 
of type <code>"perm"</code> and degree <var>d</var> defined by mapping <code><var>G</var>.theGenerators</code> 
elementwise onto <var>list</var>. If <var>d</var> is smaller than the 
largest moved point of <var>G</var> an error is signaled.
As optional parameter a characteristic 
<var>char</var> or a <var>field</var> can be supplied to obtain an arep of arbitrary
characteristic.
<P>
In all cases the <var>hint</var> <code>"hom"</code> or <code>"faithful"</code> can be supplied to 
indicate that the list of images does define a homomorphism or 
even a faithful homomorphism respectively. 
If no hint is supplied it is checked
whether the list of images defines a homomorphism.
<P>
<pre>    gap> G := GroupWithGenerators( [(1,2), (1,2,3)] );
    Group( (1,2), (1,2,3) )
    gap> ARepByImages(G, [ Mon( [-1] ), Mon( [1] ) ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2), (1,2,3) ] ),
      [ Mon( [ -1 ] ), Mon( (), 1 ) ],
      "hom"
    )
    gap> L := [ [ [Z(2), Z(2)], [0*Z(2), Z(2)] ], IdentityMat(2, GF(2)) ];
    [ [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ], 
      [ [ Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0 ] ] ]
    gap> ARepByImages(G, L);
    ARepByImages(
      GroupWithGenerators( [ (1,2), (1,2,3) ] ),
      [ [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ],
        [ [ Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0 ] ]
      ],
      GF(2),
      "hom"
    )
    gap> ARepByImages(G, [ (1,2), () ], 3);
    ARepByImages(
      GroupWithGenerators( [ (1,2), (1,2,3) ] ),
      [ (1,2), () ],
      3, # degree
      "hom"
    )
    gap> ARepByImages(G, [ (1,2), () ], 3, "hom");
    ARepByImages(
      GroupWithGenerators( [ (1,2), (1,2,3) ] ),
      [ (1,2), () ],
      3, # degree
      "hom"
    ) </pre>
<P><A NAME="SECT074"><h2>74.74 ARepByHom</h2></a>
<P><P><P>
<code>ARepByHom( <var>hom</var> )</code>
<P>
<P>
<code>ARepByHom( <var>hom</var>, <var>d</var> )</code><BR> 
<code>ARepByHom( <var>hom</var>, <var>d</var>, <var>char</var> )</code><BR> 
<code>ARepByHom( <var>hom</var>, <var>d</var>, <var>char</var> )</code>
<P>
Let <var>hom</var> be a homomorphism of a group into a mongroup. 
<code>ARepByHom</code> returns an arep of type <code>"mon"</code> corresponding
to <var>hom</var>.
<P>
Let <var>hom</var> be a homomorphism of a group into a matrix group. 
<code>ARepByHom</code> returns an arep of type <code>"mat"</code> corresponding
to <var>hom</var>.
<P>
Let <var>hom</var> be a homomorphism of a group into a permutation group 
and <var>d</var> a positive integer.
<code>ARepByHom</code> returns an arep of type <code>"perm"</code> and degree <var>d</var> 
corresponding to <var>hom</var>. If <var>d</var> is smaller than the largest moved
point of <code><var>hom</var>.range</code> an error is signaled. As optional parameter 
a characteristic <var>char</var> or a <var>field</var> can be supplied to obtain an 
arep of arbitrary characteristic.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4));
    Group( (1,4), (2,4), (3,4) )
    gap> phi := IdentityMapping(G);
    IdentityMapping( Group( (1,4), (2,4), (3,4) ) )
    gap> ARepByHom(phi, 4);
    NaturalARep( GroupWithGenerators( [ (1,4), (2,4), (3,4) ] ), 4 )
    gap> H := GroupWithGenerators( [ Mon( [-1] ) ] );
    Group( Mon( [ -1 ] ) )
    gap> psi := 
    > GroupHomomorphismByImages(G, H, G.generators, [H.1, H.1, H.1]);
    GroupHomomorphismByImages( 
      Group( (1,4), (2,4), (3,4) ), 
      Group( Mon( [ -1 ] ) ), 
      [ (1,4), (2,4), (3,4) ], 
      [ Mon( [ -1 ] ), Mon( [ -1 ] ), Mon( [ -1 ] ) ] )
    gap> ARepByHom(psi);
    ARepByImages(
      GroupWithGenerators( [ (1,4), (2,4), (3,4) ] ),
      [ Mon( [ -1 ] ),
        Mon( [ -1 ] ),
        Mon( [ -1 ] )
      ],
      "hom"
    ) </pre>
<P><A NAME="SECT075"><h2>74.75 ARepByCharacter</h2></a>
<P><P><P>
<code>ARepByCharacter( <var>chi</var> )</code>
<P>
Let <var>chi</var> be a onedimensional character of a group. 
<code>ARepByCharacter</code> returns a onedimensional arep of 
type <code>"mon"</code> given by <var>chi</var>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> L := Irr(G);
    [ Character( Group( (1,2) ), [ 1, 1 ] ), 
      Character( Group( (1,2) ), [ 1, -1 ] ) ]
    gap> ARepByCharacter( L[2] );
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ Mon( [ -1 ] ) ],
      "hom"
    ) </pre>
<P><A NAME="SECT076"><h2>74.76 ConjugateARep</h2></a>
<P><P><P>
<code>ConjugateARep( <var>R</var>, <var>A</var> )</code>&emsp; or&emsp; <code><var>R</var> ^ <var>A</var></code><BR> 
<code>ConjugateARep( <var>R</var>, <var>A</var>, <var>hint</var> )</code>
<P>
Let <var>R</var> be an arep and <var>A</var> an amat (see <a href="chap074.htm#SECT022">AMats</a>). 
<code>ConjugateARep</code> returns an arep of type <code>"conjugate"</code> 
representing the conjugated representation 
<I>&lt;R&gt;<sup><var>A</var></sup>: x&rarr; A<sup>-1</sup>. R(x). A</I>. The amat
is tested for invertibility if the optional <var>hint</var> 
<code>"invertible"</code> is not supplied. <var>R</var> and <var>A</var> must be compatible 
in size and characteristic otherwise an error is signaled.
Note that <var>R</var> and <var>A</var> can be accessed in the fields <code>.rep</code>
and <code>.conjugation</code> of the result.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4));
    Group( (1,4), (2,4), (3,4) )
    gap> R := NaturalARep(G, 4);
    NaturalARep( GroupWithGenerators( [ (1,4), (2,4), (3,4) ] ), 4 )
    gap> A := AMatPerm( (1,2,3,4), 4 );
    AMatPerm((1,2,3,4), 4)
    gap> R ^ A;
    ConjugateARep(
      NaturalARep( GroupWithGenerators( [ (1,4), (2,4), (3,4) ] ), 4 ),
      AMatPerm((1,2,3,4), 4)
    ) </pre>
<P><A NAME="SECT077"><h2>74.77 DirectSumARep</h2></a>
<P><P><P>
<code>DirectSumARep( <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> )</code>
<P>
<code>DirectSumARep</code> returns an arep of type <code>"directSum"</code> 
representing the direct sum <I>&lt;R<sub>1</sub>&gt;&oplus;...&oplus; <var>R_k</var></I> 
of the areps <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var>, 
which must have common source and characteristic otherwise an error is
signaled. 
<P>
The direct sum <I>&lt;R&gt; = <var>R_1</var>&oplus;...&oplus; <var>R_k</var></I> 
of representations is defined as 
<I>x&rarr; <var>R_1</var>(x)&oplus;...&oplus; <var>R_k</var>(x)</I>.
<P>
Note that the summands <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> can be accessed 
in the field <code>.summands</code> of the result.
<P>
<pre>    gap> G := GroupWithGenerators( [(1,2,3,4), (1,3)] );
    Group( (1,2,3,4), (1,3) )
    gap> R1 := RegularARep(G);
    RegularARep( GroupWithGenerators( [ (1,2,3,4), (1,3) ] ) )
    gap> R2 := ARepByImages(G, [ [[1]], [[-1]] ]);
    ARepByImages(
      GroupWithGenerators( [ (1,2,3,4), (1,3) ] ),
      [ [ [ 1 ] ], [ [ -1 ] ] ],
      "hom"
    )
    gap> DirectSumARep(R1, R2);
    DirectSumARep(
      RegularARep( GroupWithGenerators( [ (1,2,3,4), (1,3) ] ) ),
      ARepByImages(
        GroupWithGenerators( [ (1,2,3,4), (1,3) ] ),
        [ [ [ 1 ] ], [ [ -1 ] ] ],
        "hom"
      )
    ) </pre>
<P>
<code>DirectSumARep( <var>list</var> )</code>
<P>
<code>DirectSumARep</code> returns an arep of type <code>"directSum"</code> representing
the direct sum of the areps in <var>list</var> (see above).
<A NAME="SECT078"><h2>74.78 InnerTensorProductARep</h2></a>
<P><P><P>
<code>InnerTensorProductARep( <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> )</code>
<P>
<code>InnerTensorProductARep</code> returns an arep of type 
<code>"innerTensorProduct"</code> representing the inner tensor product 
<I>&lt;R&gt; = <var>R_1</var>&otimes;...&otimes; <var>R_k</var></I> of the areps <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var>, 
which must have common source and characteristic otherwise an error is
signaled. 
<P>
The inner tensor product <I>&lt;R&gt; = <var>R_1</var>&otimes;...&otimes; <var>R_k</var></I> 
of representations is
defined as <I>x&rarr; <var>R_1</var>(x)&otimes;...&otimes; <var>R_k</var>(x)</I>. Note 
that the inner tensor product yields a representation of the 
same source (in contrast to the outer tensor product, see 
<a href="chap074.htm#SECT079">OuterTensorProductARep</a>).
<P>
Note that the tensor factors <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> can be accessed 
in the field <code>.factors</code> of the result.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2), (3,4) ] );
    Group( (1,2), (3,4) )
    gap> R1 := ARepByImages(G, [ Mon( (1,2), 2 ), Mon( [-1, -1] ) ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2), (3,4) ] ),
      [ Mon( (1,2), 2 ), Mon( [ -1, -1 ] ) ],
      "hom"
    )
    gap> R2 := NaturalARep(G, 5);
    NaturalARep( GroupWithGenerators( [ (1,2), (3,4) ] ), 5 )
    gap> InnerTensorProductARep(R1, R2);
    InnerTensorProductARep(
      ARepByImages(
        GroupWithGenerators( [ (1,2), (3,4) ] ),
        [ Mon( (1,2), 2 ), Mon( [ -1, -1 ] ) ],
        "hom"
      ),
      NaturalARep( GroupWithGenerators( [ (1,2), (3,4) ] ), 5 )
    ) </pre>
<P>
<code>InnerTensorProductARep( <var>list</var> )</code>
<P>
<code>InnerTensorProductARep</code> returns an arep of type 
<code>"innerTensorProduct"</code> representing
the inner tensor product of the areps in <var>list</var> (see above).
<A NAME="SECT079"><h2>74.79 OuterTensorProductARep</h2></a>
<P><P><P>
<code>OuterTensorProductARep( <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> )</code><BR> 
<code>OuterTensorProductARep( <var>G</var>, <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> )</code>
<P>
<code>OuterTensorProductARep</code> returns an arep of type 
<code>"outerTensorProduct"</code> representing the outer tensor product 
<I>&lt;R&gt; = <var>R_1</var># ...# <var>R_k</var></I> of the areps <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var>, 
which must have common characteristic otherwise an error is 
signaled. 
<P>
The outer tensor product <I>&lt;R&gt; = <var>R_1</var># ...# <var>R_k</var></I> of 
representations is
defined as <I>x&rarr; <var>R_1</var>(x)&otimes;...&otimes; <var>R_k</var>(x)</I>.
Note that the outer tensor product of representations 
is a representation of the direct product of the sources 
(in contrast to the inner tensor product, see <a href="chap074.htm#SECT078">InnerTensorProductARep</a>).
<P>
Using the first version <code>OuterTensorProductARep</code> returns an arep <var>R</var> with
<code><var>R</var>.source = DirectProduct(<var><I>R<sub>1</sub></I></var>.source, ..., <var><I>R<sub>k</sub></I></var>.source)</code> 
using the <strong>GAP3</strong> function <code>DirectProduct</code>. In the second version
the returned arep has as source the group <var>G</var> which must be the inner 
direct product <I>&lt;G&gt; = <var>R_1</var><code>.source</code>&times;...&times;<var>R_k</var><code>.source</code></I>. 
This property is not checked. 
<P>
Note that the tensor factors <var><I>R<sub>1</sub></I></var>, ..., <var><I>R<sub>k</sub></I></var> can be accessed 
in the field <code>.factors</code> of the result.
<P>
<pre>    gap> G1 := GroupWithGenerators(DihedralGroup(8));
    Group( (1,2,3,4), (2,4) )
    gap> G2 := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R1 := NaturalARep(G1, 4);
    NaturalARep( GroupWithGenerators( [ (1,2,3,4), (2,4) ] ), 4 )
    gap> R2 := ARepByImages(G2, [ [[-1]] ]);
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ [ [ -1 ] ] ],
      "hom"
    )
    gap> OuterTensorProductARep(R1, R2);
    OuterTensorProductARep(
      NaturalARep( GroupWithGenerators( [ (1,2,3,4), (2,4) ] ), 4 ),
      ARepByImages(
        GroupWithGenerators( [ (1,2) ] ),
        [ [ [ -1 ] ] ],
        "hom"
      )
    ) </pre>
<P><A NAME="SECT080"><h2>74.80 RestrictionARep</h2></a>
<P><P><P>
<code>RestrictionARep( <var>R</var>, <var>H</var> )</code>
<P>
<code>RestrictionARep</code> returns an arep of type <code>"restriction"</code> 
representing the restriction of the arep <var>R</var> to 
the subgroup <var>H</var> of <code><var>R</var>.source</code>. Here, ``subgroup" means, 
that all elements of <var>H</var> are contained in <code><var>R</var>.source</code>.
<P>
The restriction <I>&lt;R&gt;\downarrow <var>H</var></I> of a representation <var>R</var> 
to a subgroup <var>H</var> is defined by <I>x&rarr; <var>R</var>(x), x&isin; <var>H</var></I>.
<P>
Note that <var>R</var> can be accessed in the field <code>.rep</code> of the result.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4));
    Group( (1,4), (2,4), (3,4) )
    gap> H := GroupWithGenerators(AlternatingGroup(4));
    Group( (1,2,4), (2,3,4) )
    gap> R := NaturalARep(G, 4);
    NaturalARep( GroupWithGenerators( [ (1,4), (2,4), (3,4) ] ), 4 )
    gap> RestrictionARep(R, H);
    RestrictionARep(
      NaturalARep( GroupWithGenerators( [ (1,4), (2,4), (3,4) ] ), 4 ),
      GroupWithGenerators( [ (1,2,4), (2,3,4) ] )
    ) </pre>
<P><A NAME="SECT081"><h2>74.81 InductionARep</h2></a>
<P><P><P>
<code>InductionARep( <var>R</var>, <var>G</var> )</code><BR> 
<code>InductionARep( <var>R</var>, <var>G</var>, <var>T</var> )</code>
<P>
<code>InductionARep</code> returns an arep of type <code>"induction"</code> 
representing the induction of the arep <var>R</var> to 
the supergroup <var>G</var> with the transversal <var>T</var> of the residue classes
<code><var>R</var>.source</code><I> \  <var>G</var></I>. Here, ``supergroup" means 
that all elements of <code><var>R</var>.source</code> are contained in <var>G</var>. If no
transversal <var>T</var> is supplied one is chosen by the function
<code>RightTransversal</code>. If a transversal <var>T</var> is given it is not checked
to be one.
<P>
The induction <I>&lt;R&gt;\uparrow<sub>T</sub> <var>G</var></I> of a representation <var>R</var> of <var>H</var> to 
a supergroup <var>G</var> with transversal <I>T = {t<sub>1</sub>,...,t<sub>k</sub>}</I> of 
<I>&lt;H&gt; \  <var>G</var></I> is defined by 
<I>x&rarr;[
\dot<var>R</var>(t<sub>i</sub>. x. t<sub>j</sub><sup>-1</sup>)
| i,j&isin;{1,...,k}]</I>, 
where <I>\dot<var>R</var>(y) = <var>R</var>(y)</I> for <I>y&isin; <var>H</var></I> and 0 else.
<P>
Note that <var>R</var> and <var>T</var> can be accessed in the fields 
<code>.rep</code> and <code>.transversal</code> resp. of the result.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3,4), (1,2) ] );
    Group( (1,2,3,4), (1,2) )
    gap> H := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R := ARepByImages(H, [ [[Z(2), Z(2)], [0*Z(2), Z(2)]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ]
      ],
      "hom"
    )
    gap> R.name := "R";
    "R"
    gap> InductionARep(R, G);
    InductionARep(
      R,
      GroupWithGenerators( [ (1,2,3,4), (1,2) ] ),
      [ (), (3,4), (2,3), (2,3,4), (2,4,3), (2,4), (1,4,3), 
      (1,4), (1,4,2,3), (1,4)(2,3), (1,2,3), (1,2,3,4) ]
    ) </pre>
<P><A NAME="SECT082"><h2>74.82 ExtensionARep</h2></a>
<P><P><P>
<code>ExtensionARep( <var>R</var>, <var>chi</var> )</code>
<P>
Let <var>R</var> be an irreducible arep of characteristic zero and <var>chi</var> a 
character of a supergroup of <code><var>R</var>.source</code> which extends the 
character of <var>R</var>. <code>ExtensionARep</code> returns an arep of type 
<code>"extension"</code> representing an extension of <var>R</var> to 
<code><var>chi</var>.source</code>. Here, ``supergroup" means 
that all elements of <code><var>R</var>.source</code> are contained in <var>G</var>.
The extension is evaluated using Minkwitz's formula 
(see <A href="biblio.htm#Min96"><cite>Min96</cite></a>).
<P>
Note that <var>R</var> and <var>chi</var> can be accessed in the fields 
<code>.rep</code> and <code>.character</code> of the result.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3,4), (1,2) ] );
    Group( (1,2,3,4), (1,2) )
    gap> H := GroupWithGenerators(AlternatingGroup(4));
    Group( (1,2,4), (2,3,4) )
    gap> G.name := "S4";
    "S4"
    gap> H.name := "A4";
    "A4"
    gap> R := ARepByImages(H, [ Mon( (1,2,3), [ 1, -1, -1 ] ),
    > Mon( (1,2,3), 3 ) ] );
    ARepByImages(
      A4,
      [ Mon( (1,2,3), [ 1, -1, -1 ] ),
        Mon( (1,2,3), 3 )
      ],
      "hom"
    )
    gap> L := Irr(G);
    [ Character( Group( (1,2,3,4), (1,2) ), [ 1, 1, 1, 1, 1 ] ), 
      Character( Group( (1,2,3,4), (1,2) ), [ 1, -1, 1, 1, -1 ] ), 
      Character( Group( (1,2,3,4), (1,2) ), [ 2, 0, -1, 2, 0 ] ), 
      Character( Group( (1,2,3,4), (1,2) ), [ 3, -1, 0, -1, 1 ] ), 
      Character( Group( (1,2,3,4), (1,2) ), [ 3, 1, 0, -1, -1 ] ) ]
    gap> ExtensionARep(R, L[4]);
    ExtensionARep(
      ARepByImages(
        A4,
        [ Mon(
            (1,2,3),
            [ 1, -1, -1 ]
          ),
          Mon( (1,2,3), 3 )
        ],
        "hom"
      ),
      Character( Group( (1,2,3,4), (1,2) ), [ 3, -1, 0, -1, 1 ] )
    ) </pre>
<P><A NAME="SECT083"><h2>74.83 GaloisConjugateARep</h2></a>
<P><P><P>
<code>GaloisConjugateARep( <var>R</var>, <var>aut</var> )</code><BR> 
<code>GaloisConjugateARep( <var>R</var>, <var>k</var> )</code>
<P>
<code>GaloisConjugateARep</code> returns an arep of type <code>"galoisConjugate"</code> 
representing the Galois conjugate of the arep <var>A</var>.
The conjugating automorphism may either be a field automorphism <var>aut</var>
or an integer <var>k</var> specifying the automorphism <code>x -> GaloisCyc(x, <var>k</var>)</code>
in the case characteristic = 0 or <code>x -> x^(FrobeniusAut^<var>k</var>)</code> 
in the case characteristic = <I>p</I> prime.
<P>
The Galois conjugate of a representation <var>R</var> with a field 
automorphism <var>aut</var> is defined by <I>x&rarr; <var>R</var>(x)<sup><var>aut</var></sup> </I>.
<P>
Note that <var>R</var> and <var>aut</var> can be accessed 
in the fields <code>.rep</code> and <code>.galoisAut</code> resp. of the result.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3) ] );
    Group( (1,2,3) )
    gap> R := ARepByImages(G, [ [[E(3)]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2,3) ] ),
      [ [ [ E(3) ] ]
      ],
      "hom"
    )
    gap> GaloisConjugateARep(R, -1);
    GaloisConjugateARep(
      ARepByImages(
        GroupWithGenerators( [ (1,2,3) ] ),
        [ [ [ E(3) ] ]
        ],
        "hom"
      ),
      -1
    ) </pre>
<P><A NAME="SECT084"><h2>74.84 Basic Functions for AReps</h2></a>
<P><P><P>
The following sections describe basic functions for areps like e.g.
testing irreducibility and equivalence, evaluating an arep at a
group element, computing kernel and character, and constructing an arep
with given character.
<A NAME="SECT085"><h2>74.85 Comparison of AReps</h2></a>
<P><P>
<A name = "I6"></a>

<A name = "I7"></a>

<P>
<code><var><I>R<sub>1</sub></I></var> = <var><I>R<sub>2</sub></I></var></code> <BR> 
<code><var><I>R<sub>1</sub></I></var> <> <var><I>R<sub>2</sub></I></var></code>
<P>
The equality operator <code>=</code> evaluates to <code>true</code>  if the areps <var><I>R<sub>1</sub></I></var>
and <var><I>R<sub>2</sub></I></var> are equal and  to <code>false</code> otherwise. The  inequality operator
<code><></code> evaluates to <code>true</code> if the amats <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> are not equal
and to <code>false</code> otherwise.
<P>
Two areps are equal iff they define the same representation. 
This means that first the sources have to be equal, i.e. 
<code><var><I>R<sub>1</sub></I></var>.source = <var><I>R<sub>2</sub></I></var>.source</code> and second the images are 
pointwise equal.
<P>
<P>
<code><var><I>R<sub>1</sub></I></var> < <var><I>R<sub>2</sub></I></var></code> <BR> 
<code><var><I>R<sub>1</sub></I></var> <= <var><I>R<sub>2</sub></I></var></code> <BR> 
<code><var><I>R<sub>1</sub></I></var> >= <var><I>R<sub>2</sub></I></var></code> <BR> 
<code><var><I>R<sub>1</sub></I></var> > <var><I>R<sub>2</sub></I></var></code>
<P>
The operators <code><</code>, <code><=</code>, <code>>=</code>, and <code>></code> evaluate to <code>true</code> if the 
arep <var><I>R<sub>1</sub></I></var> is strictly less than, less than or equal to, greater than or
equal to, and strictly greater than the arep <var><I>R<sub>2</sub></I></var>. 
<P>
The ordering of areps is defined via the ordering of records.
<P><A NAME="SECT086"><h2>74.86 ImageARep</h2></a>
<P><P><P>
<code>ImageARep( <var>x</var>, <var>R</var> )</code>&emsp; or&emsp;<code><var>x</var> ^ <var>R</var></code>
<P>
Let <var>R</var> be an arep and <var>x</var> a group element of <code><var>R</var>.source</code>.
<code>ImageARep</code> returns the image of <var>x</var> under <var>R</var> as an amat 
(see <a href="chap074.htm#SECT022">AMats</a>). For conversion of amats see <a href="chap074.htm#SECT048">PermAMat</a> -- <a href="chap074.htm#SECT050">MatAMat</a>.
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(8, 5));
    Q8
    gap> R := RegularARep(G);
    RegularARep( Q8 )
    gap> x := Random(G);
    c
    gap> ImageARep(x, R);
    TensorProductAMat(
      AMatPerm((1,2)(3,4)(5,6)(7,8), 8),
      IdentityPermAMat(1)
    ) *
    DirectSumAMat(
      IdentityPermAMat(1),
      IdentityPermAMat(1),
      IdentityPermAMat(1),
      IdentityPermAMat(1),
      IdentityPermAMat(1),
      IdentityPermAMat(1),
      IdentityPermAMat(1),
      IdentityPermAMat(1)
    )
    gap> PermAMat(last);
    (1,2)(3,4)(5,6)(7,8) </pre>
<P>
<code>ImageARep( <var>list</var>, <var>R</var> )</code>
<P>
<code>ImageARep</code> returns the list of images of the group elements in 
<var>list</var> under the arep <var>R</var> (see above). The images are amats 
(see <a href="chap074.htm#SECT022">AMats</a>). For conversion of amats see <a href="chap074.htm#SECT048">PermAMat</a> -- <a href="chap074.htm#SECT050">MatAMat</a>.
<P><A NAME="SECT087"><h2>74.87 IsEquivalentARep</h2></a>
<P><P><P>
<code>IsEquivalentARep( <var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var> )</code>
<P>
Let <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> be two areps with Maschke condition, 
i.e. <code>Size( <var><I>R<sub>i</sub></I></var>.source ) mod <var><I>R<sub>i</sub></I></var>.char</code> <I> &ne; 0, i = 1,2</I>.
<code>IsEquivalentARep</code> returns <code>true</code> if the areps <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> 
define equivalent representations and <code>false</code> otherwise. 
Two representations (with Maschke condition) are equivalent iff they 
have the same character.
<var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> must have identical source 
(i.e. <code>IsIdentical(<var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var>) = true</code>) 
and characteristic otherwise an error is signaled.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3) ] );
    Group( (1,2,3) )
    gap> R1 := NaturalARep(G, 3);
    NaturalARep( GroupWithGenerators( [ (1,2,3) ] ), 3 )
    gap> R2 := RegularARep(G);
    RegularARep( GroupWithGenerators( [ (1,2,3) ] ) )
    gap> IsEquivalentARep(R1, R2);
    true </pre>
<P><A NAME="SECT088"><h2>74.88 CharacterARep</h2></a>
<P><P><P>
<code>CharacterARep( <var>R</var> )</code>
<P>
<code>CharacterARep</code> returns the character of the arep <var>R</var>.
Since <strong>GAP3</strong> only provides characters of characteristic
zero, <code>CharacterARep</code> only works in this case and will 
signal an error otherwise.
Note that <code>CharacterARep</code> sets and tests <code><var>R</var>.character</code>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2), (3,4) ] );
    Group( (1,2), (3,4) )
    gap> CharacterARep(RegularARep(G));
    Character( Group( (1,2), (3,4) ), [ 4, 0, 0, 0 ] ) </pre>
<P><A NAME="SECT089"><h2>74.89 IsIrreducibleARep</h2></a>
<P><P><P>
<code>IsIrreducibleARep( <var>R</var> )</code>
<P>
Let <var>R</var> an arep of characteristic zero. <code>IsIrreducibleARep</code> returns
<code>true</code> if <var>R</var> represents an irreducible arep and <code>false</code>
otherwise. To determine irreducibility the character is used, 
which is the reason for the condition characteristic = 0 
(see <a href="chap074.htm#SECT088">CharacterARep</a>).
Note that <code>IsIrreducibleARep</code> sets and tests <code><var>R</var>.isIrreducible</code>.
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(12, 5));
    A4
    gap> L := Irr(G);
    [ Character( A4, [ 1, 1, 1, 1 ] ), 
      Character( A4, [ 1, 1, E(3), E(3)^2 ] ), 
      Character( A4, [ 1, 1, E(3)^2, E(3) ] ), 
      Character( A4, [ 3, -1, 0, 0 ] ) ]
    gap> R := ARepByCharacter(L[2]);
    ARepByImages(
      A4,
      [ Mon( [ E(3) ] ),
        Mon( (), 1 ),
        Mon( (), 1 )
      ],
      "hom"
    )
    gap> IsIrreducibleARep(R);
    true 
    gap> IsIrreducibleARep(RegularARep(G));
    false </pre>
<P><A NAME="SECT090"><h2>74.90 KernelARep</h2></a>
<P><P><P>
<code>KernelARep( <var>R</var> )</code>
<P>
<code>KernelARep</code> returns the kernel of the arep <var>R</var>.
Note that <code>KernelARep</code> sets and tests <code><var>R</var>.kernel</code>.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(3));
    Group( (1,3), (2,3) )
    gap> R := ARepByImages(G, [ [[-1]], [[-1]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,3), (2,3) ] ),
      [ [ [ -1 ] ],
        [ [ -1 ] ]
      ],
      "hom"
    )
    gap> KernelARep(R);
    Subgroup( Group( (1,3), (2,3) ), [ (1,3,2) ] ) </pre>
<P><A NAME="SECT091"><h2>74.91 IsFaithfulARep</h2></a>
<P><P><P>
<code>IsFaithfulARep( <var>R</var> )</code>
<P>
<code>IsFaithfulARep</code> returns <code>true</code> if the arep <var>R</var> represents a faithful 
representation and <code>false</code> otherwise.
Note that <code>IsFaithfulARep</code> sets and tests <code><var>R</var>.isFaithful</code>.
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(16, 7));
    Q8x2
    gap> IsFaithfulARep(TrivialPermARep(G));
    false
    gap> IsFaithfulARep(RegularARep(G));
    true </pre>
<P><A NAME="SECT092"><h2>74.92 ARepWithCharacter</h2></a>
<P><P><P>
<code>ARepWithCharacter( <var>chi</var> )</code>
<P>
<code>ARepWithCharacter</code> constructs an arep with character <var>chi</var>. 
The group <code><var>chi</var>.source</code> must be solvable otherwise an error is
signaled. Note that the function returns a monomial arep 
if this is possible.
<P>
Attention: <code>ARepWithCharacter</code> only works in <strong>GAP3</strong> 3.4.4 after
bugfix 9!
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(8, 5));
    Q8
    gap> L := Irr(G);
    [ Character( Q8, [ 1, 1, 1, 1, 1 ] ), 
      Character( Q8, [ 1, 1, -1, 1, -1 ] ), 
      Character( Q8, [ 1, 1, 1, -1, -1 ] ), 
      Character( Q8, [ 1, 1, -1, -1, 1 ] ), 
      Character( Q8, [ 2, -2, 0, 0, 0 ] ) ]
    gap> MonARepARep(ARepWithCharacter(L[5]));
    ARepByImages(
      Q8,
      [ Mon(
          (1,2),
          [ -1, 1 ]
        ),
        Mon( [ E(4), -E(4) ] ),
        Mon( [ -1, -1 ] )
      ],
      "hom"
    ) </pre>
<P><A NAME="SECT093"><h2>74.93 GeneralFourierTransform</h2></a>
<P><P>
<A name = "I8"></a>

<P>
<code>GeneralFourierTransform( <var>G</var> )</code>
<P>
<code>GeneralFourierTransform</code> returns an amat representing 
a Fourier transform over the complex numbers for the 
solvable group <var>G</var>. For an explanation of Fourier transforms
see <A href="biblio.htm#CB93"><cite>CB93</cite></a>. In order to obtain a <em> fast</em> Fourier transform
for <var>G</var> apply the function <code>DecompositionMonRep</code> to any 
regular representation of <var>G</var>.
<P>
Attention: <code>GeneralFourierTransform</code> only works in <strong>GAP3</strong> 3.4.4 after
bugfix 9!
<P>
<pre>    gap> G := SymmetricGroup(3);
    Group( (1,3), (2,3) )
    gap> GeneralFourierTransform(G);
    AMatMat(
      [ [ 1, 1, 1, 1, 1, 1 ], [ 1, -1, -1, 1, 1, -1 ], 
      [ 1, 0, 0, E(3), E(3)^2, 0 ], [ 0, 1, E(3)^2, 0, 0, E(3) ], 
      [ 0, 1, E(3), 0, 0, E(3)^2 ], [ 1, 0, 0, E(3)^2, E(3), 0 ] ],
      "invertible"
    ) ^ -1 </pre>
<P><A NAME="SECT094"><h2>74.94 Converting AReps</h2></a>
<P><P><P>
The following sections describe functions for convertibility and 
conversion of arbitrary areps to areps of type 
<code>"perm"</code>, <code>"mon"</code>, and <code>"mat"</code>. As in <strong> AMat</strong> (see <a href="chap074.htm#SECT022">AMats</a>)
the naming of the functions follows the usual <strong>GAP3</strong>-convention: 
<code>ChalkCheese</code> makes chalk from cheese. The parts in the name 
(chalk, cheese) are: 
<P>
<P>
<center>
\begintabular{l@ -- l}
ARep & an arep of any type<BR> 
PermARep & an arep of type ``perm"<BR> 
MonARep & an arep of type ``mon"<BR> 
MatARep & an arep of type ``mat"
\endtabular
</center>
<P><A NAME="SECT095"><h2>74.95 IsPermRep</h2></a>
<P><P><P>
<code>IsPermRep( <var>R</var> )</code>
<P>
<code>IsPermRep</code> returns <code>true</code> if <var>R</var> represents a permutation 
representation and <code>false</code> otherwise. Note that the name of 
this function is not <code>IsPermARep</code> since <var>R</var> can be an arep 
of any type but represents a permutation representation in 
the mathematical sense (every image is a permutation matrix).
Note that <code>IsPermRep</code> sets and tests <code><var>R</var>.isPermRep</code>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R := ARepByImages(G, [ Mon( [1, -1] ) ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ Mon( [ 1, -1 ] )
      ],
      "hom"
    )
    gap> IsPermRep(ConjugateARep(R, DFTAMat(2)));
    true </pre>
<P><A NAME="SECT096"><h2>74.96 IsMonRep</h2></a>
<P><P><P>
<code>IsMonRep( <var>R</var> )</code>
<P>
<code>IsMonRep</code> returns <code>true</code> if <var>R</var> represents a monomial
representation and <code>false</code> otherwise. Note that the name of 
this function is not <code>IsMonARep</code> since <var>R</var> can be an arep 
of any type but represents a monomial representation in 
the mathematical sense (every image is a monomial matrix).
Note that <code>IsMonRep</code> sets and tests <code><var>R</var>.isMonRep</code>.
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(8, 5));
    Q8
    gap> R := RegularARep(G);
    RegularARep( Q8 )
    gap> IsMonRep(InnerTensorProductARep(R, R));
    true </pre>
<P><A NAME="SECT097"><h2>74.97 PermARepARep</h2></a>
<P><P><P>
<code>PermARepARep( <var>R</var> )</code>
<P>
<code>PermARepARep</code> returns an arep of type <code>"perm"</code> representing 
the same representation as the arep <var>R</var> if possible. Otherwise
<code>false</code> is returned.
Note that <code>PermARepARep</code> sets and tests <code><var>R</var>.permARep</code>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );        
    Group( (1,2) )
    gap> R := ARepByImages(G, [ Mon( [1, -1] ) ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ Mon( [ 1, -1 ] )
      ],
      "hom"
    )
    gap> PermARepARep(ConjugateARep(R, DFTAMat(2)));
    NaturalARep( GroupWithGenerators( [ (1,2) ] ), 2 ) 
    gap> PermARepARep(R);
    false </pre>
<P><A NAME="SECT098"><h2>74.98 MonARepARep</h2></a>
<P><P><P>
<code>MonARepARep( <var>R</var> )</code>
<P>
<code>MonARepARep</code> returns an arep of type <code>"mon"</code> representing 
the same representation as the arep <var>R</var> if possible. Otherwise
<code>false</code> is returned.
Note that <code>MonARepARep</code> sets and tests <code><var>R</var>.monARep</code>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3), (1,2) ] );
    Group( (1,2,3), (1,2) )
    gap> R1 := ARepByImages(G, [ [[1]], [[-1]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2,3), (1,2) ] ),
      [ [ [ 1 ] ],
        [ [ -1 ] ]
      ],
      "hom"
    )
    gap> R2 := NaturalARep(G, 4);
    NaturalARep( GroupWithGenerators( [ (1,2,3), (1,2) ] ), 4 )
    gap> MonARepARep(InnerTensorProductARep(R1, R2));
    ARepByImages(
      GroupWithGenerators( [ (1,2,3), (1,2) ] ),
      [ Mon( (1,2,3), 4 ),
        Mon(
          (1,2),
          [ -1, -1, -1, -1 ]
        )
      ],
      "hom"
    ) </pre>
<P><A NAME="SECT099"><h2>74.99 MatARepARep</h2></a>
<P><P><P>
<code>MatARepARep( <var>R</var> )</code>
<P>
<code>MatARepARep</code> returns an arep of type <code>"mat"</code> representing 
the same representation as the arep <var>R</var>.
Note that <code>MatARepARep</code> sets and tests <code><var>R</var>.matARep</code>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2), (3,4) ] );
    Group( (1,2), (3,4) )
    gap> MatARepARep(RegularARep(G, 3));
    ARepByImages(
      GroupWithGenerators( [ (1,2), (3,4) ] ),
      [ [ [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ], 
          [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ], 
          [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
          [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ] ],
        [ [ 0*Z(3), Z(3)^0, 0*Z(3), 0*Z(3) ], 
          [ Z(3)^0, 0*Z(3), 0*Z(3), 0*Z(3) ], 
          [ 0*Z(3), 0*Z(3), 0*Z(3), Z(3)^0 ], 
          [ 0*Z(3), 0*Z(3), Z(3)^0, 0*Z(3) ] ]
      ],
      "hom"
    ) </pre>
<P><A NAME="SECT100"><h2>74.100 Higher Functions for AReps</h2></a>
<P><P><P>
The following sections describe functions allowing the
structural manipulation of, mainly monomial, areps. The idea is 
to convert a given arep into a mathematical equal (not only equivalent!)
arep having more structure. 
Examples are: converting a transitive monomial arep into 
a conjugated induction (see <a href="chap074.htm#SECT111">TransitiveToInductionMonRep</a>), 
converting an induction into a conjugated
double induction (see <a href="chap074.htm#SECT112">InsertedInductionARep</a>), 
changing the transversal of an induction
(see <a href="chap074.htm#SECT115">TransversalChangeInductionARep</a>), 
decomposing a transitive monomial arep into a conjugated 
outer tensor product 
(see <a href="chap074.htm#SECT116">OuterTensorProductDecompositionMonRep</a>) 
and last but not least decomposing a monomial arep into a 
conjugated sum of irreducibles
(see <a href="chap074.htm#SECT123">DecompositionMonRep</a>).
The latter is one of the most interesting functions
of the package \AREP.
<A NAME="SECT101"><h2>74.101 IsRestrictedCharacter</h2></a>
<P><P><P>
<code>IsRestrictedCharacter( <var>chi</var>, <var>chisub</var> )</code>
<P>
<code>IsRestrictedCharacter</code> returns <code>true</code> if the character <var>chisub</var> 
is a restriction of the character <var>chi</var> to <code><var>chisub</var>.source</code> and 
<code>false</code> otherwise. All elements of <code><var>chisub</var>.source</code> must be 
contained in <code><var>chi</var>.source</code> otherwise an error is signaled.
<P>
<pre>    gap> G := SymmetricGroup(3); G.name := "S3";
    Group( (1,3), (2,3) )
    "S3"
    gap> H := CyclicGroup(3); H.name := "Z3";
    Group( (1,2,3) )
    "Z3"
    gap> L1 := Irr(G);
    [ Character( S3, [ 1, 1, 1 ] ), Character( S3, [ 1, -1, 1 ] ), 
      Character( S3, [ 2, 0, -1 ] ) ]
    gap> L2 := Irr(H);
    [ Character( Z3, [ 1, 1, 1 ] ), Character( Z3, [ 1, E(3), E(3)^2 ] ), 
      Character( Z3, [ 1, E(3)^2, E(3) ] ) ]
    gap> IsRestrictedCharacter(L1[2], L2[1]);
    true </pre>
<P><A NAME="SECT102"><h2>74.102 AllExtendingCharacters</h2></a>
<P><P><P>
<code>AllExtendingCharacters( <var>chi</var>, <var>G</var> )</code>
<P>
<code>AllExtendingCharacters</code> returns the list of all characters 
of <var>G</var> extending <var>chi</var>. All elements of <code><var>chi</var>.source</code> must be 
contained in <var>G</var> otherwise an error is signaled.
<P>
<pre>    gap> H := AlternatingGroup(4); H.name := "A4";
    Group( (1,2,4), (2,3,4) )
    "A4"
    gap> G := SymmetricGroup(4); G.name := "S4";
    Group( (1,4), (2,4), (3,4) )
    "S4"
    gap> L := Irr(H);
    [ Character( A4, [ 1, 1, 1, 1 ] ), 
      Character( A4, [ 1, 1, E(3)^2, E(3) ] ), 
      Character( A4, [ 1, 1, E(3), E(3)^2 ] ), 
      Character( A4, [ 3, -1, 0, 0 ] ) ]
    gap> AllExtendingCharacters(L[4], G);
    [ Character( S4, [ 3, -1, -1, 0, 1 ] ), 
      Character( S4, [ 3, 1, -1, 0, -1 ] ) ] </pre>
<P><A NAME="SECT103"><h2>74.103 OneExtendingCharacter</h2></a>
<P><P><P>
<code>OneExtendingCharacter( <var>chi</var>, <var>G</var> )</code>
<P>
<code>OneExtendingCharacter</code> returns one character 
of <var>G</var> extending <var>chi</var> if possible or returns false otherwise. 
All elements of <code><var>chi</var>.source</code> must be 
contained in <var>G</var> otherwise an error is signaled.
<P>
<pre>    gap> H := Group( (1,3)(2,4) ); H.name := "Z2";
    Group( (1,3)(2,4) )
    "Z2"
    gap> G := Group( (1,2,3,4) ); G.name := "Z4";
    Group( (1,2,3,4) )
    "Z4"
    gap> L := Irr(H);
    [ Character( Z2, [ 1, 1 ] ), Character( Z2, [ 1, -1 ] ) ]
    gap> OneExtendingCharacter(L[2], G);
    Character( Z4, [ 1, E(4), -1, -E(4) ] ) </pre>
<P><A NAME="SECT104"><h2>74.104 IntertwiningSpaceARep</h2></a>
<P><P><P>
<code>IntertwiningSpaceARep( <var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var> )</code>
<P>
<code>IntertwiningSpaceARep</code> returns a list of amats (see <a href="chap074.htm#SECT022">AMats</a>) 
representing a base of the intertwining space <I></i>Int<i>(<var>R_1</var>, <var>R_2</var>)</I>
of the areps <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var>, which must have common source
and characteristic otherwise an error is signaled.
<P>
The intertwining space <I></i>Int<i>(<var>R_1</var>, <var>R_2</var>)</I> of two representations 
<var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> of a group <var>G</var> of the same characteristic
is the vector space of matrices 
<I>{M| R<sub>1</sub>(x). M = M . R<sub>2</sub>(x),</i> for all <i>x&isin; <var>G</var>}</I>.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3) ] );
    Group( (1,2,3) )
    gap> R1 := NaturalARep(G, 3);
    NaturalARep( GroupWithGenerators( [ (1,2,3) ] ), 3 )
    gap> R2 := ARepByImages(G, [ Mon( [1, E(3), E(3)^2] ) ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2,3) ] ),
      [ Mon( [ 1, E(3), E(3)^2 ] )
      ],
      "hom"
    )
    gap> IntertwiningSpaceARep(R1, R2);
    [ AMatMat( [ [ 1, 0, 0 ], [ 1, 0, 0 ], [ 1, 0, 0 ] ] ), 
      AMatMat( [ [ 0, 1, 0 ], [ 0, E(3), 0 ], [ 0, E(3)^2, 0 ] ] ), 
      AMatMat( [ [ 0, 0, 1 ], [ 0, 0, E(3)^2 ], [ 0, 0, E(3) ] ] ) ] </pre>
<P><A NAME="SECT105"><h2>74.105 IntertwiningNumberARep</h2></a>
<P><P><P>
<code>IntertwiningNumberARep( <var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var> )</code>
<P>
<code>IntertwiningNumberARep</code> returns the intertwining number of the 
areps <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var>. The Maschke condition must hold for both 
<var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var>, otherwise an error is signaled.
<var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> must have identical source 
(i.e. IsIdentical(<var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var>) = <code>true</code>) 
and characteristic otherwise an error is signaled.
<P>
The intertwining number of two representations <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var>
(with Maschke condition) is the dimension of the intertwining space
or the scalar product of the characters.
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(64, 12));
    2^3xD8
    gap> R := RegularARep(G);
    RegularARep( 2^3xD8 )
    gap> IntertwiningNumberARep(R, R);
    64 </pre>
<P><A NAME="SECT106"><h2>74.106 UnderlyingPermRep</h2></a>
<P><P><P>
<code>UnderlyingPermRep( <var>R</var> )</code>
<P>
Let <var>R</var> be a monomial arep (i.e. <code>IsMonRep( <var>R</var> ) = true</code>).
<code>UnderlyingPermRep</code> returns an arep of type <code>"perm"</code> 
representing the underlying permutation representation of <var>R</var>. 
<P>
The underlying permutation representation of a monomial
representation <var>R</var> is obtained by replacing all entries 
<I> &ne; 0</I> in the images <I>&lt;R&gt;(x), x&isin; <var>G</var></I> by 1.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R := ARepByImages(G, [ [[0, 2], [1/2, 0]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ [ [ 0, 2 ], [ 1/2, 0 ] ]
      ],
      "hom"
    )
    gap> UnderlyingPermARep(R);
    NaturalARep( GroupWithGenerators( [ (1,2) ] ), 2 ) </pre>
<P><A NAME="SECT107"><h2>74.107 IsTransitiveMonRep</h2></a>
<P><P><P>
<code>IsTransitiveMonRep( <var>R</var> )</code>
<P>
Let <var>R</var> be a monomial arep (i.e. <code>IsMonRep( <var>R</var> ) = true</code>).
<code>IsTransitiveMonRep</code> returns <code>true</code> if <var>R</var> is transitive 
and <code>false</code> otherwise.
Note that <code>IsTransitiveMonRep</code> sets and tests <code><var>R</var>.isTransitive</code>.
<P>
A monomial representation is transitive iff the underlying 
permutation representation is.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2), (3,4) ] );
    Group( (1,2), (3,4) )
    gap> IsTransitiveMonRep(NaturalARep(G, 4));
    false
    gap> IsTransitiveMonRep(RegularARep(G));   
    true </pre>
<P><A NAME="SECT108"><h2>74.108 IsPrimitiveMonRep</h2></a>
<P><P><P>
<code>IsPrimitiveMonRep( <var>R</var> )</code>
<P>
Let <var>R</var> be a monomial arep (i.e. <code>IsMonRep( <var>R</var> ) = true</code>).
<code>IsPrimitiveMonRep</code> returns <code>true</code> if <var>R</var> is primitive 
and <code>false</code> otherwise.
<P>
A monomial representation is primitive iff the underlying 
permutation representation is.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4)); G.name := "S4";
    Group( (1,4), (2,4), (3,4) )
    "S4"
    gap> H := GroupWithGenerators(SymmetricGroup(3)); H.name := "S3";
    Group( (1,3), (2,3) )
    "S3"
    gap> L := Irr(H);
    [ Character( S3, [ 1, 1, 1 ] ), Character( S3, [ 1, -1, 1 ] ), 
      Character( S3, [ 2, 0, -1 ] ) ]
    gap> R := ARepByCharacter(L[2]);
    ARepByImages(
      S3,
      [ Mon( [ -1 ] ),
        Mon( [ -1 ] )
      ],
      "hom"
    )
    gap> IsPrimitiveMonRep(InductionARep(R, G));
    true </pre>
<P><A NAME="SECT109"><h2>74.109 TransitivityDegreeMonRep</h2></a>
<P><P><P>
<code>TransitivityDegreeMonRep( <var>R</var> )</code>
<P>
Let <var>R</var> be a monomial arep (i.e. <code>IsMonRep( <var>R</var> ) = true</code>).
<code>TransitivityDegreeMonRep</code> returns the degree of transitivity
of <var>R</var> as an integer.
Note that <code>TransitivityDegreeMonRep</code> sets and tests <code><var>R</var>.transitivity</code>.
<P>
The degree of transitivity of a monomial representation is defined 
as the degree of transitivity of the underlying permutation 
representation.
<P>
<pre>    gap> G := GroupWithGenerators(AlternatingGroup(5));
    Group( (1,2,5), (2,3,5), (3,4,5) )
    gap> TransitivityDegreeMonRep(NaturalARep(G, 5));
    3 </pre>
<P><A NAME="SECT110"><h2>74.110 OrbitDecompositionMonRep</h2></a>
<P><P><P>
<code>OrbitDecompositionMonRep( <var>R</var> )</code>
<P>
Let <var>R</var> be a monomial arep (i.e. <code>IsMonRep( <var>R</var> ) = true</code>).
<code>OrbitDecompositionMonRep</code> returns an arep equal to <var>R</var> with 
structure <I>(R<sub>1</sub>&oplus;...&oplus; R<sub>k</sub>)<sup>P</sup></I> 
where <I>R<sub>i</sub>, i = 1,...,k</I> are transitive areps of type <code>"mon"</code> and 
<I>P</I> is an amat of type <code>"perm"</code> (for amats see <a href="chap074.htm#SECT022">AMats</a>).
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3,4) ] ); G.name := "Z4";
    Group( (1,2,3,4) )
    "Z4"
    gap> R := ARepByImages(G, [ Mon( (1,2)(3,4), [1,-1,1,1,-1] ) ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2,3,4) ] ),
      [ Mon( (1,2)(3,4), [ 1, -1, 1, 1, -1 ] ) ],
      "hom"
    )
    gap> OrbitDecompositionMonRep(R);
    ConjugateARep(
      DirectSumARep(
        ARepByImages(
          Z4,
          [ Mon( (1,2), [ 1, -1 ] ) ],
          "hom"
        ),
        ARepByImages(
          Z4,
          [ Mon( (1,2), 2 ) ],
          "hom"
        ),
        ARepByImages(
          Z4,
          [ Mon( [ -1 ] ) ],
          "hom"
        )
      ),
      IdentityPermAMat(5)
    ) </pre>
<P><A NAME="SECT111"><h2>74.111 TransitiveToInductionMonRep</h2></a>
<P><P><P>
<code>TransitiveToInductionMonRep( <var>R</var> )</code><BR> 
<code>TransitiveToInductionMonRep( <var>R</var>, <var>i</var> )</code>
<P>
Let <var>R</var> be a transitive monomial arep of a group <var>G</var>.
<code>TransitiveToInductionMonRep</code> returns an arep equal to <var>R</var> 
with structure <I>&lt;R&gt; = (L\uparrow<sub>T</sub> <var>G</var>)<sup>D</sup></I>. 
<var>L</var> is an arep of degree one of 
the stabilizer <var>H</var> of the point <var>i</var> and <var>T</var> a transversal 
of <I>&lt;H&gt; \  <var>G</var></I>. The default for <var>i</var> is <code><var>R</var>.degree</code>.
<var>D</var> is a diagonal amat (see <a href="chap074.htm#SECT022">AMats</a>) of type <code>"mon"</code>. 
Note that <code>TransitiveToInductionMonRep</code> sets and tests the
field <code><var>R</var>.induction</code> if <var>i</var> = <code><var>R</var>.degree</code>.
<P>
<pre>    gap> G := GroupWithGenerators(DihedralGroup(8));
    Group( (1,2,3,4), (2,4) )
    gap> R := ARepByImages(G, [ Mon( [E(4), E(4)^-1] ), Mon( (1,2), 2 ) ]);
    ARepByImages(
      GroupWithGenerators( [ (1,2,3,4), (2,4) ] ),
      [ Mon( [ E(4), -E(4) ] ), Mon( (1,2), 2 ) ],
      "hom"
    )
    gap> TransitiveToInductionMonRep(R);
    ConjugateARep(
      InductionARep(
        ARepByImages(
          GroupWithGenerators( [ (1,2,3,4) ] ),
          [ Mon( [ -E(4) ] ) ],
          "hom"
        ),
        GroupWithGenerators( [ (1,2,3,4), (2,4) ] ),
        [ (2,4), () ]
      ),
      IdentityMonAMat(2)
    ) </pre>
<P><A NAME="SECT112"><h2>74.112 InsertedInductionARep</h2></a>
<P><P><P>
<code>InsertedInductionARep( <var>R</var>, <var>H</var> )</code>
<P>
Let <var>R</var> be an arep of type <code>"induction"</code>, i.e.
<I>&lt;R&gt; = <var>L</var>\uparrow<sub>T</sub> <var>G</var></I> where <var>L</var> is an arep of <I>&lt;U&gt;  &le; <var>G</var></I>
and <I>&lt;U&gt;  &le; <var>H</var>  &le; <var>G</var></I>.
<code>InsertedInductionARep</code> returns an arep equal to <var>R</var>
with structure <I>( (<var>L</var>\uparrow<sub>T<sub>1</sub></sub><var>H</var>)\uparrow<sub>T<sub>2</sub></sub><var>G</var>)<sup>M</sup></I>
where <var>M</var> is an amat (see <a href="chap074.htm#SECT022">AMats</a>) with a structure similar to <var>R</var>. 
If <code><var>R</var>.rep</code> is of degree 1 then <var>M</var> is an amat of type <code>"mon"</code>.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4)); G.name := "S4";
    Group( (1,4), (2,4), (3,4) )
    "S4"
    gap> H := GroupWithGenerators(AlternatingGroup(4)); H.name := "A4";
    Group( (1,2,4), (2,3,4) )
    "A4"
    gap> U := GroupWithGenerators(CyclicGroup(3)); U.name := "Z3";
    Group( (1,2,3) )
    "Z3"
    gap> R := ARepByImages(U, [ [[E(3)]] ] );
    ARepByImages(
      Z3,
      [ [ [ E(3) ] ]
      ],
      "hom"
    )
    gap> InsertedInductionARep(InductionARep(R, G), H);
    ConjugateARep(
      InductionARep(
        InductionARep(
          ARepByImages(
            Z3,
            [ [ [ E(3) ] ] ],
            "hom"
          ),
          A4,
          [ (), (2,3,4), (2,4,3), (1,4)(2,3) ]
        ),
        S4,
        [ (), (3,4) ]
      ),
      AMatMon( Mon(
        (2,4,8,7,3,5),
        [ 1, 1, 1, 1, 1, 1, E(3)^2, 1 ]
      ) )
    ) </pre>
<P><A NAME="SECT113"><h2>74.113 ConjugationPermReps</h2></a>
<P><P><P>
<code>ConjugationPermReps( <var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var> )</code>
<P>
Let <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> be permutation representations (i.e. 
<code>IsPermRep( <var><I>R<sub>i</sub></I></var> ) = true</code>, <I>i = 1,2</I>).
<code>ConjugationPermReps</code> returns an amat <var>A</var>
(see <a href="chap074.htm#SECT022">AMats</a>) of type <code>"perm"</code> such that <I>&lt;R<sub>1</sub>&gt;<sup>A</sup> = <var>R_2</var></I>.
<var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> must have common source and characteristic 
otherwise an error is signaled.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3) ] );
    Group( (1,2,3) )
    gap> R1 := NaturalARep(G, 3);
    NaturalARep( GroupWithGenerators( [ (1,2,3) ] ), 3 )
    gap> R2 := ARepByImages(G, [ (1,3,2) ], 3);
    ARepByImages(
      GroupWithGenerators( [ (1,2,3) ] ),
      [ (1,3,2)
      ],
      3, # degree
      "hom"
    )
    gap> A := ConjugationPermReps(R1, R2);
    AMatPerm((2,3), 3) 
    gap> R1 ^ A = R2;
    true </pre>
<P><A NAME="SECT114"><h2>74.114 ConjugationTransitiveMonReps</h2></a>
<P><P><P>
<code>ConjugationTransitiveMonReps( <var><I>R<sub>1</sub></I></var>, <var><I>R<sub>2</sub></I></var> )</code>
<P>
Let <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> be transitive monomial representations.
<code>ConjugationTransitiveMonReps</code> returns an amat <var>A</var>
(see <a href="chap074.htm#SECT022">AMats</a>) of type <code>"mon"</code> such that <I>&lt;R<sub>1</sub>&gt;<sup>A</sup> = <var>R_2</var></I> 
if possible and <code>false</code> otherwise.
<var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> must have common source 
otherwise an error is signaled.
<P>
Note that a conjugating monomial matrix exists iff <var><I>R<sub>1</sub></I></var> and <var><I>R<sub>2</sub></I></var> 
are induced from inner conjugated representations of degree one
(see <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>).
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2,3), (1,2) ] );
    Group( (1,2,3), (1,2) )
    gap> R1 := ARepByImages(G, [ Mon( [E(3), E(3)^2] ), Mon( (1,2), 2 ) ]);
    ARepByImages(
      GroupWithGenerators( [ (1,2,3), (1,2) ] ),
      [ Mon( [ E(3), E(3)^2 ] ),
        Mon( (1,2), 2 )
      ],
      "hom"
    )
    gap> R2 := ARepByImages(G, [ Mon( [E(3)^2, E(3)] ), Mon( (1,2), 2 ) ]);  
    ARepByImages(
      GroupWithGenerators( [ (1,2,3), (1,2) ] ),
      [ Mon( [ E(3)^2, E(3) ] ),
        Mon( (1,2), 2 )
      ],
      "hom"
    )
    gap> ConjugationTransitiveMonReps(R1, R2);
    AMatMon( Mon( (1,2), 2 ) ) </pre>
<P><A NAME="SECT115"><h2>74.115 TransversalChangeInductionARep</h2></a>
<P><P><P>
<code>TransversalChangeInductionARep( <var>R</var>, <var>T</var> )</code><BR> 
<code>TransversalChangeInductionARep( <var>R</var>, <var>T</var>, <var>hint</var> )</code>
<P>
Let <var>R</var> be an arep of type <code>"induction"</code>, i.e. 
<I>&lt;R&gt; = <var>L</var>\uparrow<sub>S</sub> <var>G</var></I> and <var>T</var> another transversal of 
<code><var>L</var>.source</code><I> \ </I><var>G</var>. 
<code>TransversalChangeInductionARep</code> returns an arep equal to <var>R</var>
with structure <I>(<var>L</var>\uparrow<sub><var>T</var></sub>  <var>G</var>)<sup>M</sup></I>
where <var>M</var> is an amat (see <a href="chap074.htm#SECT022">AMats</a>). <var>M</var> is of type <code>"mon"</code>
if <var>L</var> is of degree 1 else <var>M</var> has a structure similar to <var>R</var>.
The <var>hint</var> <code>"isTransversal"</code> suppresses checking <var>T</var> to be a 
right transversal.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4)); G.name := "S4";
    Group( (1,4), (2,4), (3,4) )
    "S4"
    gap> H := GroupWithGenerators(SymmetricGroup(3)); H.name := "S3";
    Group( (1,3), (2,3) )
    "S3"
    gap> R := ARepByImages(H, [ [[-1]], [[-1]] ], "hom" );
    ARepByImages(
      S3,
      [ [ [ -1 ] ], [ [ -1 ] ] ],
      "hom"
    )
    gap> RG := InductionARep(R, G);
    InductionARep(
      ARepByImages(
        S3,
        [ [ [ -1 ] ], [ [ -1 ] ] ],
        "hom"
      ),
      S4,
      [ (), (3,4), (2,4), (1,4) ]
    )
    gap> T := [(1,2,3,4), (2,3,4), (3,4), ()];;
    gap> TransversalChangeInductionARep(RG, T);     
    ConjugateARep(
      InductionARep(
        ARepByImages(
          S3,
          [ [ [ -1 ] ], [ [ -1 ] ] ],
          "hom"
        ),
        S4,
        [ (1,2,3,4), (2,3,4), (3,4), () ]
      ),
      AMatMon( Mon( (1,4)(2,3), [ 1, 1, -1, 1 ] ) )
    )
    gap> last = RG;
    true </pre>
<P><A NAME="SECT116"><h2>74.116 OuterTensorProductDecompositionMonRep</h2></a>
<P><P><P>
<code>OuterTensorProductDecompositionMonRep( <var>R</var> )</code>
<P>
Let <var>R</var> be a transitive monomial arep. 
<code>OuterTensorProductDecompositionMonRep</code> returns an arep 
equal to <var>R</var> with structure <I>(<var>R_1</var># ...#<var>R_k</var>)<sup>M</sup>.</I>
The <var><I>R<sub>i</sub></I></var> are areps 
of type <code>"mon"</code>, <var>M</var> is an amat of type mon.
<P>
For a definition of the outer tensor product of representations
see <a href="chap074.htm#SECT079">OuterTensorProductARep</a>.
For an explanation of the algorithm see <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>.
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(48, 16));
    2x4xS3
    gap> R := RegularARep(G, 2);
    RegularARep( 2x4xS3, GF(2) )
    gap> OuterTensorProductDecompositionMonRep(R);
    ConjugateARep(
      OuterTensorProductARep(
        2x4xS3,
        ARepByImages(
          GroupWithGenerators( [ c ] ),
          [ Mon( (1,2), 2, GF(2) ) ],
          "hom"
        ),
        ARepByImages(
          GroupWithGenerators( [ d, e ] ),
          [ Mon( (1,3,2,4), 4, GF(2) ),
            Mon( (1,2)(3,4), 4, GF(2) )
          ],
          "hom"
        ),
        ARepByImages(
          GroupWithGenerators( [ a*e, b ] ),
          [ Mon( (1,4)(2,6)(3,5), 6, GF(2) ),
            Mon( (1,2,3)(4,5,6), 6, GF(2) )
          ],
          "hom"
        )
      ),
      AMatMon( Mon( ( 2, 9,18,44,16,28,30,46,31, 6,42,48,47,39,23,35,37, 7)
    ( 3,17,36,45,24,43, 8,10,25, 5,34,29,38,15,19, 4,26,13)
    (11,33,22,27,21,20,12,41,40,32,14), 48, GF(2) ) )
    )
    gap> last = R;
    true </pre>
<P><A NAME="SECT117"><h2>74.117 InnerConjugationARep</h2></a>
<P><P><P>
<code>InnerConjugationARep( <var>R</var>, <var>G</var>, <var>t</var> )</code>
<P>
Let <var>R</var> be an arep with source <I>&lt;H&gt; &le; <var>G</var></I> and <I>&lt;t&gt;&isin; <var>G</var></I>. 
<code>InnerConjugationARep</code> returns an arep of type 
<code>"perm"</code> or <code>"mon"</code> or <code>"mat"</code>, the most specific 
possible, representing the inner conjugate <I>&lt;R&gt;<sup><var>t</var></sup></I> 
of <var>R</var> with <var>t</var>.
<P>
The inner conjugate <I>&lt;R&gt;<sup><var>t</var></sup></I> is a representation of <I>&lt;H&gt;<sup><var>t</var></sup></I>
defined by <I>x&rarr; <var>R</var>(t. <var>x</var>. t<sup>-1</sup>)</I>.
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4));
    Group( (1,4), (2,4), (3,4) )
    gap> H := GroupWithGenerators(SymmetricGroup(3));
    Group( (1,3), (2,3) )
    gap> R := NaturalARep(H, 3);
    NaturalARep( GroupWithGenerators( [ (1,3), (2,3) ] ), 3 )
    gap> InnerConjugationARep(R, G, (1,2,3,4));
    ARepByImages(
      GroupWithGenerators( [ (2,4), (3,4) ] ),
      [ (1,3), (2,3) ],
      3, # degree
      "hom"
    ) </pre>
<P><A NAME="SECT118"><h2>74.118 RestrictionInductionARep</h2></a>
<P><P><P>
<code>RestrictionInductionARep( <var>R</var>, <var>K</var> )</code>
<P>
Let <var>R</var> be an arep of type <code>"induction"</code>, i.e. 
<I>&lt;R&gt; = <var>L</var>\uparrow<sub>T</sub> <var>G</var></I> where <var>L</var> is an arep of <I>&lt;H&gt; &le; <var>G</var></I> of
degree 1 and <I>&lt;K&gt;  &le; <var>G</var></I> a subgroup.
<code>RestrictionInductionARep</code> returns an arep equal to the
restriction <I>&lt;R&gt;\downarrow <var>K</var></I> with structure 
<I>(<big>&oplus;</big><sub>i=1</sub><sup>k</sup>
((<var>L</var><sup>s<sub>i</sub></sup>\downarrow(<var>H</var><sup>s<sub>i</sub></sup>&cap; <var>K</var>))\uparrow<sub>T<sub>i</sub></sub> <var>K</var>))<sup>M</sup></I>.
<I>S = {s<sub>1</sub>,..., s<sub>k</sub>}</I> is a transversal of the double cosets
<I>H \  G/K</I>, <I>&lt;L&gt;<sup>s<sub>i</sub></sup></I> denotes the inner conjugate of <var>R</var>
with <I>s<sub>i</sub></I>, and <var>M</var> is an amat (see <a href="chap074.htm#SECT022">AMats</a>) of type <code>"mon"</code>.
<P>
Note that this decomposition is based on a refined version
of Mackey's subgroup theorem (see <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>).
<P>
<pre>    gap> G := GroupWithGenerators(SymmetricGroup(4)); G.name := "S4";
    Group( (1,4), (2,4), (3,4) )
    "S4"
    gap> H := GroupWithGenerators( [ (1,2) ] ); H.name := "Z2";
    Group( (1,2) )
    "Z2"
    gap> K := GroupWithGenerators( [ (1,2,3) ] ); K.name := "Z3";
    Group( (1,2,3) )
    "Z3"
    gap> L := ARepByImages(H, [ Mon( [-1] ) ] );
    ARepByImages(
      Z2,
      [ Mon( [ -1 ] )
      ],
      "hom"
    )
    gap> RestrictionInductionARep(InductionARep(L, G), K);
    ConjugateARep(
      DirectSumARep(
        RegularARep( GroupWithGenerators( [ (1,2,3) ] ) ),
        RegularARep( GroupWithGenerators( [ (1,2,3) ] ) ),
        RegularARep( GroupWithGenerators( [ (1,2,3) ] ) ),
        RegularARep( GroupWithGenerators( [ (1,2,3) ] ) )
      ),
      AMatMon( Mon(
        ( 2,12, 4, 6, 9, 5, 8,10),
        [ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1 ]
      ) )
    ) </pre>
<P><A NAME="SECT119"><h2>74.119 kbsARep</h2></a>
<P><P><P>
<code>kbsARep( <var>R</var> )</code>
<P>
<code>kbsARep</code> returns the kbs (conjugated blockstructure) 
of the arep <var>R</var>. The kbs of a representation is a partition
of the set <I>{1,...,<code><var>R</var>.degree</code>}</I> representing the blockstructure
of <var>R</var>. For an exact definition see <a href="chap074.htm#SECT167">kbs</a>.
<P>
Note that for a monomial representation the kbs is exactly the
list of orbits.
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R := ARepByImages(G, [ (2,3) ], 4);                                  
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ (2,3) ],
      4, # degree
      "hom"
    )
    gap> kbsARep(R);
    [ [ 1 ], [ 2, 3 ], [ 4 ] ] </pre>
<P><A NAME="SECT120"><h2>74.120 RestrictionToSubmoduleARep</h2></a>
<P><P><P>
<code>RestrictionToSubmoduleARep( <var>R</var>, <var>list</var> )</code><BR> 
<code>RestrictionToSubmoduleARep( <var>R</var>, <var>list</var>, <var>hint</var> )</code>
<P>
Let <var>R</var> be an arep and <var>list</var> a subset of <code>[1..<var>R</var>.degree]</code>. 
<code>RestrictionToSubmoduleARep</code> returns an arep of type 
<code>"perm"</code> or <code>"mon"</code> or <code>"mat"</code>, the most specific 
possible, representing the restriction of <var>R</var> to the submodule
generated by the base vectors given through <var>list</var>.
The optional <var>hint</var> <code>"hom"</code> avoids the check for homomorphism.
<P>
Note that the restriction to the submodule given by <var>list</var>
defines a homomorphism iff <var>list</var> is a union of lists in the
kbs of <var>R</var> (see <a href="chap074.htm#SECT119">kbsARep</a>).
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R := ARepByImages(G, [ (2,4) ], 4);  
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ (2,4) ],
      4, # degree
      "hom"
    )
    gap> RestrictionToSubmoduleARep(R, [2,4]);
    NaturalARep( GroupWithGenerators( [ (1,2) ] ), 2 ) </pre>
<P><A NAME="SECT121"><h2>74.121 kbsDecompositionARep</h2></a>
<P><P><P>
<code>kbsDecompositionARep( <var>R</var> )</code>
<P>
<code>kbsDecompositionARep</code> returns an arep equal to <var>R</var> with
structure <I>(<var>R_1</var>&oplus;...&oplus;<var>R_k</var>)<sup>P</sup></I> where <var>P</var> is 
an amat (see <a href="chap074.htm#SECT022">AMats</a>) of type <code>"perm"</code>and all <var><I>R<sub>i</sub></I></var> have 
trivial kbs (see <a href="chap074.htm#SECT119">kbsARep</a>).
<P>
Note that for a monomial arep <code>kbsDecompositionARep</code> performs
exactly the same as the function <code>OrbitDecompositionMonRep</code> 
(see <a href="chap074.htm#SECT110">OrbitDecompositionMonRep</a>).
<P>
<pre>    gap> G := GroupWithGenerators( [ (1,2) ] );
    Group( (1,2) )
    gap> R := ARepByImages(G,               
    > [ [[Z(2), Z(2), 0*Z(2), 0*Z(2)], [0*Z(2), Z(2), 0*Z(2), 0*Z(2)],
    > [0*Z(2), 0*Z(2), Z(2), Z(2)], [0*Z(2), 0*Z(2), 0*Z(2), Z(2)]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,2) ] ),
      [ [ [ Z(2)^0, Z(2)^0, 0*Z(2), 0*Z(2) ], 
          [ 0*Z(2), Z(2)^0, 0*Z(2), 0*Z(2) ], 
          [ 0*Z(2), 0*Z(2), Z(2)^0, Z(2)^0 ], 
          [ 0*Z(2), 0*Z(2), 0*Z(2), Z(2)^0 ] ]
      ],
      "hom"
    )
    gap> kbsDecompositionARep(R);
    ConjugateARep(
      DirectSumARep(
        ARepByImages(
          GroupWithGenerators( [ (1,2) ] ),
          [ [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ] ],
          "hom"
        ),
        ARepByImages(
          GroupWithGenerators( [ (1,2) ] ),
          [ [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ] ],
          "hom"
        )
      ),
      IdentityPermAMat(4, GF(2))
    ) </pre>
<P><A NAME="SECT122"><h2>74.122 ExtensionOnedimensionalAbelianRep</h2></a>
<P><P><P>
<code>ExtensionOnedimensionalAbelianRep( <var>R</var>, <var>G</var> )</code>
<P>
Let <var>R</var> be an arep of the subgroup <I>&lt;H&gt;  &le; <var>G</var></I> and 
let <I>&lt;G&gt;/</i>kernel<i>(<var>R</var>)</I> be an abelian factor group. 
<code>ExtensionOnedimensionalAbelianRep</code> returns an arep of type
<code>"mon"</code> and degree 1 extending <var>R</var> to <var>G</var>. 
For the extension the smallest possible extension field
is chosen.
<P>
<pre>    gap> G := GroupWithGenerators(CyclicGroup(8));
    Group( (1,2,3,4,5,6,7,8) )
    gap> H := GroupWithGenerators( [ G.1^2 ] );
    Group( (1,3,5,7)(2,4,6,8) )
    gap> R := ARepByImages(H, [ [[-1]] ] );
    ARepByImages(
      GroupWithGenerators( [ (1,3,5,7)(2,4,6,8) ] ),
      [ [ [ -1 ] ]
      ],
      "hom"
    )
    gap> ExtensionOnedimensionalAbelianRep(R, G);
    ARepByImages(
      GroupWithGenerators( [ (1,2,3,4,5,6,7,8) ] ),
      [ Mon( [ E(4) ] )
      ],
      "hom"
    ) </pre>
<P><A NAME="SECT123"><h2>74.123 DecompositionMonRep</h2></a>
<P><P><P>
<code>DecompositionMonRep( <var>R</var> )</code><BR> 
<code>DecompositionMonRep( <var>R</var>, <var>hint</var> )</code>
<P>
Let <var>R</var> be a monomial arep (i.e. <code>IsMonRep( <var>R</var> )</code> yields <code>true</code>). 
<code>DecompositionMonRep</code> returns an arep equal to <var>R</var> with 
structure <I>(<var>R_1</var>&oplus;...&oplus; <var>R_k</var>)<sup>A<sup>-1</sup></sup></I> where all
<var><I>R<sub>i</sub></I></var> are irreducible and <I>A<sup>-1</sup></I> is a highly structured 
amat (see <a href="chap074.htm#SECT022">AMats</a>). <var>A</var> is a decomposition matrix for <var>R</var> and 
can be accessed in the field <code>.conjugation.element</code> of the result.
The list of the <var><I>R<sub>i</sub></I></var> can be accessed in the field
<code>.rep.summands</code> of the result. Note that any <var><I>R<sub>i</sub></I></var> is monomial if
this is possible.
If the <var>hint</var> <code>"noOuter"</code> is supplied, the decomposition
of <var>R</var> is performed without any decomposition into 
an outer tensor product which may speed up the function.
The function only works for characteristic zero otherwise an error
is signaled. 
At least the following types of monomial areps can be decomposed: 
monomial representations of solvable groups, double transitive
permutation representations, primitive permutation representations
with solvable socle.
If <code>DecompositionMonRep</code> is not able to decompose <var>R</var> then <code>false</code> is
returned.
The performance of <code>DecompositionMonRep</code> depends on the size of the 
group represented as well as on the degree of <var>R</var>. E.g. the 
decomposition of a regular representation of a group of size 96 
takes less than half a minute 
(CPU-time on a SUN Ultra-Sparc <I>150\mathrmMHz</I>) if the 
source group is an ag group.
<P>
Note that in the case that <var>R</var> is a regular representation of the
solvable group <I>G</I> the structured decomposition matrix <var>A</var> computed by
<code>DecompositionMonRep</code> represents a fast Fourier transform for <I>G</I>. 
Hence, <code>DecompositionMonRep</code> is able to compute a fast Fourier
transform for any solvable group.
<A name = "I9"></a>

<A name = "I10"></a>

<P>
The algorithm is a major result of <A href="biblio.htm#Pue98"><cite>Pue98</cite></a> where a thorough
explanation can be found.
<P>
Set <code>InfoLatticeDec := Print</code> to obtain information on 
the recursive decomposition of <var>R</var>.
<P>
An important application of this function is the automatic generation
of fast algorithms for discrete signal transforms which is realized
in <a href="chap074.htm#SECT147">Matrix Decomposition</a>.
(see <A href="biblio.htm#Min93"><cite>Min93</cite></a>, <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>, <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>).
<P>
<pre>    gap> G := GroupWithGenerators(SolvableGroup(8, 5));
    Q8
    gap> R := RegularARep(G);
    RegularARep( Q8 )
    gap> DecompositionMonRep(R);
    ConjugateARep(
      DirectSumARep(
        TrivialMonARep( Q8 ),
        ARepByImages(
          Q8,
          [ Mon( [ -1 ] ), Mon( [ -1 ] ), Mon( (), 1 ) ],
          "hom"
        ),
        ARepByImages(
          Q8,
          [ Mon( [ -1 ] ), Mon( (), 1 ), Mon( (), 1 ) ],
          "hom"
        ),
        ARepByImages(
          Q8,
          [ Mon( (), 1 ), Mon( [ -1 ] ), Mon( (), 1 ) ],
          "hom"
        ),
        ARepByImages(
          Q8,
          [ Mon( (1,2), [ -1, 1 ] ), 
            Mon( [ E(4), -E(4) ] ), 
            Mon( [ -1, -1 ] )
          ],
          "hom"
        ),
        ARepByImages(
          Q8,
          [ Mon( (1,2), [ -1, 1 ] ),
            Mon( [ E(4), -E(4) ] ),
            Mon( [ -1, -1 ] )
          ],
          "hom"
        )
      ),
      ( AMatPerm((7,8), 8) *
        TensorProductAMat(
          IdentityPermAMat(2),
          AMatPerm((2,3), 4) *
          TensorProductAMat(
            DFTAMat(2),
            IdentityPermAMat(2)
          ) *
          DiagonalAMat([ 1, 1, 1, E(4) ]) *
          TensorProductAMat(
            IdentityPermAMat(2),
            DFTAMat(2)
          ) *
          AMatPerm((2,3), 4)
        ) *
        AMatMon( Mon(
          (2,5,3)(4,8,7),
          [ 1, 1, 1, 1, 1, 1, -1, 1 ]
        ) ) *
        DirectSumAMat(
          TensorProductAMat(
            DFTAMat(2),
            IdentityPermAMat(2)
          ),
          IdentityPermAMat(4)
        ) *
        AMatPerm((2,4), 8)
      ) ^ -1
    ) 
    gap>  last = R;                                          
    true </pre>
<P><A NAME="SECT124"><h2>74.124 Symmetry of Matrices</h2></a>
<P><P><P>
The following sections describe functions for the computation
of symmetry of a given matrix. A symmetry 
of a matrix is a pair <I>(R<sub>1</sub>, R<sub>2</sub>)</I> of representations of the 
same group <I>G</I> with the property <I>R<sub>1</sub>(x). M = M. R<sub>2</sub>(x)</I>
for all <I>x&isin; G</I>.
This definition corresponds to the definition of the 
intertwining space of <I>R<sub>1</sub>, R<sub>2</sub></I> (see <a href="chap074.htm#SECT104">IntertwiningSpaceARep</a>).
The origin of this definition is due to Minkwitz 
(see <A href="biblio.htm#Min95"><cite>Min95</cite></a>, <A href="biblio.htm#Min93"><cite>Min93</cite></a>) and was generalized to the
definition above by the authors of this package.
<P>
Restrictions on the representations <I>R<sub>1</sub>, R<sub>2</sub></I> yield special 
types of symmetry. We consider the following three types:

<P>&bull; Perm-Irred symmetry: <I>R<sub>1</sub></I> is a permutation representation,
<I>R<sub>2</sub></I> is a conjugated (by a permutation) direct sum of irreducible
representations
<P>&bull; Perm-Perm symmetry: both <I>R<sub>1</sub></I> and <I>R<sub>2</sub></I> are 
permutation representations
<P>&bull; Mon-Mon symmetry: both <I>R<sub>1</sub></I> and <I>R<sub>2</sub></I> are 
monomial representations

<P>
There are two implementations for the search algorithm for
Perm-Perm-Symmetry. One is entirely in <strong>GAP3</strong> by S. Egner, the other
uses the external C-program <code>desauto</code> bei J. Leon which is distributed
with the \sf GUAVA package.  By default the <strong>GAP3</strong> code is run. In
order to use the much faster method of J. Leon based on partitions
(see <A href="biblio.htm#Leo91"><cite>Leo91</cite></a>) you should set <code>UseLeon := true</code> and make sure
that an executable version of <code>desauto</code> is placed in
<code>\$GAP/pkg/arep/bin</code>. The implementation of Leon requires the matrix
to have <I> &le; 256</I> different entries. If this condition is violated
the <strong>GAP3</strong> implementation is run.
<P>
A matrix with symmetry of one of the types above contains structure 
in a sense and can be decomposed into a product of highly
structured sparse matrices (see <a href="chap074.htm#SECT147">Matrix Decomposition</a>).
<P>
For details on the concept and computation of symmetry see <A href="biblio.htm#Egn97"><cite>Egn97</cite></a> 
and <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>.
<P>
The following functions are implemented in the file
<code>"arep/lib/symmetry.g"</code> based on functions from 
<code>"arep/lib/permperm.g"</code>, <code>"arep/lib/monmon.g"</code>, 
<code>"arep/lib/permblk.g"</code> and <code>"arep/lib/permmat.g"</code>.
<P><A NAME="SECT125"><h2>74.125 PermPermSymmetry</h2></a>
<P><P><P>
<code>PermPermSymmetry( <var>M</var> )</code>
<P>
Let <var>M</var> be a matrix or an amat (see <a href="chap074.htm#SECT022">AMats</a>). 
<code>PermPermSymmetry</code> returns a pair <I>(R<sub>1</sub>, R<sub>2</sub>)</I> of 
areps of type <code>"perm"</code> (see <a href="chap074.htm#SECT066">AReps</a>) of the same group <I>G</I>
representing the perm-perm symmetry of <var>M</var>, i.e.
<I>R<sub>1</sub>(x). <var>M</var> = <var>M</var>. R<sub>2</sub>(x)</I> for all <I>x&isin; G</I>. 
The returned symmetry is maximal in the sense that for every 
pair <I>(p<sub>1</sub>, p<sub>2</sub>)</I> of permutations satisfying <I>p<sub>1</sub>. M= M. p<sub>2</sub></I> 
there is an <I>x</I> with <I>p<sub>1</sub> = R<sub>1</sub>(x)</I> and <I>p<sub>2</sub> = R<sub>2</sub>(x)</I>.
<P>
To use the much faster implementation of J. Leon set 
<code>UseLeon := true</code> as explained in <a href="chap074.htm#SECT124">Symmetry of Matrices</a>. 
<P>
Set <code>InfoPermSym1 := true</code> to obtain information 
about the search.
<P>
For the algorithm see <A href="biblio.htm#Leo91"><cite>Leo91</cite></a> resp. <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>.
<P>
<pre>    gap> M := DFT(5);;
    gap> PrintArray(M);
    [ [       1,       1,       1,       1,       1 ],
      [       1,    E(5),  E(5)^2,  E(5)^3,  E(5)^4 ],
      [       1,  E(5)^2,  E(5)^4,    E(5),  E(5)^3 ],
      [       1,  E(5)^3,    E(5),  E(5)^4,  E(5)^2 ],
      [       1,  E(5)^4,  E(5)^3,  E(5)^2,    E(5) ] ]
    gap> L := PermPermSymmetry(M);
    [ ARepByImages(
          GroupWithGenerators( [ g1, g2 ] ),
          [ (2,3,5,4),
            (2,5)(3,4)
          ],
          5, # degree
          "hom"
        ), ARepByImages(
          GroupWithGenerators( [ g1, g2 ] ),
          [ (2,4,5,3),
            (2,5)(3,4)
          ],
          5, # degree
          "hom"
        ) ] 
    gap> L[1]^AMatMat(M) = L[2];
    true </pre>
<P><A NAME="SECT126"><h2>74.126 MonMonSymmetry</h2></a>
<P><P><P>
<code>MonMonSymmetry( <var>M</var> )</code>
<P>
Let <var>M</var> be a matrix or an amat (see <a href="chap074.htm#SECT022">AMats</a>) of characteristic zero. 
<code>MonMonSymmetry</code> returns a pair <I>(R<sub>1</sub>, R<sub>2</sub>)</I> of 
areps of type <code>"mon"</code> (see <a href="chap074.htm#SECT066">AReps</a>) of the same group <I>G</I>
representing a mon-mon symmetry of <var>M</var>, i.e.
<I>R<sub>1</sub>(x). <var>M</var> = <var>M</var>. R<sub>2</sub>(x)</I> for all <I>x&isin; G</I>. 
<P>
The non-zero entries in the matrices <I>R<sub>1</sub>(x), R<sub>2</sub>(x)</I> are
all roots of unity of a certain order <I>d</I>. 
This order is given by the lcm of all quotients of non-zero 
entries of <var>M</var> with equal absolute value.
The returned symmetry is maximal in the sense that for every 
pair <I>(m<sub>1</sub>, m<sub>2</sub>)</I> of monomial matrices containing only 
<I>d</I>th roots of unity (and 0) and satisfying <I>m<sub>1</sub>. M=M. m<sub>2</sub></I>
there is an <I>x</I> with <I>m<sub>1</sub> = R<sub>1</sub>(x)</I> and <I>m<sub>2</sub> = R<sub>2</sub>(x)</I>.
<P>
<code>MonMonSymmetry</code> uses the function <code>PermPermSymmetry</code>. Hence you can
accelerate the function using the faster implementation of J. Leon
by setting <code>UseLeon := true</code> as explained in <a href="chap074.htm#SECT124">Symmetry of Matrices</a>.
<P>
For an explanation of the algorithm see <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>.
<P>
<pre>    gap> M := DFT(5);;      
    gap> PrintArray(M);
    [ [       1,       1,       1,       1,       1 ],
      [       1,    E(5),  E(5)^2,  E(5)^3,  E(5)^4 ],
      [       1,  E(5)^2,  E(5)^4,    E(5),  E(5)^3 ],
      [       1,  E(5)^3,    E(5),  E(5)^4,  E(5)^2 ],
      [       1,  E(5)^4,  E(5)^3,  E(5)^2,    E(5) ] ]
    gap> L := MonMonSymmetry(M);
    [ ARepByImages(
          GroupWithGenerators( [ g1, g2, g3, g4, g5 ] ),
          [ Mon(
              (2,3,5,4),
              [ 1, E(5)^3, E(5), E(5)^4, E(5)^2 ]
            ),
            Mon(
              (2,5)(3,4),
              [ 1, E(5)^2, E(5)^4, E(5), E(5)^3 ]
            ),
            Mon(
              (1,2,3,4,5),
              [ E(5), E(5), E(5), E(5), E(5) ]
            ),
            Mon( [ E(5), 1, E(5)^4, E(5)^3, E(5)^2 ] ),
            Mon( [ 1, E(5), E(5)^2, E(5)^3, E(5)^4 ] )
          ],
          "hom"
        ), ARepByImages(
          GroupWithGenerators( [ g1, g2, g3, g4, g5 ] ),
          [ Mon( (1,3,4,2), 5 ),
            Mon( (1,4)(2,3), 5 ),
            Mon( [ E(5), E(5)^2, E(5)^3, E(5)^4, 1 ] ),
            Mon(
              (1,2,3,4,5),
              [ E(5), E(5), E(5), E(5), E(5) ]
            ),
            Mon( (1,5,4,3,2), 5 )
          ],
          "hom"
        ) ]
    gap> L[1]^AMatMat(M) = L[2];
    true </pre>
<P><A NAME="SECT127"><h2>74.127 PermIrredSymmetry</h2></a>
<P><P><P>
<code>PermIrredSymmetry( <var>M</var> )</code><BR> 
<code>PermIrredSymmetry( <var>M</var>, <var>maxblocksize</var> )</code>
<P>
Let <var>M</var> be a matrix or an amat (see <a href="chap074.htm#SECT022">AMats</a>) of characteristic zero. 
<code>PermIrredSymmetry</code> returns a list of pairs <I>(R<sub>1</sub>, R<sub>2</sub>)</I> of 
areps (see <a href="chap074.htm#SECT066">AReps</a>) of the same group <I>G</I>
representing a perm-irred symmetry of <var>M</var>, i.e.
<I>R<sub>1</sub>(x). <var>M</var> = <var>M</var>. R<sub>2</sub>(x)</I> for all <I>x&isin; G</I> and
<I>R<sub>1</sub></I> is a permutation representation and <I>R<sub>2</sub></I> a 
conjugated (by a permutation) direct sum of irreducible
representations.
If <var>maxblocksize</var> is supplied exactly those perm-irred symmetries 
are returned where <I>R<sub>2</sub></I> contains at least one irreducible of degree 
<I> &le; <var>maxblocksize</var></I>. The default for <var>maxblocksize</var> is 2. 
<P>
Refer to <A href="biblio.htm#Egn97"><cite>Egn97</cite></a> to understand how the search is done and 
how to interpret the result.
<P>
Note that the perm-irred symmetry is not symmetric. Hence it is 
possible that a matrix <var>M</var> admits a perm-irred symmetry but its
transpose not.
<P>
The perm-irred symmetry is a special case of a perm-block symmetry.
The perm-block symmetries admitted by a fixed matrix <var>M</var> can be
described by two lattices which are in a certain way related to 
each other (semi-order preserving). To explore this structure 
(described in <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>) you should refer to <code>PermBlockSym</code> 
and <code>DisplayPermBlockSym</code> in the file <code>"arep/lib/permblk.g"</code>.
<P>
<pre>    gap> M := DFT(4);
    [ [ 1, 1, 1, 1 ], [ 1, E(4), -1, -E(4) ], [ 1, -1, 1, -1 ], 
      [ 1, -E(4), -1, E(4) ] ]
    gap> PermIrredSymmetry(M);
    [ [ NaturalARep( G2, 4 ), ConjugateARep(
              DirectSumARep(
                TrivialMatARep( G2 ),
                ARepByImages(
                  G2,
                  [ [ [ -1 ] ],
                    [ [ E(4) ] ]
                  ],
                  "hom"
                ),
                ARepByImages(
                  G2,
                  [ [ [ 1 ] ],
                    [ [ -1 ] ]
                  ],
                  "hom"
                ),
                ARepByImages(
                  G2,
                  [ [ [ -1 ] ],
                    [ [ -E(4) ] ]
                  ],
                  "hom"
                )
              ),
              IdentityPermAMat(4)
            ) ], [ NaturalARep( G3, 4 ), ConjugateARep(
              DirectSumARep(
                TrivialMatARep( G3 ),
                ARepByImages(
                  G3,
                  [ [ [ 0, -E(4) ], [ E(4), 0 ] ],
                    [ [ 0, 1 ], [ 1, 0 ] ],
                    [ [ 0, -1 ], [ -1, 0 ] ]
                  ],
                  "hom"
                ),
                ARepByImages(
                  G3,
                  [ [ [ -1 ] ],
                    [ [ 1 ] ],
                    [ [ 1 ] ]
                  ],
                  "hom"
                )
              ),
              AMatPerm((3,4), 4)
            ) ], [ NaturalARep( G1, 4 ), ConjugateARep(
              DirectSumARep(
                TrivialMatARep( G1 ),
                ARepByImages(
                  G1,
                  [ [ [ 1/2, -1/2+1/2*E(4), 1/2*E(4) ], 
              [ -1/2-1/2*E(4), 0, -1/2+1/2*E(4) ], 
              [ -1/2*E(4), -1/2-1/2*E(4), 1/2 ] ],
                    [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ],
                    [ [ 1/2, 1/2+1/2*E(4), -1/2*E(4) ], 
              [ 1/2-1/2*E(4), 0, 1/2+1/2*E(4) ], 
              [ 1/2*E(4), 1/2-1/2*E(4), 1/2 ] ]
                  ],
                  "hom"
                )
              ),
              IdentityPermAMat(4)
            ) ] ] </pre>
<P><A NAME="SECT128"><h2>74.128 Discrete Signal Transforms</h2></a>
<P><P><P>
The following sections describe functions for the construction
of many well known signal transforms in matrix form, as e.g. 
the discrete Fourier transform, several discrete cosine transforms etc.
For the definition of the mentioned signal transforms 
see <A href="biblio.htm#ER82"><cite>ER82</cite></a>, <A href="biblio.htm#Mal92"><cite>Mal92</cite></a>, <A href="biblio.htm#Mer96"><cite>Mer96</cite></a>.
<P>
The functions for discrete signal transforms are implemented
in <code>"arep/lib/transf.g"</code>.
<P><A NAME="SECT129"><h2>74.129 DiscreteFourierTransform</h2></a>
<P><P>
<A name = "I11"></a>

<P>
<code>DiscreteFourierTransform( <var>r</var> )</code><BR> 
<code>DiscreteFourierTransform( <var>n</var> )</code><BR> 
<code>DiscreteFourierTransform( <var>n</var>, <var>char</var> )</code>
<P>
shortcut: <code>DFT</code>
<P>
<code>DiscreteFourierTransform</code> or <code>DFT</code> returns the discrete Fourier
transform from a given root of unity <var>r</var> or the size <var>n</var> and 
the characteristic <var>char</var> (see <A href="biblio.htm#CB93"><cite>CB93</cite></a>). 
The default for <var>char</var> is zero.
Note that the <I></i>DFT<i></I> on <var>n</var> points and characteristic <var>char</var> exists
iff <var>n</var> and <var>char</var> are coprime. If this condition is violenced
an error is signaled.
<P>
The <I></i>DFT<i><sub>n</sub></I> of size <var>n</var> is defined as 
<I></i>DFT<i><sub>n</sub> = [&omega;<sub>n</sub><sup>k<span style="font-family: cursive">l</span></sup>| k,<span style="font-family: cursive">l</span>&isin;{0,...,n-1}]</I>, <I>
&omega;<sub>n</sub></I> a primitive <var>n</var>th root of unity.
<P>
<pre>    gap> DFT(Z(3));
    [ [ Z(3)^0, Z(3)^0 ], [ Z(3)^0, Z(3) ] ]
    gap> DFT(4);   
    [ [ 1, 1, 1, 1 ], [ 1, E(4), -1, -E(4) ], [ 1, -1, 1, -1 ], 
      [ 1, -E(4), -1, E(4) ] ] </pre>
<P><A NAME="SECT130"><h2>74.130 InverseDiscreteFourierTransform</h2></a>
<P><P>
<A name = "I12"></a>

<P>
<code>InverseDiscreteFourierTransform( <var>r</var> )</code><BR> 
<code>InverseDiscreteFourierTransform( <var>n</var> )</code><BR> 
<code>InverseDiscreteFourierTransform( <var>n</var>, <var>char</var> )</code>
<P>
shortcut: <code>InvDFT</code>
<P>
<code>InverseDiscreteFourierTransform</code> or <code>InvDFT</code> returns the inverse
of the discrete Fourier transform from a given root of unity <var>r</var> 
or the size <var>n</var> and the characteristic <var>char</var> 
(see <a href="chap074.htm#SECT129">DiscreteFourierTransform</a>). The default for <var>char</var> is zero.
<P>
<pre>    gap> InvDFT(3);
    [ [ 1/3, 1/3, 1/3 ], [ 1/3, 1/3*E(3)^2, 1/3*E(3) ], 
      [ 1/3, 1/3*E(3), 1/3*E(3)^2 ] ] </pre>
<P><A NAME="SECT131"><h2>74.131 DiscreteHartleyTransform</h2></a>
<P><P>
<A name = "I13"></a>

<P>
<code>DiscreteHartleyTransform( <var>n</var> )</code>
<P>
shortcut: <code>DHT</code>
<P>
<code>DiscreteHartleyTransform</code> or <code>DHT</code> returns the discrete 
Hartley transform on <var>n</var> points.
<P>
The <I></i>DHT<i><sub>n</sub></I> of size <var>n</var> is defined by 
<I></i>DHT<i><sub>n</sub> = [1/&radic;n.
(</I>cos<I>(2&pi; k<span style="font-family: cursive">l</span>/n) + </I>sin<I>(2&pi; k<span style="font-family: cursive">l</span>/n))| k,<span style="font-family: cursive">l</span>&isin;{0,...,n-1}]</I>.
<P>
<pre>    gap> DHT(4);
    [ [ 1/2, 1/2, 1/2, 1/2 ], [ 1/2, 1/2, -1/2, -1/2 ], 
      [ 1/2, -1/2, 1/2, -1/2 ], [ 1/2, -1/2, -1/2, 1/2 ] ] </pre>
<P><A NAME="SECT132"><h2>74.132 InverseDiscreteHartleyTransform</h2></a>
<P><P>
<A name = "I14"></a>

<P>
<code>InverseDiscreteHartleyTransform( <var>n</var> )</code>
<P>
shortcut: <code>InvDHT</code>
<P>
<code>InverseDiscreteHartleyTransform</code> or <code>InvDHT</code> returns the inverse
of the discrete Hartley transform on <var>n</var> points. Since the DHT is self
inverse the result is exactly the same as from <code>DHT</code> above.
<P>
<pre>    gap> InvDHT(4);
    [ [ 1/2, 1/2, 1/2, 1/2 ], [ 1/2, 1/2, -1/2, -1/2 ], 
      [ 1/2, -1/2, 1/2, -1/2 ], [ 1/2, -1/2, -1/2, 1/2 ] ] </pre>
<P><A NAME="SECT133"><h2>74.133 DiscreteCosineTransform</h2></a>
<P><P>
<A name = "I15"></a>

<P>
<code>DiscreteCosineTransform( <var>n</var> )</code>
<P>
shortcut: <code>DCT</code>
<P>
<code>DiscreteCosineTransform</code> returns the standard cosine transform
(type II) on <var>n</var> points.
<P>
The <I></i>DCT<i><sub>n</sub></I> of size <var>n</var> is defined by 
<I></i>DCT<i><sub>n</sub> = [&radic;2/n. c<sub>k</sub>.
(</I>cos<I>(k(<span style="font-family: cursive">l</span>+1/2)&pi;/n)| k,<span style="font-family: cursive">l</span>&isin;{0,...,n-1}]</I>, 
<I>c<sub>k</sub> = 1/&radic;2</I> for <I>k = 0</I> and <I>c<sub>k</sub> = 1</I> else.
<P>
<pre>    gap> DCT(3);
    [ [ 1/3*E(12)^7-1/3*E(12)^11, 1/3*E(12)^7-1/3*E(12)^11, 
          1/3*E(12)^7-1/3*E(12)^11 ], 
      [ -1/2*E(8)+1/2*E(8)^3, 0, 1/2*E(8)-1/2*E(8)^3 ], 
      [ -1/6*E(24)+1/6*E(24)^11+1/6*E(24)^17-1/6*E(24)^19, 
          1/3*E(24)-1/3*E(24)^11-1/3*E(24)^17+1/3*E(24)^19, 
          -1/6*E(24)+1/6*E(24)^11+1/6*E(24)^17-1/6*E(24)^19 ] ] </pre>
<P><A NAME="SECT134"><h2>74.134 InverseDiscreteCosineTransform</h2></a>
<P><P>
<A name = "I16"></a>

<P>
<code>InverseDiscreteCosineTransform( <var>n</var> )</code>
<P>
shortcut: <code>InvDCT</code>
<P>
<code>InverseDiscreteCosineTransform</code> returns the inverse of the 
standard cosine transform (type II) on <var>n</var> points. Since the
DCT is orthogonal, the result is the transpose of the DCT, 
which is exactly the discrete cosine transform of type III.
<P>
<pre>    [ [ 1/3*E(12)^7-1/3*E(12)^11, -1/2*E(8)+1/2*E(8)^3, 
          -1/6*E(24)+1/6*E(24)^11+1/6*E(24)^17-1/6*E(24)^19 ], 
      [ 1/3*E(12)^7-1/3*E(12)^11, 0, 
          1/3*E(24)-1/3*E(24)^11-1/3*E(24)^17+1/3*E(24)^19 ], 
      [ 1/3*E(12)^7-1/3*E(12)^11, 1/2*E(8)-1/2*E(8)^3, 
          -1/6*E(24)+1/6*E(24)^11+1/6*E(24)^17-1/6*E(24)^19 ] ] </pre>
<P><A NAME="SECT135"><h2>74.135 DiscreteCosineTransformIV</h2></a>
<P><P>
<A name = "I17"></a>

<P>
<code>DiscreteCosineTransformIV( <var>n</var> )</code>
<P>
shortcut: <code>DCT_IV</code>
<P>
<code>DiscreteCosineTransformIV</code> returns the cosine transform of
type IV on <var>n</var> points.
<P>
The <I></i>DCT\_IV<i><sub>n</sub></I> of size <var>n</var> is defined by 
<I></i>DCT\_IV<i><sub>n</sub> = [&radic;2/n.
(</I>cos<I>((k+1/2)(<span style="font-family: cursive">l</span>+1/2)&pi;/n)| k,<span style="font-family: cursive">l</span>&isin;{0,...,n-1}]</I>.
<P>
<pre>    [ [ 1/2*E(12)^4+1/6*E(12)^7+1/2*E(12)^8-1/6*E(12)^11, 
          1/3*E(12)^7-1/3*E(12)^11, 
          1/2*E(12)^4-1/6*E(12)^7+1/2*E(12)^8+1/6*E(12)^11 ], 
      [ 1/3*E(12)^7-1/3*E(12)^11, -1/3*E(12)^7+1/3*E(12)^11, 
          -1/3*E(12)^7+1/3*E(12)^11 ], 
      [ 1/2*E(12)^4-1/6*E(12)^7+1/2*E(12)^8+1/6*E(12)^11, 
          -1/3*E(12)^7+1/3*E(12)^11, 
          1/2*E(12)^4+1/6*E(12)^7+1/2*E(12)^8-1/6*E(12)^11 ] ] </pre>
<P><A NAME="SECT136"><h2>74.136 InverseDiscreteCosineTransformIV</h2></a>
<P><P>
<A name = "I18"></a>

<P>
<code>InverseDiscreteCosineTransformIV( <var>n</var> )</code>
<P>
shortcut: <code>InvDCT_IV</code>
<P>
<code>InverseDiscreteCosineTransformIV</code> returns the inverse of the 
cosine transform of type IV on <var>n</var> points. Since the
DCT\_IV is orthogonal, the result is the transpose of the DCT\_IV.
<P>
<pre>    [ [ 1/3*E(12)^7-1/3*E(12)^11, -1/2*E(8)+1/2*E(8)^3, 
          -1/6*E(24)+1/6*E(24)^11+1/6*E(24)^17-1/6*E(24)^19 ], 
      [ 1/3*E(12)^7-1/3*E(12)^11, 0, 
          1/3*E(24)-1/3*E(24)^11-1/3*E(24)^17+1/3*E(24)^19 ], 
      [ 1/3*E(12)^7-1/3*E(12)^11, 1/2*E(8)-1/2*E(8)^3, 
          -1/6*E(24)+1/6*E(24)^11+1/6*E(24)^17-1/6*E(24)^19 ] ] </pre>
<P><A NAME="SECT137"><h2>74.137 DiscreteCosineTransformI</h2></a>
<P><P>
<A name = "I19"></a>

<P>
<code>DiscreteCosineTransformI( <var>n</var> )</code>
<P>
shortcut: <code>DCT_I</code>
<P>
<code>DiscreteCosineTransformI</code> returns the cosine transform of
type I on <I>&lt;n&gt;+1</I> points.
<P>
The <I></i>DCT\_I<i><sub>n</sub></I> of size <I>&lt;n&gt;+1</I> is defined by 
<I></i>DCT\_I<i><sub>n</sub> = [&radic;2/n. c<sub>k</sub>. c<sub><span style="font-family: cursive">l</span></sub>.
(</I>cos<I>(k<span style="font-family: cursive">l</span>&pi;/n)| k,<span style="font-family: cursive">l</span>&isin;{0,...,n}]</I>, 
<I>c<sub>k</sub> = 1/&radic;2</I> for <I>k = 0</I> and <I>c<sub>k</sub> = 1</I> else.
<P>
<pre>    [ [ 1/2, 1/2*E(8)-1/2*E(8)^3, 1/2 ], 
      [ 1/2*E(8)-1/2*E(8)^3, 0, -1/2*E(8)+1/2*E(8)^3 ], 
      [ 1/2, -1/2*E(8)+1/2*E(8)^3, 1/2 ] ] </pre>
<P><A NAME="SECT138"><h2>74.138 InverseDiscreteCosineTransformI</h2></a>
<P><P>
<A name = "I20"></a>

<P>
<code>InverseDiscreteCosineTransformI( <var>n</var> )</code>
<P>
shortcut: <code>InvDCT_I</code>
<P>
<code>InverseDiscreteCosineTransformI</code> returns the inverse of the 
cosine transform of type I on <var>n</var> points. Since the
DCT\_I is orthogonal, the result is the transpose of the DCT\_I.
<P>
<pre>    [ [ 1/2, 1/2*E(8)-1/2*E(8)^3, 1/2 ], 
      [ 1/2*E(8)-1/2*E(8)^3, 0, -1/2*E(8)+1/2*E(8)^3 ], 
      [ 1/2, -1/2*E(8)+1/2*E(8)^3, 1/2 ] ] </pre>
<P><A NAME="SECT139"><h2>74.139 WalshHadamardTransform</h2></a>
<P><P>
<A name = "I21"></a>

<P>
<code>WalshHadamardTransform( <var>n</var> )</code>
<P>
shortcut: <code>WHT</code>
<P>
<code>WalshHadamardTransform</code> returns the Walsh-Hadamard transform 
on <var>n</var> points. 
<P>
Let <I>&lt;n&gt; = &prod;<sub>i=1</sub><sup>k</sup> p<sub>i</sub><sup>&nu;<sub>i</sub></sup></I> be the prime factor 
decomposition of <var>n</var>.
Then the <I></i>WHT<i><sub>n</sub></I> is defined by
<I></i>WHT<i><sub>n</sub> = <big>&otimes;</big><sub>i=1</sub><sup>k</sup> </i>DFT<i><sub>p<sub>i</sub></sub><sup>&otimes;&nu;<sub>i</sub></sup></I>.
<P>
<pre>    gap> WHT(4);
    [ [ 1, 1, 1, 1 ], [ 1, -1, 1, -1 ], 
      [ 1, 1, -1, -1 ], [ 1, -1, -1, 1 ] ] </pre>
<P><A NAME="SECT140"><h2>74.140 InverseWalshHadamardTransform</h2></a>
<P><P>
<A name = "I22"></a>

<P>
<code>InverseWalshHadamardTransform( <var>n</var> )</code>
<P>
shortcut: <code>InvWHT</code>
<P>
<code>InverseWalshHadamardTransform</code> returns the inverse of the 
Walsh-Hadamard transform on <var>n</var> points. 
<P>
<pre>    gap> InvWHT(4);
    [ [ 1/4, 1/4, 1/4, 1/4 ], [ 1/4, -1/4, 1/4, -1/4 ], 
      [ 1/4, 1/4, -1/4, -1/4 ], [ 1/4, -1/4, -1/4, 1/4 ] ] </pre>
<P><A NAME="SECT141"><h2>74.141 SlantTransform</h2></a>
<P><P>
<A name = "I23"></a>

<P>
<code>SlantTransform( <var>n</var> )</code>
<P>
shortcut: <code>ST</code>
<P>
<code>SlantTransform</code> returns the Slant transform on <var>n</var> points, which
must be a power of 2, <I>&lt;n&gt; = 2<sup>k</sup></I>
<P>
For a definition of the Slant transform see <A href="biblio.htm#ER82"><cite>ER82</cite></a>, 10.9.
<P>
<pre>    gap> ST(4);
    [ [ 1/2, 1/2, 1/2, 1/2 ], 
      [ 3/10*E(5)-3/10*E(5)^2-3/10*E(5)^3+3/10*E(5)^4, 
        1/10*E(5)-1/10*E(5)^2-1/10*E(5)^3+1/10*E(5)^4, 
          -1/10*E(5)+1/10*E(5)^2+1/10*E(5)^3-1/10*E(5)^4, 
          -3/10*E(5)+3/10*E(5)^2+3/10*E(5)^3-3/10*E(5)^4 ], 
      [ 1/2, -1/2, -1/2, 1/2 ], 
      [ 1/10*E(5)-1/10*E(5)^2-1/10*E(5)^3+1/10*E(5)^4, 
        -3/10*E(5)+3/10*E(5)^2+3/10*E(5)^3-3/10*E(5)^4, 
          3/10*E(5)-3/10*E(5)^2-3/10*E(5)^3+3/10*E(5)^4, 
          -1/10*E(5)+1/10*E(5)^2+1/10*E(5)^3-1/10*E(5)^4 ] ] </pre>
<P><A NAME="SECT142"><h2>74.142 InverseSlantTransform</h2></a>
<P><P>
<A name = "I24"></a>

<P>
<code>InverseSlantTransform( <var>n</var> )</code>
<P>
shortcut: <code>InvST</code>
<P>
<code>InverseSlantTransform</code> returns the inverse of the 
Slant transform on <var>n</var> points, which must be a power of 2, <I>&lt;n&gt; = 2<sup>k</sup></I>.
Since ST is orthogonal, this is exactly the transpose
of the ST.
<P>
<pre>    gap> InvST(4);
    [ [ 1/2, 3/10*E(5)-3/10*E(5)^2-3/10*E(5)^3+3/10*E(5)^4, 1/2, 
          1/10*E(5)-1/10*E(5)^2-1/10*E(5)^3+1/10*E(5)^4 ], 
      [ 1/2, 1/10*E(5)-1/10*E(5)^2-1/10*E(5)^3+1/10*E(5)^4, -1/2, 
          -3/10*E(5)+3/10*E(5)^2+3/10*E(5)^3-3/10*E(5)^4 ], 
      [ 1/2, -1/10*E(5)+1/10*E(5)^2+1/10*E(5)^3-1/10*E(5)^4, -1/2, 
          3/10*E(5)-3/10*E(5)^2-3/10*E(5)^3+3/10*E(5)^4 ], 
      [ 1/2, -3/10*E(5)+3/10*E(5)^2+3/10*E(5)^3-3/10*E(5)^4, 1/2, 
          -1/10*E(5)+1/10*E(5)^2+1/10*E(5)^3-1/10*E(5)^4 ] ] </pre>
<P><A NAME="SECT143"><h2>74.143 HaarTransform</h2></a>
<P><P>
<A name = "I25"></a>

<P>
<code>HaarTransform( <var>n</var> )</code>
<P>
shortcut: <code>HT</code>
<P>
<code>HaarTransform</code> returns the Haar transform on <var>n</var> points, 
which must be a power of 2, <I>&lt;n&gt; = 2<sup>k</sup></I>.
<P>
For a definition of the Haar transform see <A href="biblio.htm#ER82"><cite>ER82</cite></a>, 10.10.
<P>
<pre>    gap> HT(4);
    [ [ 1/4, 1/4, 1/4, 1/4 ], [ 1/4, 1/4, -1/4, -1/4 ], 
      [ 1/4*E(8)-1/4*E(8)^3, -1/4*E(8)+1/4*E(8)^3, 0, 0 ], 
      [ 0, 0, 1/4*E(8)-1/4*E(8)^3, -1/4*E(8)+1/4*E(8)^3 ] ] </pre>
<P><A NAME="SECT144"><h2>74.144 InverseHaarTransform</h2></a>
<P><P>
<A name = "I26"></a>

<P>
<code>InverseHaarTransform( <var>n</var> )</code>
<P>
shortcut: <code>InvHT</code>
<P>
<code>InverseHaarTransform</code> returns the inverse of the 
Haar transform on <var>n</var> points, 
which must be a power of 2, <I>&lt;n&gt; = 2<sup>k</sup></I>.
<P>
The inverse is exactly <var>n</var> times the transpose of HT.
<P>
<pre>    gap> InvHT(4);  
    [ [ 1, 1, E(8)-E(8)^3, 0 ], [ 1, 1, -E(8)+E(8)^3, 0 ], 
      [ 1, -1, 0, E(8)-E(8)^3 ], [ 1, -1, 0, -E(8)+E(8)^3 ] ] </pre>
<P><A NAME="SECT145"><h2>74.145 RationalizedHaarTransform</h2></a>
<P><P>
<A name = "I27"></a>

<P>
<code>RationalizedHaarTransform( <var>n</var> )</code>
<P>
shortcut: <code>RHT</code>
<P>
<code>RationalizedHaarTransform</code> returns the rationalized 
Haar transform on <var>n</var> points, 
which must be a power of 2, <I>&lt;n&gt; = 2<sup>k</sup></I>.
<P>
For a definition of the rationalized Haar transform 
see <A href="biblio.htm#ER82"><cite>ER82</cite></a>, 10.11.
<P>
<pre>    gap> RHT(4);
    [ [ 1, 1, 1, 1 ], [ 1, 1, -1, -1 ], 
      [ 1, -1, 0, 0 ], [ 0, 0, 1, -1 ] ] </pre>
<P><A NAME="SECT146"><h2>74.146 InverseRationalizedHaarTransform</h2></a>
<P><P>
<A name = "I28"></a>

<P>
<code>InverseRationalizedHaarTransform( <var>n</var> )</code>
<P>
shortcut: <code>InvRHT</code>
<P>
<code>InverseRationalizedHaarTransform</code> returns the inverse of the 
rationalized Haar transform on <var>n</var> points, 
which must be a power of 2, <I>&lt;n&gt; = 2<sup>k</sup></I>.
<P>
<pre>    gap> InvRHT(4);
    [ [ 1/4, 1/4, 1/2, 0 ], [ 1/4, 1/4, -1/2, 0 ], 
      [ 1/4, -1/4, 0, 1/2 ], [ 1/4, -1/4, 0, -1/2 ] ] </pre>
<P><A NAME="SECT147"><h2>74.147 Matrix Decomposition</h2></a>
<P><P><P>
The decomposition of a matrix <I>M</I> with symmetry is a striking 
application of constructive representation theory and was the 
original motivation to create the package \AREP. 
Here, decomposition means that <I>M</I> is decomposed into a 
product of highly structured sparse matrices. 
Applied to matrices corresponding to discrete signal transforms
such a decomposition may represent a fast algorithm for the
signal transform.
<P>
For the definition of symmetry see <a href="chap074.htm#SECT124">Symmetry of Matrices</a>.
<P>
The idea of decomposing a matrix with symmetry is due to Minkwitz
<A href="biblio.htm#Min95"><cite>Min95</cite></a>, <A href="biblio.htm#Min93"><cite>Min93</cite></a> and was further developed by the authors
of this package. See <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>, chapter 1 or <A href="biblio.htm#Pue98"><cite>Pue98</cite></a>, chapter 3
for a thorough explanation of the method.
<P>
The following three functions correspond to the three types 
of symmetry considered in this package (see <a href="chap074.htm#SECT124">Symmetry of Matrices</a>).
The functions are implemented in the file <code>"arep/lib/algogen.g"</code>.
<P><A NAME="SECT148"><h2>74.148 MatrixDecompositionByPermPermSymmetry</h2></a>
<P><P><P>
<code>MatrixDecompositionByPermPermSymmetry( <var>M</var> )</code>
<P>
Let <var>M</var> be a matrix or an amat (see <a href="chap074.htm#SECT022">AMats</a>). 
<code>MatrixDecompositionByPermPermSymmetry</code> returns a highly
structured amat of type <code>"product"</code> with all factors being
sparse which represents the matrix <var>M</var>. The returned amat 
can be viewed as a fast algorithm for the multiplication
with <var>M</var>.
<P>
The function uses the perm-perm symmetry (see <a href="chap074.htm#SECT125">PermPermSymmetry</a>)
to decompose the matrix (see <a href="chap074.htm#SECT147">Matrix Decomposition</a>) and 
can hence be accelerated by setting <code>UseLeon := true</code>
as described in <a href="chap074.htm#SECT124">Symmetry of Matrices</a>.
<P>
The following examples show that <code>MatrixDecompositionByPermPermSymmetry</code>
discovers automatically the method of Rader (see <A href="biblio.htm#Rad68"><cite>Rad68</cite></a>) 
for a discrete Fourier transform of prime degree as well as 
the well-known decomposition of circulant matrices.
<P>
<pre>    gap> M := DFT(5);;
    gap> PrintArray(M);
    [ [       1,       1,       1,       1,       1 ],
      [       1,    E(5),  E(5)^2,  E(5)^3,  E(5)^4 ],
      [       1,  E(5)^2,  E(5)^4,    E(5),  E(5)^3 ],
      [       1,  E(5)^3,    E(5),  E(5)^4,  E(5)^2 ],
      [       1,  E(5)^4,  E(5)^3,  E(5)^2,    E(5) ] ]
    gap> MatrixDecompositionByPermPermSymmetry(M);
    AMatPerm((4,5), 5) *
    DirectSumAMat(
      IdentityPermAMat(1),
      TensorProductAMat(
        DFTAMat(2),
        IdentityPermAMat(2)
      ) *
      DiagonalAMat([ 1, 1, 1, E(4) ]) *
      TensorProductAMat(
        IdentityPermAMat(2),
        DFTAMat(2)
      ) *
      AMatPerm((2,3), 4)
    ) *
    AMatPerm((1,4,2,5,3), 5) *
    DirectSumAMat(
      DiagonalAMat([ E(20)^4-E(20)^13-E(20)^16+E(20)^17, 
      E(5)-E(5)^2-E(5)^3+E(5)^4, E(20)^4+E(20)^13-E(20)^16-E(20)^17 ]),
      AMatMat(
        [ [ 1, 4 ], [ 1, -1 ] ]
      )
    ) *
    AMatPerm((1,3,5,2,4), 5) *
    DirectSumAMat(
      IdentityPermAMat(1),
      AMatPerm((2,3), 4) *
      TensorProductAMat(
        IdentityPermAMat(2),
        DiagonalAMat([ 1/2, 1/2 ]) *
        DFTAMat(2)
      ) *
      DiagonalAMat([ 1, 1, 1, -E(4) ]) *
      TensorProductAMat(
        DiagonalAMat([ 1/2, 1/2 ]) *
        DFTAMat(2),
        IdentityPermAMat(2)
      )
    ) *
    AMatPerm((3,4,5), 5) 

    gap> M := [[1, 2, 3], [3, 1, 2], [2, 3, 1]];;
    gap> PrintArray(M);
    [ [  1,  2,  3 ],
      [  3,  1,  2 ],
      [  2,  3,  1 ] ]
    gap> MatrixDecompositionByPermPermSymmetry(M);
    DFTAMat(3) *
    AMatMon( Mon(
      (2,3),
      [ 2, 2/3*E(3)+1/3*E(3)^2, 1/3*E(3)+2/3*E(3)^2 ]
    ) ) *
    DFTAMat(3) </pre>
<P><A NAME="SECT149"><h2>74.149 MatrixDecompositionByMonMonSymmetry</h2></a>
<P><P><P>
<code>MatrixDecompositionByMonMonSymmetry( <var>M</var> )</code>
<P>
Let <var>M</var> be a matrix or an amat (see <a href="chap074.htm#SECT022">AMats</a>). 
<code>MatrixDecompositionByMonMonSymmetry</code> returns a highly
structured amat of type <code>"product"</code> with all factors being
sparse which represents the matrix <var>M</var>. The returned amat 
can be viewed as a fast algorithm for the multiplication
with <var>M</var>.
<P>
The function uses the mon-mon symmetry (see <a href="chap074.htm#SECT126">MonMonSymmetry</a>)
to decompose the matrix (see <a href="chap074.htm#SECT147">Matrix Decomposition</a>) and 
can hence be accelerated by setting <code>UseLeon := true</code>
as described in <a href="chap074.htm#SECT124">Symmetry of Matrices</a>.
<P>
The following example show that <code>MatrixDecompositionByMonMonSymmetry</code>
is able to find automatically a decomposition of the discrete
cosine transform of type IV (see <a href="chap074.htm#SECT135">DiscreteCosineTransformIV</a>).
<P>
<pre>    gap> M := DCT_IV(8);;
    gap> MatrixDecompositionByMonMonSymmetry(M);
    AMatMon( Mon(
      (3,4,7,6,8,5),
      [ E(4), E(16)^5, E(8)^3, -E(16)^7, 1, -E(16), E(8), -E(16)^3 ]
    ) ) *
    TensorProductAMat(
      DFTAMat(2),
      IdentityPermAMat(4)
    ) *
    DiagonalAMat([ 1, 1, 1, 1, 1, E(8), E(4), E(8)^3 ]) *
    TensorProductAMat(
      IdentityPermAMat(2),
      DFTAMat(2),
      IdentityPermAMat(2)
    ) *
    DiagonalAMat([ 1, 1, 1, E(4), 1, 1, 1, E(4) ]) *
    TensorProductAMat(
      IdentityPermAMat(4),
      DFTAMat(2)
    ) *
    DiagonalAMat([ -E(64), -E(64), E(64)^9, -E(64)^9, E(64)^23, -E(64)^23, 
      E(64)^31, E(64)^31 ]) *
    TensorProductAMat(
      IdentityPermAMat(4),
      DiagonalAMat([ 1/2, 1/2 ]) *
      DFTAMat(2)
    ) *
    DiagonalAMat([ 1, 1, 1, -E(4), 1, 1, 1, -E(4) ]) *
    TensorProductAMat(
      IdentityPermAMat(2),
      DiagonalAMat([ 1/2, 1/2 ]) *
      DFTAMat(2),
      IdentityPermAMat(2)
    ) *
    DiagonalAMat([ 1, 1, 1, 1, 1, -E(8)^3, -E(4), -E(8) ]) *
    TensorProductAMat(
      DiagonalAMat([ 1/2, 1/2 ]) *
      DFTAMat(2),
      IdentityPermAMat(4)
    ) *
    AMatMon( Mon(
      (2,6,3,4,7,5,8),
      [ E(4), E(16)^5, -E(16)^7, E(8), E(8)^3, -E(16)^3, -E(16), 1 ]
    ) ) </pre>
<P><A NAME="SECT150"><h2>74.150 MatrixDecompositionByPermIrredSymmetry</h2></a>
<P><P><P>
<code>MatrixDecompositionByPermIrredSymmetry( <var>M</var> )</code><BR> 
<code>MatrixDecompositionByPermIrredSymmetry( <var>M</var>, <var>maxblocksize</var> )</code>
<P>
Let <var>M</var> be a matrix or an amat (see <a href="chap074.htm#SECT022">AMats</a>). 
<code>MatrixDecompositionByPermIrredSymmetry</code> returns a highly
structured amat of type <code>"product"</code> with all factors being
sparse which represents the matrix <var>M</var>. The returned amat 
can be viewed as a fast algorithm for the multiplication
with <var>M</var>.
<P>
The function uses the perm-irred symmetry (see <a href="chap074.htm#SECT127">PermIrredSymmetry</a>)
to decompose the matrix (see <a href="chap074.htm#SECT147">Matrix Decomposition</a>).
<P>
If <var>maxblocksize</var> is supplied only those perm-irred symmetries 
with all irreducibles having degree less than <var>maxblocksize</var>
are considered. The default for <var>maxblocksize</var> is 2.
<P>
Note that the perm-irred symmetry is not symmetric. Hence it is 
possible that a matrix <var>M</var> decomposes but its transpose not.
<P>
The following examples show that
<code>MatrixDecompositionByPermIrredSymmetry</code> discovers automatically the
Cooley-Tukey decomposition (see <A href="biblio.htm#CT65"><cite>CT65</cite></a>) of a discrete Fourier
transform as well as a decomposition of the transposed 
discrete cosine transform of type II (see <a href="chap074.htm#SECT133">DiscreteCosineTransform</a>).
<P>
<pre>    gap> M := DFT(4);
    [ [ 1, 1, 1, 1 ], [ 1, E(4), -1, -E(4) ], [ 1, -1, 1, -1 ], 
      [ 1, -E(4), -1, E(4) ] ]
    gap> MatrixDecompositionByPermIrredSymmetry(M);
    TensorProductAMat(
      DFTAMat(2),
      IdentityPermAMat(2)
    ) *
    DiagonalAMat([ 1, 1, 1, E(4) ]) *
    TensorProductAMat(
      IdentityPermAMat(2),
      DFTAMat(2)
    ) *
    AMatPerm((2,3), 4)

    gap> M := TransposedMat(DCT(8));;
    gap> MatrixDecompositionByPermIrredSymmetry(M);
    AMatPerm((1,2,6,7,5,3,8), 8) *
    TensorProductAMat(
      IdentityPermAMat(2),
      AMatPerm((3,4), 4) *
      TensorProductAMat(
        IdentityPermAMat(2),
        DFTAMat(2)
      ) *
      AMatPerm((2,3), 4) *
      DirectSumAMat(
        DFTAMat(2),
        IdentityPermAMat(2)
      )
    ) *
    AMatPerm((2,7,5,4,3)(6,8), 8) *
    DirectSumAMat(
      IdentityPermAMat(3),
      DirectSumAMat(
        IdentityPermAMat(1),
        AMatMat(
          [ [ -1/2*E(8)+1/2*E(8)^3, 1/2*E(8)-1/2*E(8)^3 ], 
            [  1/2*E(8)-1/2*E(8)^3, 1/2*E(8)-1/2*E(8)^3 ] ],
          "invertible"
        )
      ),
      IdentityPermAMat(2)
    ) *
    DirectSumAMat(
      TensorProductAMat(
        DFTAMat(2),
        IdentityPermAMat(3)
      ),
      IdentityPermAMat(2)
    ) *
    AMatPerm((2,7,3,8,4), 8) *
    DirectSumAMat(
      DiagonalAMat([ 1/4*E(8)-1/4*E(8)^3, 1/4*E(8)-1/4*E(8)^3 ]),
      AMatMat(
        [ [ 1/4*E(16)-1/4*E(16)^7, 1/4*E(16)^3-1/4*E(16)^5 ], 
          [ 1/4*E(16)^3-1/4*E(16)^5, -1/4*E(16)+1/4*E(16)^7 ] ]
      ),
      AMatMat(
        [ [ -1/4*E(32)+1/4*E(32)^15, -1/4*E(32)^7+1/4*E(32)^9 ], 
          [ 1/4*E(32)^7-1/4*E(32)^9, -1/4*E(32)+1/4*E(32)^15 ] ]
      ),
      AMatMat(
        [ [ -1/4*E(32)^3+1/4*E(32)^13, -1/4*E(32)^5+1/4*E(32)^11 ], 
          [ -1/4*E(32)^5+1/4*E(32)^11, 1/4*E(32)^3-1/4*E(32)^13 ] ]
      )
    ) *
    AMatPerm((2,5)(4,7)(6,8), 8) </pre>
<P><A NAME="SECT151"><h2>74.151 Complex Numbers</h2></a>
<P><P><P>
The next sections describe basic functions for the calculation 
with complex numbers which are represented as cyclotomics, 
e.g. computation of the complex conjugate or certain sine 
and cosine expressions.
<P>
The following functions are implemented in the file
<code>"arep/lib/complex.g"</code>.
<P><A NAME="SECT152"><h2>74.152 ImaginaryUnit</h2></a>
<P><P><P>
<code>ImaginaryUnit( )</code>
<P>
<code>ImaginaryUnit</code> returns <code>E(4)</code>.
<P>
<pre>    gap> ImaginaryUnit();
    E(4) </pre>
<P><A NAME="SECT153"><h2>74.153 Re</h2></a>
<P><P><P>
<code>Re( <var>z</var> )</code>
<P>
<code>Re</code> returns the real part of the cyclotomic <var>z</var>.
<P>
<pre>    gap> z := E(3) + E(4);
    E(12)^4-E(12)^7-E(12)^11
    gap> Re(z);
    -1/2 </pre>
<P>
<code>Re( <var>list</var> )</code>
<P>
<code>Re</code> returns the list of the real parts of the cyclotomics
in <var>list</var>.
<P><A NAME="SECT154"><h2>74.154 Im</h2></a>
<P><P><P>
<code>Im( <var>z</var> )</code>
<P>
<code>Im</code> returns the imaginary part of the cyclotomic <var>z</var>.
<P>
<pre>    gap> z := E(3) + E(4);
    E(12)^4-E(12)^7-E(12)^11
    gap> Im(z);
    -E(12)^4-1/2*E(12)^7-E(12)^8+1/2*E(12)^11 </pre>
<P>
<code>Im( <var>list</var> )</code>
<P>
<code>Im</code> returns the list of the imaginary parts of the cyclotomics
in <var>list</var>.
<P><A NAME="SECT155"><h2>74.155 AbsSqr</h2></a>
<P><P><P>
<code>AbsSqr( <var>z</var> )</code>
<P>
<code>AbsSqr</code> returns the squared absolute value of the cyclotomic <var>z</var>.
<P>
<pre>    gap> AbsSqr(z);
    -2*E(12)^4-E(12)^7-2*E(12)^8+E(12)^11 </pre>
<P>
<code>AbsSqr( <var>list</var> )</code>
<P>
<code>AbsSqr</code> returns the list of the squared absolute values 
of the cyclotomics in <var>list</var>.
<P><A NAME="SECT156"><h2>74.156 Sqrt</h2></a>
<P><P><P>
<code>Sqrt( <var>r</var> )</code>
<P>
<code>Sqrt</code> returns the square root of the rational number <var>r</var>.
<P>
<pre>    gap> Sqrt(1/3);
    1/3*E(12)^7-1/3*E(12)^11 </pre>
<P><A NAME="SECT157"><h2>74.157 ExpIPi</h2></a>
<P><P><P>
<code>ExpIPi( <var>r</var> )</code>
<P>
Let <var>r</var> be a rational number. <code>ExpIPi</code> returns <I>e<sup>&pi; i <var>r</var></sup></I>.
<P>
<pre>    gap> ExpIPi(1/5);
    -E(5)^3 </pre>
<P><A NAME="SECT158"><h2>74.158 CosPi</h2></a>
<P><P><P>
<code>CosPi( <var>r</var> )</code>
<P>
Let <var>r</var> be a rational number. <code>CosPi( <var>r</var> )</code> returns <I></I>cos<I>(&pi; <var>r</var>)</I>.
<P>
<pre>    gap> CosPi(1/5);
    -1/2*E(5)^2-1/2*E(5)^3 </pre>
<P><A NAME="SECT159"><h2>74.159 SinPi</h2></a>
<P><P><P>
<code>SinPi( <var>r</var> )</code>
<P>
Let <var>r</var> be a rational number. <code>SinPi( <var>r</var> )</code> returns <I></I>sin<I>(&pi; <var>r</var>)</I>.
<P>
<pre>    gap> SinPi(1/5);
     -1/2*E(20)^13+1/2*E(20)^17 </pre>
<P><A NAME="SECT160"><h2>74.160 TanPi</h2></a>
<P><P><P>
<code>TanPi( <var>r</var> )</code>
<P>
Let <var>r</var> be a rational number. <code>TanPi( <var>r</var> )</code> returns <I></I>tan<I>(&pi; <var>r</var>)</I>.
<P>
<pre>    gap> TanPi(1/5);
    E(20)-E(20)^9+E(20)^13-E(20)^17 </pre>
<P><A NAME="SECT161"><h2>74.161 Functions for Matrices and Permutations</h2></a>
<P><P><P>
The following sections describe basic functions for
matrices and permutations, like forming the tensor product 
(Kronecker product) or direct sum and determination
of the blockstructure of a matrix.
<P>
The following functions are implemented in the files
<code>"arep/lib/permblk.g"</code> (<code>kbs</code>, see <a href="chap074.htm#SECT167">kbs</a>), 
<code>"arep/lib/summands.g"</code> (<code>DirectSummandsPermutedMat</code>, 
see <a href="chap074.htm#SECT166">DirectSummandsPermutedMat</a>) and the file <code>"arep/lib/tools.g"</code>
(the other functions).
<P><A NAME="SECT162"><h2>74.162 TensorProductMat</h2></a>
<P><P><P>
<code>TensorProductMat( <var><I>M<sub>1</sub></I></var>, ..., <var><I>M<sub>k</sub></I></var> )</code>
<P>
<code>TensorProductMat</code> returns the tensor product of the matrices 
<I>&lt;M<sub>1</sub>&gt;, ..., <var>M_k</var></I>.
<P>
<pre>    gap> TensorProductMat( [[1]], [[1,2], [3,4]], [[5,6], [7,8]] );
    [ [ 5, 6, 10, 12 ], [ 7, 8, 14, 16 ], 
      [ 15, 18, 20, 24 ], [ 21, 24, 28, 32 ] ] </pre>
<P>
<code>TensorProductMat( <var>list</var> )</code>
<P>
<code>TensorProductMat</code> returns the tensor product of the matrices
in <var>list</var>.
<P><A NAME="SECT163"><h2>74.163 MatPerm</h2></a>
<P><P><P>
<code>MatPerm( <var>p</var>, <var>d</var> )</code>
<code>MatPerm( <var>p</var>, <var>d</var>, <var>char</var> )</code>
<P>
<code>MatPerm</code> returns the permutation matrix of degree <var>d</var> 
corresponding to the permutation <var>p</var> in characteristic <var>char</var>.
The default characteristic is 0. If <var>d</var> is less than the largest
moved point of <var>p</var> an error is signaled. 
<P>
We use the following convention to create a permutation 
<DL><DT>matrix from a permutation <var>p</var> with degree <var>d</var>:<DD> 
<I>[&delta;<sub>i<sup><var>p</var></sup> j</sub>| i,j&isin;{1,...,<var>d</var>}]</I>.
</DL><P>
<pre>    gap> MatPerm( (1,2,3), 4 );
    [ [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 1, 0, 0, 0 ], [ 0, 0, 0, 1 ] ] </pre>
<P><A NAME="SECT164"><h2>74.164 PermMat</h2></a>
<P><P><P>
<code>PermMat( <var>M</var> )</code>
<P>
<code>PermMat</code> returns the permutation represented by the matrix <var>M</var>
and returns false otherwise. For the convention see <a href="chap074.htm#SECT163">MatPerm</a>.
<P>
<pre>    gap> PermMat( [[0,0,1], [1,0,0], [0,1,0]] );
    (1,3,2) </pre>
<P><A NAME="SECT165"><h2>74.165 PermutedMat</h2></a>
<P><P><P>
<code>PermutedMat( <var><I>p<sub>1</sub></I></var>, <var>M</var>, <var><I>p<sub>2</sub></I></var> )</code>
<P>
Let <var><I>p<sub>1</sub></I></var>, <var><I>p<sub>2</sub></I></var> be permutations and <var>M</var> a matrix 
with <var>r</var> rows and <var>c</var> columns.
<code>PermutedMat</code> returns <code>MatPerm( <var><I>p<sub>1</sub></I></var>, <var>r</var> )</code>
<I>. <var>M</var>.</I><code>MatPerm( <var><I>p<sub>2</sub></I></var>, <var>c</var> )</code> (see <a href="chap074.htm#SECT163">MatPerm</a>).
The largest moved point of <var><I>p<sub>1</sub></I></var> and <var><I>p<sub>2</sub></I></var> must 
not exceed <var>r</var> resp. <var>c</var> otherwise an error is signaled.
<P>
<pre>    gap> PermutedMat( (1,2), [[1,2,3], [4,5,6], [7,8,9]], (1,2,3) );
    [ [ 6, 4, 5 ], [ 3, 1, 2 ], [ 9, 7, 8 ] ] </pre>
<P><A NAME="SECT166"><h2>74.166 DirectSummandsPermutedMat</h2></a>
<P><P><P>
<code>DirectSummandsPermutedMat( <var>M</var> )</code><BR> 
<code>DirectSummandsPermutedMat( <var>M</var>, <var>match-blocks</var> )</code>
<P>
Let <var>M</var> be a matrix. <code>DirectSummandsPermutedMat</code> returns the list 
<code>[ <var><I>p<sub>1</sub></I></var>, [ <var><I>M<sub>1</sub></I></var>, ..., <var><I>M<sub>k</sub></I></var> ], <var><I>p<sub>2</sub></I></var> ]</code> where 
<var><I>p<sub>1</sub></I></var>, <var><I>p<sub>2</sub></I></var> are permutations and <var><I>M<sub>i</sub></I></var>, <I>i = 1,...,k</I>, are 
matrices with the property 
<I>&lt;M&gt; = <code>PermutedMat( <var>p_1</var>, DiagonalMat( <var>M_1</var>, ..., <var>M_k</var> ), 
<var>p_2</var> )</code></I> (see <a href="chap074.htm#SECT165">PermutedMat</a>, <a href="chap034.htm#SECT012">DiagonalMat</a>).
If <var>match-blocks</var> is <code>true</code> or not provided then the permutations
<var><I>p<sub>1</sub></I></var> and <var><I>p<sub>2</sub></I></var> are chosen such that equivalent <var><I>M<sub>i</sub></I></var>
are equal and occur next to each other.
If <var>match-blocks</var> is <code>false</code> this is not done.
<P>
For an explanation of the algorithm see <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>.
<P>
<pre>    gap> M := [ [ 0, 0, 0, 2, 0, 1], [ 3, 1, 0, 0, 0, 0], 
     > [ 0, 0, 1, 0, 2, 0], [ 1, 2, 0, 0, 0, 0], 
     > [ 0, 0, 0, 1, 0, 3], [ 0, 0, 3, 0, 1, 0] ];;
    gap> PrintArray(M);                                                       
    [ [  0,  0,  0,  2,  0,  1 ],
      [  3,  1,  0,  0,  0,  0 ],
      [  0,  0,  1,  0,  2,  0 ],
      [  1,  2,  0,  0,  0,  0 ],
      [  0,  0,  0,  1,  0,  3 ],
      [  0,  0,  3,  0,  1,  0 ] ]
    gap> DirectSummandsPermutedMat(M);
    [ (2,4,3,5), 
      [ [ [ 2, 1 ], [ 1, 3 ] ], 
        [ [ 2, 1 ], [ 1, 3 ] ], 
        [ [ 2, 1 ], [ 1, 3 ] ] ], 
      (1,4)(2,6,3) ] </pre>
<P><A NAME="SECT167"><h2>74.167 kbs</h2></a>
<P><P><P>
<code>kbs( <var>M</var> )</code>
<P>
Let <var>M</var> be a square matrix of degree <var>n</var>. 
<code>kbs</code> (konjugierte Blockstruktur = conjugated block structure) 
returns the partition <I></i>kbs<i>(<var>M</var>) = {1,...,n}/R<sup>*</sup> </I> where
<I>R</I> is the reflexive, symmetric, transitive closure of the relation
<I>R</I> defined by <I>(i,j)&isin; R&hArr; <code><var>M</var>[<var>i</var>][<var>j</var>]\neq 0</code></I>.
<P>
For an investigation of the kbs of a matrix see <A href="biblio.htm#Egn97"><cite>Egn97</cite></a>.
<P>
<pre>    gap> M := [[1,0,1,0], [0,2,0,3], [1,0,3,0], [0,4,0,1]];
    [ [ 1, 0, 1, 0 ], [ 0, 2, 0, 3 ], [ 1, 0, 3, 0 ], [ 0, 4, 0, 1 ] ]
    gap> PrintArray(M);
    [ [  1,  0,  1,  0 ],
      [  0,  2,  0,  3 ],
      [  1,  0,  3,  0 ],
      [  0,  4,  0,  1 ] ]
    gap> kbs(M);
    [ [ 1, 3 ], [ 2, 4 ] ] </pre>
<P>
<code>kbs( <var>list</var> )</code>
<P>
<code>kbs</code> returns the joined kbs of the matrices in <var>list</var>.
The matrices in <var>list</var> must have common size otherwise an 
error is signaled.
<A NAME="SECT168"><h2>74.168 DirectSumPerm</h2></a>
<P><P><P>
<code>DirectSumPerm( <var>list1</var>, <var>list2</var> )</code>
<P>
Let <var>list2</var> contain permutations and <var>list1</var> be 
of the same length and contain degrees equal or larger
than the corresponding largest moved points.
<code>DirectSumPerm</code> returns the direct sum of the permutations
defined via the direct sum of the corresponding matrices.
<P>
<pre>    gap> DirectSumPerm( [3, 3], [(1,2), (1,2,3)] );
    (1,2)(4,5,6) </pre>
<P><A NAME="SECT169"><h2>74.169 TensorProductPerm</h2></a>
<P><P><P>
<code>TensorProductPerm( <var>list1</var>, <var>list2</var> )</code>
<P>
Let <var>list2</var> contain permutations and <var>list1</var> be 
of the same length and contain degrees equal or larger
than the corresponding largest moved points.
<code>TensorProductPerm</code> returns the tensor product (Kronecker product)
of the permutations defined via the tensor product
of the corresponding matrices.
<P>
<pre>    gap> TensorProductPerm( [3, 3], [(1,2), (1,2,3)] );
    (1,5,3,4,2,6)(7,8,9) </pre>
<P><a href ="chap073.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap075.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
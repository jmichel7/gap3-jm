<html><head><title>GAP3 Manual: 58 ANU Pq</title></head>
<body bgcolor="ffffff">
<h1>58 ANU Pq</h1>
<P><P><P>
The ANU <I>p</I>-quotient program (pq) may  be called from <strong>GAP3</strong>.  Using this
program,  <strong>GAP3</strong>  provides access to   the  following: the <I>p</I>-quotient
algorithm;  the <I>p</I>-group  generation algorithm; a  standard presentation
algorithm; an algorithm to compute the automorphism group of a <I>p</I>-group.
<P>
The  following section describes the function <code>Pq</code>, which gives access to
the <I>p</I>-quotient algorithm.
<P>
The next section  describes  the  function <code>PqDescendants</code>,  which  gives
access to the <I>p</I>-group generation algorithm.
<P>
The next sections describe  functions for  saving  results  to  file (see
<a href="chap058.htm#SECT004">PqList</a> and <a href="chap058.htm#SECT005">SavePqList</a>).
<P>
The  next  section describes  the  function <code>StandardPresentation</code>  which
gives access to the standard presentation algorithm and to the  algorithm
used to compute the automorphism group of a <I>p</I>-group.
<P>
The  last sections  describes  the  function  <code>IsIsomorphicPGroup</code>  which
implements  an  isomorphism  test  for  <I>p</I>-groups  using  the   standard
presentation algorithm.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap058.htm#SECT001">Pq</a>
<LI> <A HREF="chap058.htm#SECT002">PqHomomorphism</a>
<LI> <A HREF="chap058.htm#SECT003">PqDescendants</a>
<LI> <A HREF="chap058.htm#SECT004">PqList</a>
<LI> <A HREF="chap058.htm#SECT005">SavePqList</a>
<LI> <A HREF="chap058.htm#SECT006">StandardPresentation</a>
<LI> <A HREF="chap058.htm#SECT007">IsomorphismPcpStandardPcp</a>
<LI> <A HREF="chap058.htm#SECT008">AutomorphismsPGroup</a>
<LI> <A HREF="chap058.htm#SECT009">IsIsomorphicPGroup</a>
</ol>
<A NAME="SECT001"><h2>58.1 Pq</h2></a>
<P><P><P>
<code>Pq( <var>F</var>, ... )</code>
<P>
Let <var>F</var> be a  finitely presented  group.  Then  <code>Pq</code> returns  the desired
<I>p</I>-quotient of <var>F</var> as an ag group.
<P>
The following parameters or parameter pairs are supported.
<P>
<DL><DT>"Prime", <var>p</var>:<DD> <BR> 
    Compute the <I>p</I>-quotient for the prime <var>p</var>.
</DL><P>
<DL><DT>"ClassBound", <var>n</var>:<DD> <BR> 
    The <I>p</I>-quotient computed has lower exponent-<I>p</I> class at most <var>n</var>.
</DL><P>
<DL><DT>"Exponent", <var>n</var>:<DD> <BR> 
    The <I>p</I>-quotient computed has exponent <var>n</var>.
    By default, no exponent law is enforced.
</DL><P>
<DL><DT>"Metabelian":<DD> <BR> 
    The largest metabelian <I>p</I>-quotient is constructed.
</DL><P>
<DL><DT>"Verbose":<DD> <BR> 
    The runtime-information generated  by  the ANU  pq is  displayed.  By
    default, pq works silently.
</DL><P>
<DL><DT>"OutputLevel", <var>n</var>:<DD> <BR> 
    The runtime-information  generated by the  ANU  pq  is  displayed  at
    output  level  <var>n</var>,  which  must  be a  integer from  0 to  3.   This
    parameter implies "Verbose".
</DL><P>
<DL><DT>"SetupFile", <var>name</var>:<DD> <BR> 
    Do not run the ANU pq, just  construct the input file and store it in
    the file <var>name</var>. In this case <code>true</code> is returned.
</DL><P>
Alternatively, you can pass <code>Pq</code> a record as a parameter, which  contains
as entries some (or all)  of the above mentioned.  Those parameters which
do not occur in the record are set to their default values.
<P>
See also <a href="chap058.htm#SECT002">PqHomomorphism</a>.
<P>
<pre>    gap> RequirePackage("anupq");
    gap> f2 := FreeGroup( 2, "f2" );
    Group( f2.1, f2.2 )
    gap> Pq( f2, rec( Prime := 2,  ClassBound := 3 ) );
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7, G.8, G.9, G.10 )
    gap> g := f2 / [ f2.1^4, f2.2^4 ];;
    gap> Pq( g, rec( Prime := 2, ClassBound := 3 ) );
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7, G.8 )
    gap> Pq( g, "Prime", 2, "ClassBound", 3, "Exponent", 4 );
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7 )
    gap> g := f2 / [ f2.1^25, Comm(Comm(f2.2,f2.1),f2.1), f2.2^5 ];;
    gap> Pq( g, "Prime", 5, "Metabelian", "ClassBound", 5 );
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7 ) </pre>
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT002"><h2>58.2 PqHomomorphism</h2></a>
<P><P><P>
<code>PqHomomorphism( <var>G</var>, <var>images</var> )</code>
<P>
Let <var>G</var> be a <I>p</I>-quotient of <I>F</I> computed  using  <code>Pq</code>. If <var>images</var>  is a
list  of  images  of  <code><I>F</I>.generators</code>  under  an  automorphism  of  <I>F</I>,
<code>PqHomomorphism</code> will return the corresponding automorphism of <var>G</var>.
<P>
<pre>    gap> F := FreeGroup (2, "F");
    Group( F.1, F.2 )
    gap> G := Pq (F, "Prime", 5, "Class", 2);
    Group( G.1, G.2, G.3, G.4, G.5 )
    gap> PqHomomorphism (G, [F.2, F.1]);
    GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5 ), Group(
    G.1, G.2, G.3, G.4, G.5 ), [ G.1, G.2, G.3, G.4, G.5 ],
    [ G.2, G.1, G.3^4, G.5, G.4 ] ) </pre>
<P><A NAME="SECT003"><h2>58.3 PqDescendants</h2></a>
<P><P><P>
<code>PqDescendants( <var>G</var>, ... )</code>
<P>
Let  <var>G</var>  be  an  ag  group  of  prime  power  order  with  a  consistent
power-commutator  presentation   (see  <a href="chap025.htm#SECT028">IsConsistent</a>).   <code>PqDescendants</code>
returns a list of descendants of <var>G</var>.
<P>
If <var>G</var>  does  <strong>not</strong> have p-class 1,  then a list of  automorphisms of <var>G</var>
must  be  bound  to the  record  component <code><var>G</var>.automorphisms</code> such  that
<code><var>G</var>.automorphisms</code> together with the inner automorphisms of <var>G</var> generate
the automorphism group of <var>G</var>.
<P>
One method  which  may be  used  to obtain such a generating set  for the
automorphism  group  is  to  call  <code>StandardPresentation</code>.   The record
returned has a generating set for the automorphism group of <var>G</var> stored as
a component (see <a href="chap058.htm#SECT006">StandardPresentation</a>).
<P>
The following optional parameters or parameter pairs are supported.
<P>
<DL><DT>"ClassBound", <var>n</var>:<DD> <BR> 
    <code>PqDescendants</code> generates  only  descendants  with lower exponent-<I>p</I>
    class  at most  <var>n</var>.  The default value is  the exponent-<I>p</I> class of
    <var>G</var> plus one.
</DL><P>
<DL><DT>"OrderBound", <var>n</var>:<DD> <BR> 
    <code>PqDescendants</code> generates only descendants of  size at  most <I>p<sup><var>n</var></sup> </I>.
    Note that you cannot set both "OrderBound" and "StepSize".
</DL><P>
<DL><DT>"StepSize", <var>n</var>:<DD> <BR> 
    Let <var>n</var> be a  positive integer.  <code>PqDescendants</code> generates only those
    immediate  descendants  which are <I>p<sup><var>n</var></sup> </I>  bigger  than  their parent
    group.
</DL><P>
<DL><DT>"StepSize", <var>l</var>:<DD> <BR> 
    Let <var>l</var> be a  list of  positive  integers such that  the  sum  of the
    length of <var>l</var> and the exponent-<I>p</I> class of <var>G</var> is equal to the class
    bound "ClassBound".  Then  <var>l</var> describes  the  step size  for  each
    additional class.
</DL><P>
<DL><DT>"AgAutomorphisms":<DD> <BR> 
    The automorphisms stored in <code><var>G</var>.automorphisms</code> are  a PAG generating
    sequence for  the  automorphism group  of  <var>G</var> supplied in  <strong>reverse</strong>
    order.
</DL><P>
<DL><DT>"RankInitialSegmentSubgroups", <var>n</var>:<DD> <BR> 
    Set the rank  of the  initial  segment  subgroup chosen to  be <var>n</var>.
    By default, this has value 0.
</DL><P>
<DL><DT>"SpaceEfficient":<DD> <BR> 
    The ANU  pq performs  calculations  more slowly but with greater space
    efficiency.
    This  flag is  frequently  necessary  for  groups of  large  Frattini
    quotient rank.  The space  saving occurs because only one permutation
    is  stored at  any  one  time.   This option  is  only  available  in
    conjunction with the "AgAutomorphisms" flag.
</DL><P>
<DL><DT>"AllDescendants":<DD> <BR> 
    By default, only capable descendants are constructed. If this flag
    is set, compute all descendants.
</DL><P>
<DL><DT>"Exponent", <var>n</var>:<DD> <BR> 
    Construct only descendants with exponent <var>n</var>.  Default is no exponent
    law.
</DL><P>
<DL><DT>"Metabelian":<DD> <BR> 
    Construct only metabelian descendants.
</DL><P>
<DL><DT>"SubList", <var>sub</var>:<DD> <BR> 
    Let <I>L</I>  be  the  list of  descendants  generated.  If  list <var>sub</var> is
    supplied,  <code>PqDescendants</code>  returns  <code>Sublist( <I>L</I>,<var>sub</var> )</code>.  If   an
    integer <var>n</var> is supplied, <code>PqDescendants</code> returns <I>L[<var>n</var>]</I>.
</DL><P>
<DL><DT>"Verbose":<DD> <BR> 
    The runtime-information  generated by  the  ANU pq is  displayed.  By
    default, pq works silently.
</DL><P>
<DL><DT>"SetupFile", <var>name</var>:<DD> <BR> 
    Do not run the ANU pq, just construct  the input file and store it in
    the file <var>name</var>. In this case <code>true</code> is returned.
</DL><P>
<DL><DT>"TmpDir", <var>dir</var>:<DD> <BR> 
    <code>PqDescendants</code> stores intermediate results  in temporary  files; the
    location  of  these  files  is  determined  by the value  selected by
    <code>TmpName</code>.  If your default temporary directory does not  have enough
    free disk space,  you can supply an alternative path  <var>dir</var>.  In this
    case <code>PqDescendants</code> stores its intermediate results  in  a temporary
    subdirectory of <var>dir</var>.
    Alternatively, you can globally set  the  variable <code>ANUPQtmpDir</code>, for
    instance in your ".gaprc" file, to point to a suitable location.
</DL><P>
Alternatively,  you can pass <code>PqDescendants</code>  a record  as  a  parameter,
which  contains  as  entries some (or all) of the above mentioned.  Those
parameters  which do not occur  in  the record are  set  to their default
values.
<P>
Note that you cannot set both "OrderBound" and "StepSize".
<P>
In the first example  we  compute all descendants of the Klein four group
which have exponent-2 class at most 5 and order at most <I>2<sup>6</sup></I>.
<P>
<pre>    gap> f2 := FreeGroup( 2, "g" );;
    gap> g := AgGroupFpGroup(f2 / [f2.1^2, f2.2^2, Comm(f2.2,f2.1)]);
    Group( g.1, g.2 )
    gap> g.name := "g";;
    gap> l := PqDescendants( g, "OrderBound", 6, "ClassBound", 5,
    >                        "AllDescendants" );;
    gap> Length(l);
    83
    gap> Number( l, x -> x.isCapable );
    47
    gap> List( l, x -> Size(x) );
    [ 8, 8, 8, 16, 16, 16, 32, 16, 16, 16, 16, 16, 32, 32, 64, 64, 32,
      32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 32, 32,
      32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
      64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 ]
    gap> List( l, x -> Length( PCentralSeries( x, 2 ) ) - 1 );
    [ 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5 ] </pre>
<P>
In the second example we compute all  capable descendants of order  27 of
the  elementary abelian group of order 9.  Here, we supply  automorphisms
which form a  PAG generating  sequence (in reverse order) for the class 1
group, since this  makes the computation more efficient.
<P>
<pre>    gap> f2 := FreeGroup( 2, "g" );;
    gap> g := AgGroupFpGroup(f2 / [ f2.1^3, f2.2^3, Comm(f2.1,f2.2) ]);
    Group( g.1, g.2 )
    gap> g.name := "g";;
    gap> g.automorphisms := [];;
    gap> GroupHomomorphismByImages(g, g, [g.1, g.2], [g.1^2, g.2^2]);;
    gap> Add( g.automorphisms, last );
    gap> GroupHomomorphismByImages(g, g, [g.1, g.2], [g.2^2, g.1]);;
    gap> Add( g.automorphisms, last );
    gap> GroupHomomorphismByImages(g,g,[g.1,g.2],[g.1*g.2^2,g.1^2*g.2^2]);;
    gap> Add( g.automorphisms, last );
    gap> GroupHomomorphismByImages(g, g, [g.1,g.2], [g.1,g.1^2*g.2]);;
    gap> Add( g.automorphisms, last );
    gap> GroupHomomorphismByImages(g, g, [g.1, g.2], [g.1^2, g.2]);;
    gap> Add( g.automorphisms, last );
    gap> l := PqDescendants( g, "OrderBound", 3,
    >                           "ClassBound", 2,
    >                           "AgAutomorphisms" );;
    gap> Length(l);
    2
    gap> List( l, x -> Size(x) );
    [ 27, 27 ]
    gap> List( l, x -> Length( PCentralSeries( x, 3 ) ) - 1 );
    [ 2, 2 ] </pre>
<P>
In  the  third  example,  we  compute  all  capable  descendants  of  the
elementary abelian group of order  <I>5<sup>2</sup></I> which have exponent-<I>5</I> class at
most <I>3</I>, exponent <I>5</I>, and are metabelian.
<P>
<pre>    gap> f2 := FreeGroup( 2, "g" );;
    gap> g := AgGroupFpGroup( f2 / [f2.1^5, f2.2^5, Comm(f2.2,f2.1)] );
    Group( g.1, g.2 )
    gap> g.name := "g";;
    gap> l := PqDescendants(g,"Metabelian","ClassBound",3,"Exponent",5);;
    gap> List( l, x -> Length( PCentralSeries( x, 5 ) ) - 1 );
    [ 2, 3, 3 ]
    gap> List( l, x -> Length( DerivedSeries( x ) ) );
    [ 3, 3, 3 ]
    gap> List( l, x -> Maximum( List( Elements(x), y -> Order(x,y) ) ) );
    [ 5, 5, 5 ] </pre>
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT004"><h2>58.4 PqList</h2></a>
<P><P><P>
<code>PqList( <var>file</var> )</code> <BR> 
<code>PqList( <var>file</var>, <var>sub</var> )</code> <BR> 
<code>PqList( <var>file</var>, <var>n</var> )</code>
<P>
The function <code>PqList</code> reads a file  <var>file</var> and returns the list <I>L</I> of ag
groups defined in this file.
<P>
If list <var>sub</var> is supplied as a parameter, the function  returns <code>Sublist(
<I>L</I>, <var>sub</var> )</code>.  If an integer <var>n</var> is supplied, <code>PqList</code> returns <I>L[<var>n</var>]</I>.
<P>
This  function  and  <code>SavePqList</code>  (see  <a href="chap058.htm#SECT005">SavePqList</a>)  can  be  used  to
save and restore a list of descendants (see <a href="chap058.htm#SECT003">PqDescendants</a>).
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT005"><h2>58.5 SavePqList</h2></a>
<P><P><P>
<code>SavePqList( <var>name</var>, <var>list</var> )</code>
<P>
The function <code>SavePqList</code> writes a list of  descendants  <var>list</var> to a file
<var>name</var>.
<P>
This function and <code>PqList</code> (see <a href="chap058.htm#SECT004">PqList</a>) can be used to save and restore
results of <code>PqDescendants</code> (see <a href="chap058.htm#SECT003">PqDescendants</a>).
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT006"><h2>58.6 StandardPresentation</h2></a>
<P><P>
<A name = "I0"></a>

<P>
<code>StandardPresentation( <var>F</var>, <var>p</var>, ...  )</code> <BR> 
<code>StandardPresentation( <var>F</var>, <var>G</var>, ...  )</code>
<P>
Let  <var>F</var> be  a  finitely  presented group.   Then  <code>StandardPresentation</code>
returns the standard presentation for the  desired <I>p</I>-quotient of <var>F</var> as
an ag group.
<P>
Let <var>H</var> be the  <I>p</I>-quotient whose standard presentation is  computed.  A
generating set for a supplement to the inner automorphism group of <var>H</var> is
also  returned,   stored  as  the  component  <code><var>H</var>.automorphisms</code>.   Each
generator is described by  its  action on  each of the generators  of the
standard presentation of <var>H</var>.
<P>
A  finitely-presented group <var>F</var> must be  supplied  as input. Usually, the
user will  also  supply a prime  <var>p</var> and  the  program will  compute  the
standard presentation for the desired <I>p</I>-quotient of <var>F</var>.
<P>
Alternatively,  a  user may supply an ag group <var>G</var> which  is the class  1
<I>p</I>-quotient of <var>F</var>. If  this is  so, a list of automorphisms of <var>G</var> must
be   bound  to   the   record  component  <code><var>G</var>.automorphisms</code>  such  that
<code><var>G</var>.automorphisms</code> together with the inner automorphisms of <var>G</var> generate
the  automorphism  group  of  <var>G</var>.   The  presentation  for  <var>G</var>  can  be
constructed by an initial call to Pq (see <a href="chap058.htm#SECT001">Pq</a>).
<P>
Of  course, <var>G</var> need  not be the class  1 <I>p</I>-quotient of <var>F</var>.   However,
<code><var>G</var>.automorphisms</code> must contain a description of the  automorphism group
of  <var>G</var>  and this is  most readily  available when  <var>G</var> is  an elementary
abelian  group.   Where the  necessary information  is  available  for  a
<I>p</I>-quotient of higher class,  one  can  apply  the standard presentation
algorithm from that class onwards.
<P>
The following parameters or parameter pairs are supported.
<P>
<DL><DT>"ClassBound", <var>n</var>:<DD> <BR> 
    The  standard presentation is  computed for  the largest <I>p</I>-quotient
    of <var>F</var> having lower exponent-<I>p</I> class at most <var>n</var>.
</DL><P>
<DL><DT>"Exponent", <var>n</var>:<DD> <BR> 
    The <I>p</I>-quotient computed has  exponent <var>n</var>.  By default, no exponent
    law is enforced.
</DL><P>
<DL><DT>"Metabelian":<DD> <BR> 
    The <I>p</I>-quotient constructed is metabelian.
</DL><P>
<DL><DT>"AgAutomorphisms":<DD> <BR> 
    The automorphisms stored in <code><var>G</var>.automorphisms</code> are  a PAG generating
    sequence  for the automorphism group  of  <var>G</var>  supplied  in <strong>reverse</strong>
    order.
</DL><P>
<DL><DT>"Verbose":<DD> <BR> 
    The  runtime-information generated by  the  ANU  pq is displayed.  By
    default, pq works silently.
</DL><P>
<DL><DT>"OutputLevel", <var>n</var>:<DD> <BR> 
    The  runtime-information generated  by  the  ANU pq is  displayed  at
    output level  <var>n</var>, which  must  be  a integer  from  0  to  3.   This
    parameter implies "Verbose".
</DL><P>
<DL><DT>"SetupFile", <var>name</var>:<DD> <BR> 
    Do not run the ANU pq, just construct the input file and  store it in
    the file <var>name</var>. In this case <code>true</code> is returned.
</DL><P>
<DL><DT>"TmpDir", <var>dir</var>:<DD> <BR> 
    <code>StandardPresentation</code>  stores  intermediate  results  in   temporary
    files;  the location  of  these  files  is  determined by  the  value
    selected by <code>TmpName</code>.  If your default  temporary directory does not
    have enough  free  disk  space,  you  can supply an  alternative path
    <var>dir</var>.  In this case  <code>StandardPresentation</code> stores its  intermediate
    results in a temporary subdirectory of <var>dir</var>.  Alternatively, you can
    globally  set  the  variable  <code>ANUPQtmpDir</code>,  for  instance  in  your
    ".gaprc" file, to point to a suitable location.
</DL><P>
Alternatively,  you  can  pass   <code>StandardPresentation</code>  a  record  as  a
parameter,  which  contains  as  entries  some  (or  all)  of  the  above
mentioned.  Those parameters which do not occur in the record are set  to
their default values.
<P>
We illustrate the method with the following examples.
<P>
<pre>    gap> f2 := FreeGroup( "a", "b" );;
    gap> g := f2 / [f2.1^25, Comm(Comm(f2.2,f2.1), f2.1), f2.2^5];
    Group( a, b )
    gap> StandardPresentation( g, 5, "ClassBound", 10 );
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7, G.8, G.9, G.10, G.11, G.12,
    G.13, G.14, G.15, G.16, G.17, G.18, G.19, G.20, G.21, G.22, G.23,
    G.24, G.25, G.26 )
    gap> f2 := FreeGroup( "a", "b" );;
    gap> g := f2 / [ f2.1^625,
    >  Comm(Comm(Comm(Comm(f2.2,f2.1),f2.1),f2.1),f2.1)/Comm(f2.2,f2.1)^5,
    >  Comm(Comm(f2.2,f2.1),f2.2), f2.2^625 ];;
    gap> StandardPresentation( g, 5, "ClassBound", 15, "Metabelian" );
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7, G.8, G.9, G.10, G.11, G.12,
    G.13, G.14, G.15, G.16, G.17, G.18, G.19, G.20 )
    gap> f4 := FreeGroup( "a", "b", "c", "d" );;
    gap> g4 := f4 / [ f4.2^4, f4.2^2 / Comm(Comm (f4.2, f4.1), f4.1),
    >                f4.4^16, f4.1^16 / (f4.3 * f4.4),
    >                f4.2^8 / (f4.4 * f4.3^4) ];
    Group( a, b, c, d )
    gap> g := Pq( g4, "Prime", 2, "ClassBound", 1 );
    Group( G.1, G.2 )
    gap> g.automorphisms := [];;
    gap> GroupHomomorphismByImages(g,g,[g.1,g.2],[g.2,g.1*g.2]);;
    gap> Add( g.automorphisms, last );
    gap> GroupHomomorphismByImages(g,g,[g.1,g.2],[g.2,g.1]);;
    gap> Add( g.automorphisms, last );
    gap> StandardPresentation(g4,g,"ClassBound",14,"AgAutomorphisms");
    Group( G.1, G.2, G.3, G.4, G.5, G.6, G.7, G.8, G.9, G.10, G.11, G.12,
    G.13, G.14, G.15, G.16, G.17, G.18, G.19, G.20, G.21, G.22, G.23,
    G.24, G.25, G.26, G.27, G.28, G.29, G.30, G.31, G.32, G.33, G.34,
    G.35, G.36, G.37, G.38, G.39, G.40, G.41, G.42, G.43, G.44, G.45,
    G.46, G.47, G.48, G.49, G.50, G.51, G.52, G.53 ) </pre>
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT007"><h2>58.7 IsomorphismPcpStandardPcp</h2></a>
<P><P><P>
<code>IsomorphismPcpStandardPcp( <var>G</var>, <var>S</var>  )</code> <BR> 
<P>
Let  <var>G</var> be  a  <I>p</I>-group and  let <var>S</var>  be  the  standard presentation
computed for <var>G</var> by <code>StandardPresentation</code>. <code>IsomorphismPcpStandardPcp</code>
returns the isomorphism from <var>G</var> to <var>S</var>.
<P>
We illustrate the function with the following example.
<P>
<pre>    gap> F := FreeGroup (6);
    Group( f.1, f.2, f.3, f.4, f.5, f.6 )
    gap> x := F.1;; y := F.2;; z := F.3;; w := F.4;; a := F.5;; b := F.6;;
    gap> R := [x^3 / w, y^3 / w * a^2 * b^2, w^3 / b,
    >             Comm (y, x) / z, Comm (z, x), Comm (z, y) / a, z^3 ];;
    gap> q := F / R;;
    gap> G := Pq (q, "Prime", 3, "ClassBound", 3);
    Group( G.1, G.2, G.3, G.4, G.5, G.6 )
    gap> S := StandardPresentation (q, 3, "ClassBound", 3);
    Group( G.1, G.2, G.3, G.4, G.5, G.6 )
    gap> phi := IsomorphismPcpStandardPcp (G, S);
    GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5,
    G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
    [ G.1, G.2, G.3, G.4, G.5, G.6 ],
    [ G.1*G.2^2*G.3*G.4^2*G.5^2, G.1*G.2*G.3*G.5, G.3^2, G.4*G.6^2, G.5,
      G.6 ] ) </pre>
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT008"><h2>58.8 AutomorphismsPGroup</h2></a>
<P><P>
<A name = "I1"></a>

<P>
<code>AutomorphismsPGroup( <var>G</var> )</code> <BR> 
<code>AutomorphismsPGroup( <var>G</var>, <var>output-level</var>)</code> <BR> 
<P>
Let  <var>G</var>  be  a  <I>p</I>-group.   Then  <code>AutomorphismsPGroup</code>   returns  a
generating  set  for  the automorphism  group of <var>G</var>.  Each  generator
is    described   by its  action  on  each  of  the generators of <var>G</var>.
The runtime-information  generated  by  the ANU pq is displayed at
<var>output-level</var>, which must be a integer from 0 to 3.
<P>
We illustrate the function using the <I>p</I>-group considered above.
<P>
<pre>    gap> Auts := AutomorphismsPGroup (G);
    [ GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5,
        G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ],
        [ G.1, G.2*G.5^2, G.3, G.4, G.5, G.6 ] ),
      GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5,
        G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ],
        [ G.1, G.2*G.3, G.3, G.4, G.5, G.6 ] ),
      GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5,
        G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ], [ G.1*G.3^2, G.2, G.3*G.5, G.4,
          G.5, G.6 ] ), GroupHomomorphismByImages( Group( G.1, G.2, G.3,
        G.4, G.5, G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ],
        [ G.1*G.6, G.2*G.6, G.3, G.4, G.5, G.6 ] ),
      GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5,
        G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ], [ G.1*G.5^2, G.2*G.5, G.3, G.4,
          G.5, G.6 ] ), GroupHomomorphismByImages( Group( G.1, G.2, G.3,
        G.4, G.5, G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ], [ G.1*G.6^2, G.2*G.6, G.3, G.4,
          G.5, G.6 ] ), GroupHomomorphismByImages( Group( G.1, G.2, G.3,
        G.4, G.5, G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ],
        [ G.1*G.4, G.2*G.4*G.6, G.3, G.4*G.6, G.5, G.6 ] ),
      GroupHomomorphismByImages( Group( G.1, G.2, G.3, G.4, G.5,
        G.6 ), Group( G.1, G.2, G.3, G.4, G.5, G.6 ),
        [ G.1, G.2, G.3, G.4, G.5, G.6 ],
        [ G.1^2*G.3^2, G.2^2*G.3, G.3*G.5, G.4^2, G.5^2, G.6^2 ] ) ] </pre>
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><A NAME="SECT009"><h2>58.9 IsIsomorphicPGroup</h2></a>
<P><P><P>
<code>IsIsomorphicPGroup( <var>G</var>, <var>H</var> )</code>
<P>
The functions returns true if <var>G</var> is isomorphic to <var>H</var>.  Both groups must
be ag groups of prime power order.
<P>
<pre>    gap> p1 := Group( (1,2,3,4), (1,3) );
    Group( (1,2,3,4), (1,3) )
    gap> p2 := SolvableGroup( 8, 5 );
    Q8
    gap> p3 := SolvableGroup( 8, 4 );
    D8
    gap> IsIsomorphicPGroup( AgGroup(p1), p2 );
    false
    gap> IsIsomorphicPGroup( AgGroup(p1), p3 );
    true </pre>
<P>
The function computes and compares the standard presentations for <var>G</var> and
<var>H</var> (see <a href="chap058.htm#SECT006">StandardPresentation</a>).
<P>
This function requires the package "anupq" (see <a href="chap057.htm#SECT001">RequirePackage</a>).
<P><a href ="chap057.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap059.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
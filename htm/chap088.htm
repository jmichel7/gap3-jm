<html><head><title>GAP3 Manual: 88 Reflection subgroups</title></head>
<body bgcolor="ffffff">
<h1>88 Reflection subgroups</h1>
<P><P><P>
Let <I>W</I>  be a finite (possibly  complex) reflection group on  the vector
space <I>V</I>. A <strong>reflection subgroup</strong> <I>H</I> of <I>W</I> is a subgroup generated by
the  reflections it  contains.  A  <strong>parabolic subgroup</strong>  of  <I>W</I> is  the
fixator  in  <I>W</I> of  some  subset  of <I>V</I>.  By  a  difficult theorem  of
Steinberg (easy in  the real case) a parabolic subgroup  is a reflection
subgroup.
<P>
The function <code>ReflectionSubgroup</code> can be  used to construct a reflection
subgroup of <I>W</I>. It takes as arguments the original record for <I>W</I> and a
list of indices for the reflections.
<P>
If <I>V</I> is real, so that <I>W</I> is a Coxeter group with generators <I>S</I>, then
<I>{wsw<sup>-1</sup> |  w &isin; W,  s&isin; S}</I> is the  set of all  reflections in
<I>W</I>. A reflection subgroup generated by a subset of <I>S</I> is parabolic; it
is called <strong>standard  parabolic subgroup</strong> of <I>W</I>.  Any parabolic subgroup
is conjugate to some standard parabolic  subgroup. Let <I>R</I> be the set of
roots of <I>W</I>,  and let <I>Q</I> be the  set of roots of <I>H</I>, that  is the set
of  roots  for  which  the  corresponding reflection  lies  in  <I>H</I>;  by
Steinberg's theorem it can be seen that a reflection subgroup <I>H</I> which
is not  parabolic is characterized  by the fact  that <I>Q</I> is  not closed
under linear combinations in <I>R</I>.
<P>
It is a theorem discovered by Deodhar <A href="biblio.htm#Deo89"><cite>Deo89</cite></a> and Dyer <A href="biblio.htm#Dye90"><cite>Dye90</cite></a>
independently  at the  same time  that a  reflection subgroup  <I>H</I> of  a
Coxeter group has a canonical set of fundamental roots even if it is not
parabolic:  a fundamental  system of  roots for  <I>H</I> is  given by  the
positive roots <I>t &isin; Q</I> such that the subset of <I>R</I> of roots whose sign
is  changed by  the reflection  with root  <I>t</I> meets  <I>Q</I> in  the single
element  <I>t</I>.  This  is  used by  the  routine  <code>ReflectionSubgroup</code>  to
determine  the  root system  <I>Q</I>  of  a  reflection subgroup  <I>H</I>.
<P>
<pre>    gap> W := CoxeterGroup( "G", 2 );
    CoxeterGroup("G",2)
    gap> W.roots[4];
    [ 1, 2 ]
    gap> H := ReflectionSubgroup( W, [ 2, 4 ] );
    ReflectionSubgroup(CoxeterGroup("G",2), [ 2, 3 ])
    gap> PrintDiagram( H );         # not a parabolic subgroup
    ~A2 2 - 3</pre>
<P>
We see that  the result of the above algorithm  is that <code>W.roots[2]</code> and
<code>W.roots[3]</code> form a system of simple roots in <I>H</I>.
<P>
The line containing the Dynkin  diagram of <I>H</I> introduces a convention: 
we use the  notation <code>"~A"</code> to denote a  root  subsystem of type  <code>"A"</code>
generated by short roots.
<P>
We  now  point the  differences  which  occur when  considering  complex
reflection  groups. First,  a  subgroup  generated by  a  subset of  the
standard generators need not always be parabolic, if <I>W</I> needs more than
<I></I>dim<I> V</I> reflections to be generated.  The type of a reflection subgroup
is not  known a priori,  but <strong>CHEVIE</strong> will try  to determine it  if you
call <code>ReflectionType</code> or any operation which needs the classification on
the constructed subgroup.  However there are no canonical  way to choose
the generators; <strong>CHEVIE</strong> will try  to choose generators giving the same
Cartan matrix as the one for the standard group of the same type defined
by <strong>CHEVIE</strong>;  failing that,  it will  at least  try to  find generators
which satisfy the appropriate braid relations.
<P>
The record for a reflection  subgroup contains additional components the
most important of which is  <code>rootInclusion</code> which gives the positions of
the roots of <I>H</I> in the roots of <I>W</I>:
<P>
<pre>    gap> H.rootInclusion;
    [ 2, 3, 4, 8, 9, 10 ]</pre>
<P>
The inverse (partial) map is stored  in <code>H.rootRestriction</code>.
<P>
If <I>H</I> is a standard parabolic subgroup  of a Coxeter group <I>W</I> then the
length function  on <I>H</I> (with respect  to its set of  generators) is the
restriction of  the length function on  <I>W</I>. This need not  no longer be
true for arbitrary reflection subgroups of <I>W</I>:
<P>
<pre>    gap> CoxeterLength( W, H.generators[2] );
    3
    gap> CoxeterLength( H, H.generators[2] );
    1</pre>
<P>
In <strong>GAP3</strong>,  finite reflection  groups <I>W</I>  are represented  as permutation
groups  on  a set  of  roots.  Consequently,  a reflection  subgroup  <I>H
&sube;  W</I>  is  a  permutation   subgroup,  i.e.,  its  elements  are
represented as permutations of the roots of the <I> parent</I> group. This
has  to be  kept  in  mind when  working  with  reduced expressions  and
functions like <code>CoxeterWord</code>, and <code>EltWord</code>.
<P>
Reduced words in simple reflections of <I>H</I>:
<P>
<pre>    gap> el := CoxeterWords( H );
    [ [  ], [ 2 ], [ 3 ], [ 2, 3 ], [ 3, 2 ], [ 2, 3, 2 ] ]</pre>
<P>
Reduced words in the generators of <I>H</I>:
<P>
<pre>    gap> el1 := List( el, x -> H.rootRestriction{ x } );
    [ [  ], [ 1 ], [ 2 ], [ 1, 2 ], [ 2, 1 ], [ 1, 2, 1 ] ]</pre>
<P>
Permutations on the roots of <I>W</I>:
<P>
<pre>    gap> el2 := List( el, x -> EltWord( H, x ) );
    [ (), ( 1, 5)( 2, 8)( 3, 4)( 7,11)( 9,10),
      ( 1,12)( 2, 4)( 3, 9)( 6, 7)( 8,10),
      ( 1, 5,12)( 2,10, 3)( 4, 9, 8)( 6, 7,11),
      ( 1,12, 5)( 2, 3,10)( 4, 8, 9)( 6,11, 7),
      ( 2, 9)( 3, 8)( 4,10)( 5,12)( 6,11) ]</pre>
<P>
Reduced words in the generators of <I>W</I>:
<P>
<pre>    gap> List( el2, x -> CoxeterWord( W, x ) );
    [ [  ], [ 2 ], [ 1, 2, 1 ], [ 2, 1, 2, 1 ], [ 1, 2, 1, 2 ],
      [ 2, 1, 2, 1, 2 ] ]</pre>
<P>
Another  basic  result  about  reflection subgroups  of  Coxeter  groups
is  that  each  coset  of  <I>H</I>  in <I>W</I>  contains  a  unique  element  of
minimal  length.  Since  a  coset  is   a  subset  of  <I>W</I>,  the  length
of  elements   is  taken  with  respect   to  the  roots  of   <I>W</I>.  See
<a href="chap088.htm#SECT003">ReducedRightCosetRepresentatives</a>.
<P><P>
In  many  applications  it  is  useful  to  know  the  decomposition  of
the  irreducible  characters of  <I>W</I>  when  we  restrict them  from  <I>W</I>
to  a reflection  subgroup  <I>H</I>.  In order  to  apply  the usual  <strong>GAP3</strong>
functions for  inducing and restricting characters  and computing scalar
products, we  need to know the  fusion map for the  conjugacy classes of
<I>H</I>  into  those  of <I>W</I>.  This  is  done,  as  usual, with  the  <strong>GAP3</strong>
function <code>FusionConjugacyClasses</code>, which  calls a special implementation
for  Coxeter  groups.  The  decomposition  of  induced  characters  into
irreducibles then is  a simple matter of combining  some functions which
already  exist in  <strong>GAP3</strong>.  The package  <strong>CHEVIE</strong>  provides a  function
<code>InductionTable</code> which performs this job.
<P>
<pre>    gap> W := CoxeterGroup( "G", 2 );;
    gap> W.roots[4];
    [ 1, 2 ]
    gap> H := ReflectionSubgroup( W, [ 2, 4 ] );;
    gap> Display( InductionTable( H, W ) );
    Induction from ~A2 to G2
               |111 21 3
    _____________________
    phi{1,0}   |  .  . 1
    phi{1,6}   |  1  . .
    phi{1,3}'  |  .  . 1
    phi{1,3}'' |  1  . .
    phi{2,1}   |  .  1 .
    phi{2,2}   |  .  1 .</pre>
<P>
We have similar functions for  the <I>j</I>-induction and the <I>J</I>-induction of
characters. These operations   are obtained  by truncating  the   induced
characters by using the <I>a</I>-invariants and <I>b</I>-invariants associated with
the   irreducible  characters     of  <I>W</I>  (see    <a href="chap088.htm#SECT006">jInductionTable for
Macdonald-Lusztig-Spaltenstein induction</a> and <a href="chap088.htm#SECT007">JInductionTable</a>).
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap088.htm#SECT001">ReflectionSubgroup</a>
<LI> <A HREF="chap088.htm#SECT002">Functions for reflection subgroups</a>
<LI> <A HREF="chap088.htm#SECT003">ReducedRightCosetRepresentatives</a>
<LI> <A HREF="chap088.htm#SECT004">PermCosetsSubgroup</a>
<LI> <A HREF="chap088.htm#SECT005">StandardParabolic</a>
<LI> <A HREF="chap088.htm#SECT006">jInductionTable for Macdonald-Lusztig-Spaltenstein induction</a>
<LI> <A HREF="chap088.htm#SECT007">JInductionTable</a>
</ol>
<A NAME="SECT001"><h2>88.1 ReflectionSubgroup</h2></a>
<P><P>
<A name = "I0"></a>

<P>
<code>ReflectionSubgroup( <var>W</var>, <var>r</var> )</code>
<P>
Returns the reflection subgroup of  the real or complex reflection group
<var>W</var> generated by  the reflections with roots specified by  <var>r</var>. <var>r</var> is a
list of indices specifying a subset of the roots of <var>W</var>.
<P>
A  reflection  subgroup  <var>H</var>  of  <var>W</var> is  a  permutation  subgroup,  and
otherwise has  the same fields  as <var>W</var>, with  some new ones  added which
express the relationship with the parent <var>W</var>:
<P>
<DL><DT>  <code>rootInclusion</code>:<DD><BR> the indices of the roots in the roots of <var>W</var>
</DL><P>
<DL><DT>  <code>parentN</code>:<DD><BR> the number of positive roots of <var>W</var> (for Coxeter groups)
</DL><P>
<DL><DT>  <code>rootRestriction</code>:<DD><BR> a list of length   <code>2*H.parentN</code> with entries  in
      positions <code>H.rootInclusion</code> bound to <code>[1..2*H.N]</code>.
</DL><P>
A reflection group which is not  a subgroup actually also contains these
fields, set to  the trivial values: <code>rootInclusion = [  1 .. 2*W.N ]</code>,
<code>parentN = W.N</code> and <code>rootRestriction = [ 1 .. 2*W.N ]</code>.
<P>
With  these  fields,  the method  <code>IsLeftDescending(H,w,i)</code>  is  written
(where <var>w</var> is given as a permutation of the roots of the parent)
<P>
<code>H.rootInclusion[i]^w>H.parentN</code>
<P>
<code>ReflectionSubgroup</code> returns a subgroup    of  the parent group  of   the
argument (like the <strong>GAP3</strong> function <code>Subgroup</code>).
<P><P>
<pre>    gap> W := CoxeterGroup( "F", 4 );;
    gap> H := ReflectionSubgroup( W, [ 1, 2, 11, 20 ] );
    ReflectionSubgroup(CoxeterGroup("F",4), [ 1, 2, 9, 16 ])
    gap> ReflectionName( H );  # not a parabolic subgroup
    "D4"
    gap> H.rootRestriction;
    [ 1, 2,,, 5,,,, 3,, 6,,, 8,, 4,, 7,, 9,, 10, 11, 12, 13, 14,,, 17,,,,
      15,, 18,,, 20,, 16,, 19,, 21,, 22, 23, 24 ]
    gap> ReflectionSubgroup( H, [ 1, 2, 6 ] );
    ReflectionSubgroup(CoxeterGroup("F",4), [ 1, 2, 3 ])</pre>
<P><A NAME="SECT002"><h2>88.2 Functions for reflection subgroups</h2></a>
<P><P><P>
All functions for Reflection groups  are actually defined for reflection
subgroups, provided their reflection type is known (this is automatic in
the  Coxeter  case,  otherwise  use  <code>ReflectionType</code>  as  mentioned  in
introduction). The generators for the subgroups are labeled according to
the corresponding number of the root they represent in the parent group.
This affects the labeling given by  all functions dealing with words and
generators, e.g., <code>PrintDiagram</code> or <code>EltWord</code>.
<P>
<pre>    gap> W := CoxeterGroup( "F", 4 );
    CoxeterGroup("F",4)
    gap> H := ReflectionSubgroup( W, [ 10, 11, 12 ] );
    ReflectionSubgroup(CoxeterGroup("F",4), [ 10, 11, 12 ])
    gap> PrintDiagram( H );
    B2 10 &lt;=&lt; 11
    ~A1 12
    gap> LongestCoxeterWord( H );
    [ 10, 11, 10, 11, 12 ]</pre>
<P>
Note  that  for  the functions  <code>ReflectionType</code>,  <code>ReflectionName</code>  and
<code>PrintDiagram</code>  for Coxeter  subgroups, an  irreducible subsystem  which
consists of short  roots in a system which has  longer roots (i.e., type
<code>"B"</code>, <code>"C"</code>, <code>"G"</code> or <code>"F"</code>) is labeled as type <code>"~A"</code>.
<P>
<A name = "I1"></a>

<DL><DT><code>ReducedInRightCoset(  <var>H</var> ,  <var>w</var> )</code>:<DD><BR>  this function  works in  a more
general context for  reflection subgroups of finite  Coxeter groups than
for  general  Coxeter groups.  The  only  condition  is  that <var>w</var>  is  a
permutation  of the  roots  of the  parent group  of  <I>H</I>, which  leaves
invariant the  set of roots of  <I>H</I> and thus induces  an automorphism of
<I>H</I>. <code>ReducedInRightCoset</code> returns the unique element in the right coset
<I>H.w</I> which sends all roots of <var>H</var> to positive roots.
</DL><P>
<pre>    gap> W := CoxeterGroup("F", 4 );;
    gap> H := ReflectionSubgroup( W, [ 1, 2, 9, 16 ] );;
    gap> PrintDiagram( H );
    D4 9
        \ 
         1 - 16
        /
       2
    gap> w := EltWord( W, [ 3, 2, 3, 4, 3, 2 ] );;
    gap> f := ReducedInRightCoset( H, w );;
    gap> CoxeterWord( W, f );
    [ 4, 3 ]
    gap> H.rootInclusion{[ 1 ..4 ]};
    [ 1, 2, 9, 16 ]</pre>
<P>
The triality automorphism of <I>D<sub>4</sub></I> is induced by <code>f</code>:
<P>
<pre>    gap> OnTuples( H.rootInclusion{[ 1 .. 4 ]}, f );
    [ 1, 9, 16, 2 ]</pre>
<P><A NAME="SECT003"><h2>88.3 ReducedRightCosetRepresentatives</h2></a>
<P><P>
<A name = "I2"></a>

<P>
<code>ReducedRightCosetRepresentatives( <var>W</var>, <var>H</var> [,<var>l</var>])</code>
<P>
returns a  list of reduced elements  in the Coxeter group  <var>W</var> which are
distinguished  representatives for  the right  cosets of  the reflection
subgroup <I>H</I> in <I>W</I>. The distinguished representative in the coset <I>H.w</I>
is the  unique element  in the  coset which  sends all  roots of  <I>H</I> to
positive roots  (the element  returned by <code>ReducedInRightCoset</code>).  It is
also the element of minimal length in the coset. The representatives are
returned in order of increasing length.
<P>
<pre>    gap> W := CoxeterGroup( "B", 3 );;
    gap> H := ReflectionSubgroup(W, [ 2, 3 ]);;
    gap> List( ReducedRightCosetRepresentatives( W, H ),
    >                                x-> CoxeterWord( W, x ) );
    [ [  ], [ 1 ], [ 1, 2 ], [ 1, 2, 1 ], [ 1, 2, 3 ], [ 1, 2, 1, 3 ],
      [ 1, 2, 1, 3, 2 ], [ 1, 2, 1, 3, 2, 1 ] ]</pre>
<P>
If  a third argument  <var>l</var> is given,  it should be  an integer or  a list of
integers,  and only the  representatives whose CoxeterLength  is in <var>l</var> are
returned.  This form is the only one which makes sense for infinite Coxeter
groups.
<P>
<pre>    gap> W:=Affine(CoxeterGroup("A",2));
    Affine(CoxeterGroup("A",2))
    gap> H:=ReflectionSubgroup(W,[1]);
    ReflectionSubgroup(Affine(CoxeterGroup("A",2)), [ 1 ])
    gap> List(ReducedRightCosetRepresentatives(W,H,[0..3]),
    >                                x-> CoxeterWord( W, x ) );
    [ [  ], [ 3 ], [ 2 ], [ 3, 1 ], [ 2, 1 ], [ 2, 3 ], [ 3, 2 ],
      [ 2, 1, 3 ], [ 3, 1, 2 ], [ 2, 3, 2 ], [ 2, 3, 1 ], [ 3, 2, 1 ] ]</pre>
<P><A NAME="SECT004"><h2>88.4 PermCosetsSubgroup</h2></a>
<P><P>
<A name = "I3"></a>

<P>
<code>PermCosetsSubgroup( <var>W</var>, <var>H</var> )</code>
<P>
returns the  list of permutations induced  by  the standard generators of
the Coxeter  group <var>W</var> on  the cosets of the Coxeter  subgroup  <var>H</var>.  The
cosets  are  in the   order determined by   the  result of   the function
<code>ReducedRightCosetRepresentatives( <var>W</var>, <var>H</var> )</code>.
<P>
<pre>    gap> W := CoxeterGroup( "F", 4 );;
    gap> PermCosetsSubgroup( W, ReflectionSubgroup( W, [ 1, 2, 3 ] ) );
    [ ( 4, 5)( 6, 7)( 8,10)(16,18)(17,20)(19,21),
      ( 3, 4)( 7, 9)(10,12)(14,16)(15,17)(21,22),
      ( 2, 3)( 4, 6)( 5, 7)( 9,11)(12,14)(13,15)(17,19)(20,21)(22,23),
      ( 1, 2)( 6, 8)( 7,10)( 9,12)(11,13)(14,15)(16,17)(18,20)(23,24) ]</pre>
<P><A NAME="SECT005"><h2>88.5 StandardParabolic</h2></a>
<P><P>
<A name = "I4"></a>

<P>
<code>StandardParabolic( <var>W</var>, <var>H</var> )</code>
<P>
returns an element <var>w</var> of W which conjugates the reflection subgroup <var>H</var> of
<var>W</var>  to  a  standard  parabolic  subgroup  (that  is, a reflection subgroup
generated  by a  subset of  the generators  of <var>W</var>),  if such a <var>w</var> exists.
Otherwise returns false.
<P>
The  returned element <var>w</var> is thus such  that <code>H^w</code> is a standard parabolic
subgroup of <var>W</var>.
<P>
<pre>    gap> W:=CoxeterGroup("E",6);;
    gap> R:=ReflectionSubgroup(W,[20,30,19,22]);
    ReflectionSubgroup(CoxeterGroup("E",6), [ 1, 9, 19, 20 ])
    gap> StandardParabolic(W,R);
    ( 1, 4,49,12,10)( 2,54,62, 3,19)( 5,17,43,60, 9)( 6,21,34,36,20)
    ( 7,24,45,41,53)( 8,65,50,15,22)(11,32,31,27,28)(13,48,46,37,40)
    (14,51,58,44,29)(16,23,35,33,30)(18,26,39,55,38)(42,57,70,72,56)
    (47,68,67,63,64)(52,59,71,69,66)
    gap> R^last;
    ReflectionSubgroup(CoxeterGroup("E",6), [ 4, 5, 2, 6 ])
    gap> R:=ReflectionSubgroup(W,[1,2,3,5,6,35]);;
    gap> ReflectionName(R);
    "A2&lt;1,3>xA2&lt;2,35>xA2"
    gap> StandardParabolic(W,R);
    false</pre>
<P><A NAME="SECT006"><h2>88.6 jInductionTable for Macdonald-Lusztig-Spaltenstein induction</h2></a>
<P><P>
<A name = "I5"></a>

<P>
<code>jInductionTable( <var>H</var>, <var>W</var> )</code>
<P>
computes the decomposition into irreducible characters of the reflection
group  <var>W</var> of  the  <I>j</I>-induced  of the  irreducible  characters of  the
reflection subgroup  <var>H</var>. The <I>j</I>-induced  of <I>&chi;</I>  is the sum  of the
irreducible  components  of  the  induced  of  <I>&chi;</I>  which  have  same
<I>b</I>-function (see <a href="chap087.htm#SECT007">LowestPowerFakeDegrees</a>) as  <I>&chi;</I>. In the table the
rows correspond  to the characters of  the parent group, the  columns to
those  of the  subgroup.  What is  returned is  actually  a record  with
several fields: <code>scalar</code> contains the induction table proper, and there
is a  <code>Display</code> method.  The other  fields contain  labeling information
taken from the character tables of <var>H</var> and <var>W</var> when it exists.
<P>
<pre>    gap> W := CoxeterGroup( "D", 4);;
    gap> H := ReflectionSubgroup( W, [ 1, 3 ] );;
    gap> Display( jInductionTable( H, W ) );
    j-Induction from A2 to D4
          |111 21 3
    ________________
    11+   |  .  . .
    11-   |  .  . .
    1.111 |  .  . .
    .1111 |  .  . .
    11.2  |  .  . .
    1.21  |  1  . .
    .211  |  .  . .
    2+    |  .  . .
    2-    |  .  . .
    .22   |  .  . .
    1.3   |  .  1 .
    .31   |  .  . .
    .4    |  .  . 1</pre>
<P><A NAME="SECT007"><h2>88.7 JInductionTable</h2></a>
<P><P>
<A name = "I6"></a>

<P>
<code>JInductionTable( <var>H</var>, <var>W</var> )</code>
<P>
<code>JInductionTable</code> computes the decomposition into irreducible characters
of  the reflection  group  <var>W</var>  of the  <I>J</I>-induced  of the  irreducible
characters of the reflection subgroup  <var>H</var>. The <I>J</I>-induced of <I>&chi;</I> is
the sum  of the irreducible  components of  the induced of  <I>&chi;</I> which
have same  <I>a</I>-function (see <a href="chap087.htm#SECT010">LowestPowerGenericDegrees</a>) as  <I>&chi;</I>. In
the table the rows correspond to the characters of the parent group, the
columns to those of the subgroup.  What is returned is actually a record
with  several fields:  <code>scalar</code>  contains the  induction table  proper,
and  there is  a <code>Display</code>  method.  The other  fields contain  labeling
information  taken from  the character  tables of  <var>H</var> and  <var>W</var> when  it
exists.
<P>
<pre>    gap> W := CoxeterGroup( "D", 4 );;
    gap> H := ReflectionSubgroup( W, [ 1, 3 ] );;
    gap> Display( JInductionTable( H, W ) );
    J-Induction from A2 to D4
          |111 21 3
    ________________
    11+   |  .  . .
    11-   |  .  . .
    1.111 |  .  . .
    .1111 |  .  . .
    11.2  |  1  . .
    1.21  |  1  . .
    .211  |  .  . .
    2+    |  .  . .
    2-    |  .  . .
    .22   |  .  . .
    1.3   |  .  1 .
    .31   |  .  . .
    .4    |  .  . 1</pre>
<P><a href ="chap087.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap089.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
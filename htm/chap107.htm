<html><head><title>GAP3 Manual: 107 Partitions and symbols</title></head>
<body bgcolor="ffffff">
<h1>107 Partitions and symbols</h1>
<P><P><P>
The functions  described below,  used in various  parts of  the <strong>CHEVIE</strong> 
package, sometimes duplicate or have similar functions to some functions
in other packages (like the SPECHT  package). It is hoped that a review
of this area will be done in the future.
<P>
The combinatorial objects dealt with here are <strong>partitions</strong>, <strong>beta-sets</strong> and
<strong>symbols</strong>.  A  partition  in  <strong>CHEVIE</strong>  is  a  decreasing  list of strictly
positive  integers  <I>p<sub>1</sub> &ge;  p<sub>2</sub> &ge;  ...  p<sub>n</sub>&gt;0</I>, represented as a <strong>GAP3</strong> 
list.  A  beta-set  is  a  set  of  positive  integers,  up  to the <strong>shift</strong>
equivalence  relation. This equivalence relation  is the transitive closure
of the elementary equivalence of <I>[s<sub>1</sub>,...,s<sub>n</sub>]</I> and
<I>[0,1+s<sub>1</sub>,...,1+s<sub>n</sub>]</I>. An equivalence class has exactly one member which
does not contain <I>0</I>: it is called the normalized beta-set. To a partition
<I>p<sub>1</sub> &ge;  p<sub>2</sub> &ge;... &ge; p<sub>n</sub>&gt;0</I> is associated  a beta-set, whose normalized
representative   is  <I>p<sub>n</sub>,p<sub>n-1</sub>+1,...,p<sub>1</sub>+n-1</I>.  Conversely,  to  each
beta-set is associated a partition, the one associated by the above formula
to its normalized representative.
<P>
A  symbol  is  a  tuple  <I>S=[S<sub>1</sub>,..,S<sub>n</sub>]</I>  of  beta-sets,  taken modulo the
equivalence  relation  generated  by  two  elementary  equivalences:  the
simultaneous  shift of all  lists, and the  cyclic permutation of the tuple
(in the particular case where <I>n=2</I> it is thus an unordered pair of lists).
This  time  there  is  a  unique  normalized  symbol  where 0 is not in the
intersection  of the  <I>S<sub>i</sub></I>. A  basic invariant  attached to symbols is the
<strong>shape</strong> <code>List(S,Length)</code>; when <I>n=2</I> one can assume that <I>S<sub>1</sub></I> has at least
the same length as <I>S<sub>2</sub></I> and the difference of cardinals
<code>Length(S[1])-Length(S[2])</code>,  called  the  <strong>defect</strong>,  is  then invariant by
shift. Another invariant by shift in general is the <strong>rank</strong>, defined as
<P>
<code>Sum(S,Sum)-QuoInt((Sum(S,Length)-1)*(Sum(S,Length)-Length(S)+1),2*Length(S))</code>
<P>
Partitions and pairs of partitions  are parameters for characters of the
Weyl groups of classical types,  and tuples of partitions are parameters
for characters  of imprimitive  complex reflection groups.  Symbols with
two  lines are  parameters  for the  unipotent  characters of  classical
Chevalley groups, and more general  symbols for the unipotent characters
of  Spetses associated  to complex  reflection groups.  The rank  of the
symbol is the  semi-simple rank of the corresponding  Chevalley group or
Spetses.
<P>
Symbols of rank  <I>n</I> and defect <I>0</I> parameterize characters  of the Weyl
group of  type <I>D<sub>n</sub></I>, and  symbols of rank  <I>n</I> and defect  divisible by
4  parameterize  unipotent  characters  of split  orthogonal  groups  of
dimension <I>2n</I>. Symbols of rank <I>n</I>  and defect congruent to <I>2 (</i>mod<i> 4)</I>
parameterize  unipotent characters  of  non-split  orthogonal groups  of
dimension  <I>2n</I>.  Symbols  of  rank  <I>n</I>  and  defect  <I>1</I>  parameterize
characters of the Weyl group of  type <I>B<sub>n</sub></I>, and finally symbols of rank
<I>n</I>  and  odd defect  parameterize  unipotent  characters of  symplectic
groups of dimension <I>2n</I> or orthogonal groups of dimension <I>2n+1</I>.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap107.htm#SECT001">Compositions</a>
<LI> <A HREF="chap107.htm#SECT002">PartBeta</a>
<LI> <A HREF="chap107.htm#SECT003">ShiftBeta</a>
<LI> <A HREF="chap107.htm#SECT004">PartitionTupleToString</a>
<LI> <A HREF="chap107.htm#SECT005">Tableaux</a>
<LI> <A HREF="chap107.htm#SECT006">DefectSymbol</a>
<LI> <A HREF="chap107.htm#SECT007">RankSymbol</a>
<LI> <A HREF="chap107.htm#SECT008">Symbols</a>
<LI> <A HREF="chap107.htm#SECT009">SymbolsDefect</a>
<LI> <A HREF="chap107.htm#SECT010">CycPolGenericDegreeSymbol</a>
<LI> <A HREF="chap107.htm#SECT011">CycPolFakeDegreeSymbol</a>
<LI> <A HREF="chap107.htm#SECT012">LowestPowerGenericDegreeSymbol</a>
<LI> <A HREF="chap107.htm#SECT013">HighestPowerGenericDegreeSymbol</a>
</ol>
<A NAME="SECT001"><h2>107.1 Compositions</h2></a>
<P><P>
<A name = "I0"></a>

<P>
<code>Compositions( <var>n</var>[,<var>i</var>] )</code>
<P>
Returns  the list of compositions of the integer <var>n</var> (the compositions with
<var>i</var> parts if a second argument <var>i</var> is given).
<P>
<pre>    gap> Compositions(4);
    [ [ 1, 1, 1, 1 ], [ 2, 1, 1 ], [ 1, 2, 1 ], [ 3, 1 ], [ 1, 1, 2 ],
      [ 2, 2 ], [ 1, 3 ], [ 4 ] ]
    gap> Compositions(4,2);
    [ [ 3, 1 ], [ 2, 2 ], [ 1, 3 ] ]</pre>
<P><A NAME="SECT002"><h2>107.2 PartBeta</h2></a>
<P><P>
<A name = "I1"></a>

<P>
<code>PartBeta( <var>b</var> )</code>
<P>
Here  <var>b</var>  is  an  increasing  list  of  integers  representing a beta-set.
<code>PartBeta</code> returns corresponding the partition (see the introduction of the
section for definitions).
<P>
<pre>    gap> PartBeta([0,4,5]);
    [ 3, 3 ]</pre>
<P><A NAME="SECT003"><h2>107.3 ShiftBeta</h2></a>
<P><P>
<A name = "I2"></a>

<P>
<code>ShiftBeta( <var>b</var>, <var>n</var> )</code>
<P>
Here  <var>b</var>  is  an  increasing  list  of  integers  representing a beta-set.
<code>ShiftBeta</code>  returns the  set shifted  by <var>n</var>  (see the introduction of the
section for definitions).
<P>
<pre>    gap> ShiftBeta([4,5],3);
    [ 0, 1, 2, 7, 8 ]</pre>
<P><A NAME="SECT004"><h2>107.4 PartitionTupleToString</h2></a>
<P><P>
<A name = "I3"></a>

<P>
<code>PartitionTupleToString( <var>tuple</var> )</code>
<P>
converts the partition tuple <var>tuple</var>  to a string where the partitions
are separated by a dot.
<P>
<pre>    gap> d:=PartitionTuples(3,2);
    [ [ [ 1, 1, 1 ], [  ] ], [ [ 1, 1 ], [ 1 ] ], [ [ 1 ], [ 1, 1 ] ],
      [ [  ], [ 1, 1, 1 ] ], [ [ 2, 1 ], [  ] ], [ [ 1 ], [ 2 ] ],
      [ [ 2 ], [ 1 ] ], [ [  ], [ 2, 1 ] ], [ [ 3 ], [  ] ],
      [ [  ], [ 3 ] ] ]
    gap>  for i in d do
    >      Print( PartitionTupleToString( i ),"   ");
    >  od; Print("\n");
    111.   11.1   1.11   .111   21.   1.2   2.1   .21   3.   .3</pre>
<P><A NAME="SECT005"><h2>107.5 Tableaux</h2></a>
<P><P>
<A name = "I4"></a>

<P>
<code>Tableaux(<var>partition tuple</var> or <var>partition</var>)</code>
<P>
returns  the list  of standard  tableaux associated  to the partition tuple
<var>tuple</var>,  that  is  a  filling  of  the  associated young diagrams with the
numbers  <code>[1..Sum(<var>tuple</var>,Sum)]</code> such that the  numbers increase across the
rows and down the columns. If the imput is a single partition, the standard
tableaux for that partition are returned.
<P>
<pre>    gap> Tableaux([[2,1],[1]]);
    [ [ [ [ 2, 4 ], [ 3 ] ], [ [ 1 ] ] ],
      [ [ [ 1, 4 ], [ 3 ] ], [ [ 2 ] ] ],
      [ [ [ 1, 4 ], [ 2 ] ], [ [ 3 ] ] ],
      [ [ [ 2, 3 ], [ 4 ] ], [ [ 1 ] ] ],
      [ [ [ 1, 3 ], [ 4 ] ], [ [ 2 ] ] ],
      [ [ [ 1, 2 ], [ 4 ] ], [ [ 3 ] ] ],
      [ [ [ 1, 3 ], [ 2 ] ], [ [ 4 ] ] ],
      [ [ [ 1, 2 ], [ 3 ] ], [ [ 4 ] ] ] ]
    gap> Tableaux([2,2]);
    [ [ [ 1, 3 ], [ 2, 4 ] ], [ [ 1, 2 ], [ 3, 4 ] ] ]</pre>
<P><A NAME="SECT006"><h2>107.6 DefectSymbol</h2></a>
<P><P>
<A name = "I5"></a>

<P>
<code>DefectSymbol( <var>s</var> )</code>
<P>
Let  <var>s</var><code>=[S,T]</code>  be  a  symbol  given  as a  pair  of  lists  (see  the
introduction to the  section). <code>DefectSymbol</code> returns the  defect of <var>s</var>,
equal to <code>Length(S)-Length(T)</code>.
<P>
<pre>    gap> DefectSymbol([[1,2],[1,5,6]]);
    -1</pre>
<P><A NAME="SECT007"><h2>107.7 RankSymbol</h2></a>
<P><P>
<A name = "I6"></a>

<P>
<code>RankSymbol( <var>s</var> )</code>
<P>
Let <var>s</var><I>=[S<sub>1</sub>,..,S<sub>n</sub>]</I>  be a symbol given  as a tuple of  lists (see the
introduction to the section). <code>RankSymbol</code> returns the rank of <var>s</var>.
<P>
<pre>    gap> RankSymbol([[1,2],[1,5,6]]);
    11</pre>
<P><A NAME="SECT008"><h2>107.8 Symbols</h2></a>
<P><P>
<A name = "I7"></a>

<P>
<code>Symbols( <var>n</var>, <var>d</var> )</code>
<P>
Returns  the list of all  two-line symbols of defect  <var>d</var> and rank <var>n</var> (see
the  introduction for definitions). If <I>d=0</I> the symbols with equal entries
are  returned  twice,  represented  as  the  first  entry,  followed by the
repetition factor 2 and an ordinal number 0 or 1, so that <code>Symbols(<var>n</var>, 0)</code>
returns  a set of parameters  for the characters of  the Weyl group of type
<I>D<sub>n</sub></I>.
<P>
<pre>    gap> Symbols(2,1);
    [ [ [ 1, 2 ], [ 0 ] ], [ [ 0, 2 ], [ 1 ] ], [ [ 0, 1, 2 ], [ 1, 2 ] ],
      [ [ 2 ], [  ] ], [ [ 0, 1 ], [ 2 ] ] ]
    gap> Symbols(4,0);
    [ [ [ 1, 2 ], 2, 0 ], [ [ 1, 2 ], 2, 1 ],
      [ [ 0, 1, 3 ], [ 1, 2, 3 ] ], [ [ 0, 1, 2, 3 ], [ 1, 2, 3, 4 ] ],
      [ [ 1, 2 ], [ 0, 3 ] ], [ [ 0, 2 ], [ 1, 3 ] ],
      [ [ 0, 1, 2 ], [ 1, 2, 4 ] ], [ [ 2 ], 2, 0 ], [ [ 2 ], 2, 1 ],
      [ [ 0, 1 ], [ 2, 3 ] ], [ [ 1 ], [ 3 ] ], [ [ 0, 1 ], [ 1, 4 ] ],
      [ [ 0 ], [ 4 ] ] ]</pre>
<P><A NAME="SECT009"><h2>107.9 SymbolsDefect</h2></a>
<P><P>
<A name = "I8"></a>

<P>
<code>SymbolsDefect( <var>e</var>, <var>r</var>, <var>def</var> , <var>inh</var>)</code>
<P>
Returns  the list of  symbols defined by  Malle for Unipotent characters of
imprimitive  Spetses. Returns <var>e</var>-symbols of  rank <var>r</var>, defect <var>def</var> (equal
to  0 or  1) and  content equal  to <var>inh</var>  modulo <var>e</var>. Thus the symbols for
unipotent  characters of  <code>G(d,1,r)</code> are  given by <code>SymbolsDefect(d,r,0,1)</code>
and those for unipotent characters of <code>G(e,e,r)</code> by
<code>SymbolsDefect(e,r,0,0)</code>.
<P>
<pre>    gap> SymbolsDefect(3,2,0,1);
    [ [ [ 1, 2 ], [ 0 ], [ 0 ] ], [ [ 0, 2 ], [ 1 ], [ 0 ] ],
      [ [ 0, 2 ], [ 0 ], [ 1 ] ], [ [ 0, 1, 2 ], [ 1, 2 ], [ 0, 1 ] ],
      [ [ 0, 1 ], [ 1 ], [ 1 ] ], [ [ 0, 1, 2 ], [ 0, 1 ], [ 1, 2 ] ],
      [ [ 2 ], [  ], [  ] ], [ [ 0, 1 ], [ 2 ], [ 0 ] ],
      [ [ 0, 1 ], [ 0 ], [ 2 ] ], [ [ 1 ], [ 0, 1, 2 ], [ 0, 1, 2 ] ],
      [ [  ], [ 0, 2 ], [ 0, 1 ] ], [ [  ], [ 0, 1 ], [ 0, 2 ] ],
      [ [ 0 ], [  ], [ 0, 1, 2 ] ], [ [ 0 ], [ 0, 1, 2 ], [  ] ] ]
    gap> List(last,StringSymbol);
    [ "(12,0,0)", "(02,1,0)", "(02,0,1)", "(012,12,01)", "(01,1,1)",
      "(012,01,12)", "(2,,)", "(01,2,0)", "(01,0,2)", "(1,012,012)",
      "(,02,01)", "(,01,02)", "(0,,012)", "(0,012,)" ]
    gap> SymbolsDefect(3,3,0,0);
    [ [ [ 1 ], [ 1 ], [ 1 ] ], [ [ 0, 1 ], [ 1, 2 ], [ 0, 2 ] ],
      [ [ 0, 1 ], [ 0, 2 ], [ 1, 2 ] ],
      [ [ 0, 1, 2 ], [ 0, 1, 2 ], [ 1, 2, 3 ] ], [ [ 0 ], [ 1 ], [ 2 ] ],
      [ [ 0 ], [ 2 ], [ 1 ] ], [ [ 0, 1 ], [ 0, 1 ], [ 1, 3 ] ],
      [ [ 0 ], [ 0 ], [ 3 ] ], [ [ 0, 1, 2 ], [  ], [  ] ],
      [ [ 0, 1, 2 ], [ 0, 1, 2 ], [  ] ] ]
    gap> List(last,StringSymbol);
    [ "(1,1,1)", "(01,12,02)", "(01,02,12)", "(012,012,123)", "(0,1,2)",
      "(0,2,1)", "(01,01,13)", "(0,0,3)", "(012,,)", "(012,012,)" ]</pre>
<P><A NAME="SECT010"><h2>107.10 CycPolGenericDegreeSymbol</h2></a>
<P><P>
<A name = "I9"></a>

<P>
<code>CycPolGenericDegreeSymbol( <var>s</var> )</code>
<P>
Let <var>s</var><I>=[S<sub>1</sub>,..,S<sub>n</sub>]</I>  be a symbol given  as a tuple of  lists (see the
introduction to  the section). <code>CycPolGenericDegreeSymbol</code> returns  as a
<code>CycPol</code> the generic degree of  the unipotent character parameterized by
<var>s</var>.
<P>
<pre>    gap> CycPolGenericDegreeSymbol([[1,2],[1,5,6]]);
    1/2q^13P5P6P7P8^2P9P10P11P14P16P18P20P22</pre>
<P><A NAME="SECT011"><h2>107.11 CycPolFakeDegreeSymbol</h2></a>
<P><P>
<A name = "I10"></a>

<P>
<code>CycPolFakeDegreeSymbol( <var>s</var> )</code>
<P>
Let <var>s</var><I>=[S<sub>1</sub>,..,S<sub>n</sub>]</I>  be a symbol given  as a tuple of  lists (see the
introduction  to the  section).  <code>CycPolFakeDegreeSymbol</code>  returns as  a
<code>CycPol</code> the  fake degree  of the  unipotent character  parameterized by
<var>s</var>.
<P>
<pre>    gap> CycPolFakeDegreeSymbol([[1,5,6],[1,2]]);
    q^16P5P7P8P9P10P11P14P16P18P20P22</pre>
<P><A NAME="SECT012"><h2>107.12 LowestPowerGenericDegreeSymbol</h2></a>
<P><P>
<A name = "I11"></a>

<P>
<code>LowestPowerGenericDegreeSymbol( <var>s</var> )</code>
<P>
Let  <var>s</var><code>=[S1,..,Sn]</code> be  a symbol  given as  a pair  of lists  (see the
introduction to  the section).  <code>LowestPowerGenericDegreeSymbol</code> returns
the  valuation  of  the  generic   degree  of  the  unipotent  character
parameterized by <var>s</var>.
<P>
<pre>    gap> LowestPowerGenericDegreeSymbol([[1,2],[1,5,6]]);
    13</pre>
<P><A NAME="SECT013"><h2>107.13 HighestPowerGenericDegreeSymbol</h2></a>
<P><P>
<A name = "I12"></a>

<P>
<code>HighestPowerGenericDegreeSymbol( <var>s</var> )</code>
<P>
Let  <var>s</var><code>=[S1,..,Sn]</code>  be  a  symbol  given as  a  pair  of  lists  (see
the  introduction  to  the  section).  <code>HighestPowerGenericDegreeSymbol</code>
returns  the degree  of the  generic degree  of the  unipotent character
parameterized by <var>s</var>.
<P>
<pre>    gap> HighestPowerGenericDegreeSymbol([[1,5,6],[1,2]]);
    91</pre>
<P><a href ="chap106.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap108.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
<html><head><title>GAP3 Manual: 23 Finitely Presented Groups</title></head>
<body bgcolor="ffffff">
<h1>23 Finitely Presented Groups</h1>
<P><P><P>
A <strong>finitely presented  group</strong> is a group generated by a set  of <strong>abstract
generators</strong>  subject  to  a  set  of  <strong>relations</strong> that  these  generators
satisfy.  Each group can be represented as finitely presented group.
<P>
A finitely  presented group is  constructed as follows.   First create an
appropriate   free group (see  <a href="chap023.htm#SECT001">FreeGroup</a>).    Then create the  finitely
presented group as a factor of this free group by the relators.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );
    Group( a, b )
    gap> A5 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^5 ];
    Group( a, b )
    gap> Size( A5 );
    60
    gap> a := A5.1;;  b := A5.2;;
    gap> Index( A5, Subgroup( A5, [ a*b ] ) );
    12 </pre>
<P>
Note  that,  even though  the  generators print  with  the names given to
<code>FreeGroup</code>, no variables of that name are  defined.  That means that the
generators  must   be      entered    as  <code><var>free-group</var>.<var>number</var></code>     and
<code><var>fp-group</var>.<var>number</var></code>.
<P>
Note  that the  generators  of  the free   group  are different from  the
generators of the finitely presented  group (even though they print  with
the same name).    That means that  words  in the generators  of the free
group are not elements of the finitely presented group.
<P>
Note that the relations are entered as <strong>relators</strong>, i.e.,  as words in the
generators of  the free group.   To  enter an  equation  use the quotient
operator, i.e.,  for   the  relation  <I>a<sup>b</sup>   = ab</I>  you have   to   enter
<code>a^b/(a*b)</code>.
<P>
You must <strong>not</strong> change  the relators of a finitely presented group at all.
<P>
The  elements of  a  finitely presented  group are  words.  There  is one
fundamental  problem  with  this.  Different words  can correspond to the
same element in  a finitely presented  group.   For example in  the group
<code>A5</code>  defined  above,  <code>a</code>  and <code>a^3</code>  are  actually  the  same element.
However,  <code>a</code> is not equal to  <code>a^3</code> (in the  sense  that <code>a  = a^3</code> is
<code>false</code>).   This  leads  to the  following  anomaly:  <code>a^3 in  A5</code> is
<code>true</code>,  but <code>a^3 in Elements(A5)</code> is  <code>false</code>.   <strong>Some  set  and  group
functions  will not work correctly because of  this problem</strong>.  You should
therefore only use the functions mentioned in <a href="chap023.htm#SECT002">Set Functions for Finitely
Presented Groups</a> and <a href="chap023.htm#SECT003">Group Functions for Finitely Presented Groups</a>.
<P>
The first section in this chapter describes the function <code>FreeGroup</code> that
creates a free group (see <a href="chap023.htm#SECT001">FreeGroup</a>).  The next sections describe which
set theoretic and group functions are implemented specially  for finitely
presented  groups  and  how they  work  (see <a href="chap023.htm#SECT002">Set  Functions for Finitely
Presented Groups</a>  and  <a href="chap023.htm#SECT003">Group Functions for Finitely Presented Groups</a>).
The next section describes the basic function <code>CosetTableFpGroup</code> that is
used  by  most   other  functions  for  finitely  presented  groups  (see
<a href="chap023.htm#SECT004">CosetTableFpGroup</a>).  The next section describes how  you can compute  a
permutation  group that is  a  homomorphic image of a finitely  presented
group (see  <a href="chap023.htm#SECT005">OperationCosetsFpGroup</a>).  The final section  describes  the
function that finds all subgroups of  a finitely presented group of small
index (see <a href="chap023.htm#SECT007">LowIndexSubgroupsFpGroup</a>).
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap023.htm#SECT001">FreeGroup</a>
<LI> <A HREF="chap023.htm#SECT002">Set Functions for Finitely Presented Groups</a>
<LI> <A HREF="chap023.htm#SECT003">Group Functions for Finitely Presented Groups</a>
<LI> <A HREF="chap023.htm#SECT004">CosetTableFpGroup</a>
<LI> <A HREF="chap023.htm#SECT005">OperationCosetsFpGroup</a>
<LI> <A HREF="chap023.htm#SECT006">IsIdenticalPresentationFpGroup</a>
<LI> <A HREF="chap023.htm#SECT007">LowIndexSubgroupsFpGroup</a>
<LI> <A HREF="chap023.htm#SECT008">Presentation Records</a>
<LI> <A HREF="chap023.htm#SECT009">Changing Presentations</a>
<LI> <A HREF="chap023.htm#SECT010">Group Presentations</a>
<LI> <A HREF="chap023.htm#SECT011">Subgroup Presentations</a>
<LI> <A HREF="chap023.htm#SECT012">SimplifiedFpGroup</a>
<LI> <A HREF="chap023.htm#SECT013">Tietze Transformations</a>
<LI> <A HREF="chap023.htm#SECT014">DecodeTree</a>
</ol>
<A NAME="SECT001"><h2>23.1 FreeGroup</h2></a>
<P><P><P>
<code>FreeGroup( <var>n</var> )</code> <BR> 
<code>FreeGroup( <var>n</var>, <var>string</var> )</code> <BR> 
<code>FreeGroup( <var>name1</var>, <var>name2</var>.. )</code>
<P>
<code>FreeGroup</code> returns the free group on <var>n</var> generators.  The generators are
displayed   as   <code><var>string</var>.1</code>,  <code><var>string</var>.2</code>,  ...,  <code><var>string</var>.<var>n</var></code>.   If
<var>string</var> is missing it defaults to <code>"f"</code>.  If <var>string</var> is  the name  of
the variable that you use to refer to  the group  returned by <code>FreeGroup</code>
you can also enter the generators as <code><var>string</var>.<var>i</var></code>.
<P>
<pre>    gap> F2 := FreeGroup( 2, "A5" );;
    gap> A5 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^5 ];
    Group( A5.1, A5.2 )
    gap> Size( A5 );
    60
    gap> F2 := FreeGroup( "a", "b" );;
    gap> D8 := F2 / [ F2.1^4, F2.2^2, F2.1^F2.2 / F2.1 ];
    Group( a, b )
    gap> a := D8.1;;  b := D8.2;;
    gap> Index( D8, Subgroup( D8, [ a ] ) );
    2 </pre>
<P><A NAME="SECT002"><h2>23.2 Set Functions for Finitely Presented Groups</h2></a>
<P><P><P>
Finitely  presented  groups  are  domains,  thus  in  principle  all  set
theoretic  functions  are applicable to  them  (see  chapter  <a href="chap004.htm">Domains</a>).
However because words that are not equal may denote the same element of a
finitely presented group  many  of them will  not work  correctly.   This
sections  describes  which   set  theoretic  functions   are  implemented
specially for finitely presented  groups and  how they work.   You should
<strong>not</strong>  use the  set  theoretic functions  that are not mentioned  in this
section.
<P>
The  general  information that  enables <strong>GAP3</strong> to  work  with a  finitely
presented  group  <var>G</var>  is  a  <strong>coset  table</strong>  (see  <a href="chap023.htm#SECT004">CosetTableFpGroup</a>).
Basically a coset table is the permutation representation of the finitely
presented group on the cosets of a  subgroup (which need  not be faithful
if the subgroup has a  nontrivial core).  Most of the functions below use
the regular representation of <var>G</var>, i.e., the coset table  of <var>G</var> over the
trivial subgroup.  Such  a coset  table is computed  by a  method  called
<strong>coset enumeration</strong>.
<P>
<P>
<code>Size( <var>G</var> )</code>
<A name = "I0"></a>

<P>
The size is simply the degree of the regular representation of <var>G</var>.
<P>
<P>
<code><var>w</var> in <var>G</var></code>
<A name = "I1"></a>

<P>
A word <var>w</var> lies  in a parent  group <var>G</var> if  all its letters are among the
generators of <var>G</var>.
<P>
<P>
<code><var>w</var> in <var>H</var></code>
<P>
To test whether a word <var>w</var> lies in a subgroup <var>H</var> of a finitely presented
group <var>G</var>, <strong>GAP3</strong>  computes the  coset table of <var>G</var> over  <var>H</var>.   Then  it
tests whether the permutation one gets by replacing each generator of <var>G</var>
in <var>w</var> with the corresponding permutation is trivial.
<P>
<P>
<code>Elements( <var>G</var> )</code>
<A name = "I2"></a>

<P>
The elements of a finitely presented  group are computed by computing the
regular representation of <var>G</var>.  Then for  each  point <var>p</var> <strong>GAP3</strong> adds the
smallest word <var>w</var> that, when viewed  as a permutation, takes  1 to <var>p</var> to
the set of elements.  Note that this implies  that each word in  the  set
returned is the smallest word that denotes an element of <var>G</var>.
<P>
<P>
<code>Elements( <var>H</var> )</code>
<P>
The elements  of  a  subgroup <var>H</var> of a  finitely presented group  <var>G</var> are
computed by computing the elements of <var>G</var> and returning those that lie in
<var>H</var>.
<P>
<P>
<code>Intersection( <var>H1</var>, <var>H2</var> )</code>
<A name = "I3"></a>

<P>
The intersection of two subgroups <var>H1</var> and  <var>H2</var>  of a finitely presented
group <var>G</var> is computed as follows.  First <strong>GAP3</strong> computes the coset tables
of <var>G</var> over <var>H1</var> and <var>H2</var>.  Then it computes the tensor product  of those
two permutation representations.  The coset table of the  intersection is
the   transitive   constituent   of   1  in   this  tensored  permutation
representation.  Finally <strong>GAP3</strong> computes a set of Schreier generators for
the  intersection  by  performing  another coset  enumeration  using  the
already complete  coset  table.   The intersection  is  returned  as  the
subgroup generated by those Schreier generators.
<P><A NAME="SECT003"><h2>23.3 Group Functions for Finitely Presented Groups</h2></a>
<P><P><P>
Finitely presented groups  are after  all groups, thus  in  principle all
group functions are  applicable  to them (see chapter <a href="chap007.htm">Groups</a>).  However
because  words  that are  not  equal  may denote  the same element  of  a
finitely presented group many of  them  will  not  work correctly.   This
sections describes which group  functions are implemented  specially  for
finitely  presented groups and how they  work.  You should <strong>not</strong> use  the
group functions that are not mentioned in this section.
<P>
The  general  information that  enables <strong>GAP3</strong> to  work  with a  finitely
presented  group  <var>G</var>  is  a  <strong>coset  table</strong>  (see  <a href="chap023.htm#SECT004">CosetTableFpGroup</a>).
Basically a coset table is the permutation representation of the finitely
presented group on the cosets of a  subgroup (which need  not be faithful
if the subgroup has a  nontrivial core).  Most of the functions below use
the regular representation of <var>G</var>, i.e., the coset table  of <var>G</var> over the
trivial subgroup.  Such  a coset  table is computed  by a  method  called
<strong>coset enumeration</strong>.
<P>
<P>
<code>Order( <var>G</var>, <var>g</var> )</code>
<A name = "I4"></a>

<P>
The  order of an  element <var>g</var> is computed by translating the element into
the  regular  permutation representation and computing the order of  this
permutation (which is the length of the cycle of 1).
<P>
<P>
<code>Index( <var>G</var>, <var>H</var> )</code>
<A name = "I5"></a>

<P>
The index of  a subgroup <var>H</var> in a  finitely presented group <var>G</var> is simply
the  degree of  the  permutation  representation of the group  <var>G</var> on the
cosets of <var>H</var>.
<P>
<P>
<code>Normalizer( <var>G</var>, <var>H</var> )</code>
<A name = "I6"></a>

<P>
The normalizer of a subgroup <var>H</var> of a finitely presented group <var>G</var> is the
union of those cosets of <var>H</var> in <var>G</var> that are fixed by all  the generators
of <var>H</var> when  viewed as permutations in  the permutation representation of
<var>G</var> on the  cosets  of <var>H</var>.   The normalizer is returned as the  subgroup
generated by the generators of <var>H</var> and representatives of such cosets.
<P>
<P>
<code>CommutatorFactorGroup( <var>G</var> )</code>
<A name = "I7"></a>

<P>
The commutator factor group of a finitely presented group <var>G</var> is returned
as a  new finitely presented group.  The relations of this group are  the
relations  of <var>G</var> plus  the  commutator of all the pairs of generators of
<var>G</var>.
<P>
<P>
<code>AbelianInvariants( <var>G</var> )</code>
<A name = "I8"></a>

<P>
The abelian invariants  of  a  abelian finitely presented group  (e.g., a
commutator  factor group of an arbitrary  finitely presented  group)  are
computed by  building the relation matrix of  <var>G</var> and  transforming  this
matrix    to    diagonal   form    with   <code>ElementaryDivisorsMat</code>    (see
<a href="chap034.htm#SECT023">ElementaryDivisorsMat</a>).
<P>
<P>
<code>AbelianInvariantsSubgroupFpGroup( <var>G</var>, <var>H</var> )</code>
<A name = "I9"></a>
 <BR> 
<code>AbelianInvariantsSubgroupFpGroup( <var>G</var>, <var>cosettable</var> )</code>
<P>
This  function  is  equivalent  to  <code>AbelianInvariantsSubgroupFpGroupRrs</code>
below,    but   note  that      there is     an    alternative  function,
<code>AbelianInvariantsSubgroupFpGroupMtc</code>.
<P>
<P>
<code>AbelianInvariantsSubgroupFpGroupRrs( <var>G</var>, <var>H</var> )</code>
<A name = "I10"></a>
 <BR> 
<code>AbelianInvariantsSubgroupFpGroupRrs( <var>G</var>, <var>cosettable</var> )</code>
<P>
<code>AbelianInvariantsSubgroupFpGroupRrs</code>  returns   the  invariants  of  the
commutator factor group <var>H/H'</var> of a subgroup <var>H</var> of a finitely presented
group <var>G</var>.   They are computed by  first  applying an abelianized Reduced
Reidemeister-Schreier    procedure  (see   <a href="chap023.htm#SECT011">Subgroup   Presentations</a>) to
construct a relation matrix of <var>H/H'</var> and  then transforming this matrix
to     diagonal        form    with       <code>ElementaryDivisorsMat</code>    (see
<a href="chap034.htm#SECT023">ElementaryDivisorsMat</a>).
<P>
As second argument, you may provide either the subgroup <var>H</var> itself or its
coset table in <var>G</var>.
<P>
<P>
<code>AbelianInvariantsSubgroupFpGroupMtc( <var>G</var>, <var>H</var> )</code>
<A name = "I11"></a>

<P>
<code>AbelianInvariantsSubgroupFpGroupMtc</code>  returns   the  invariants  of  the
commutator factor group <var>H/H'</var> of a subgroup <var>H</var> of a finitely presented
group  <var>G</var>.   They are  computed    by applying  an  abelianized Modified
Todd-Coxeter procedure  (see   <a href="chap023.htm#SECT011">Subgroup Presentations</a>) to  construct  a
relation matrix of <var>H/H'</var> and then  transforming this matrix to diagonal
form with <code>ElementaryDivisorsMat</code> (see <a href="chap034.htm#SECT023">ElementaryDivisorsMat</a>).
<P>
<P>
<code>AbelianInvariantsNormalClosureFpGroup( <var>G</var>, <var>H</var> )</code>
<A name = "I12"></a>

<P>
This function is equivalent to <code>AbelianInvariantsNormalClosureFpGroupRrs</code>
below.
<P>
<P>
<code>AbelianInvariantsNormalClosureFpGroupRrs( <var>G</var>, <var>H</var> )</code>
<A name = "I13"></a>

<P>
<code>AbelianInvariantsNormalClosureFpGroupRrs</code> returns  the invariants of the
commutator factor group <var>N/N'</var> of the normal closure  <var>N</var> a subgroup <var>H</var>
of a finitely  presented group <var>G</var>.  They are  computed by first applying
an  abelianized  Reduced Reidemeister-Schreier  procedure  (see <a href="chap023.htm#SECT011">Subgroup
Presentations</a>)  to  construct a  relation  matrix  of  <var>N/N'</var>  and then
transforming  this matrix  to  diagonal form with <code>ElementaryDivisorsMat</code>
(see <a href="chap034.htm#SECT023">ElementaryDivisorsMat</a>).
<P>
<pre>    gap> # Define the Coxeter group E1.
    gap> F5 := FreeGroup( "x1", "x2", "x3", "x4", "x5" );;
    gap> E1 := F5 / [ F5.1^2, F5.2^2, F5.3^2, F5.4^2, F5.5^2,
    >  ( F5.1 * F5.3 )^2, ( F5.2 * F5.4 )^2, ( F5.1 * F5.2 )^3,
    >  ( F5.2 * F5.3 )^3, ( F5.3 * F5.4 )^3, ( F5.4 * F5.1 )^3,
    >  ( F5.1 * F5.5 )^3, ( F5.2 * F5.5 )^2, ( F5.3 * F5.5 )^3,
    >  ( F5.4 * F5.5 )^2,
    >  ( F5.1 * F5.2 * F5.3 * F5.4 * F5.3 * F5.2 )^2 ];;
    gap> x1:=E1.1;;  x2:=E1.2;;  x3:=E1.3;;  x4:=E1.4;;  x5:=E1.5;;
    gap> # Get normal subgroup generators for B1.
    gap> H := Subgroup( E1, [ x5 * x2^-1, x5 * x4^-1 ] );;
    gap> # Compute the abelian invariants of B1/B1'.
    gap> A := AbelianInvariantsNormalClosureFpGroup( E1, H );
    [ 2, 2, 2, 2, 2, 2, 2, 2 ]
    gap> # Compute a presentation for B1.
    gap> P := PresentationNormalClosure( E1, H );
    &lt;&lt; presentation with 18 gens and 46 rels of total length 132 >>
    gap> SimplifyPresentation( P );
    #I  there are 8 generators and 30 relators of total length 148
    gap> B1 := FpGroupPresentation( P );
    Group( _x1, _x2, _x3, _x4, _x6, _x7, _x8, _x11 )
    gap> # Compute normal subgroup generators for B1'.
    gap> gens := B1.generators;;
    gap> numgens := Length( gens );;
    gap> comms := [ ];;
    gap> for i in [ 1 .. numgens - 1 ] do
    >        for j in [i+1 .. numgens ] do
    >            Add( comms, Comm( gens[i], gens[j] ) );
    >        od;
    >    od;
    gap> # Compute the abelian invariants of B1'/B1".
    gap> K := Subgroup( B1, comms );;
    gap> A := AbelianInvariantsNormalClosureFpGroup( B1, K );
    [ 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2 ] </pre>
<P>
The prededing calculation for <I>B<sub>1</sub></I> and a similar one for <I>B<sub>0</sub></I> have been
used  to prove that <I>B<sub>1</sub>' /  B<sub>1</sub><sup>&prime; &prime;</sup> &cong; Z<sub>2</sub><sup>9</sup> &times;
Z<sup>3</sup></I> and <I>B<sub>0</sub>' / B<sub>0</sub><sup>&prime;  &prime;</sup> &cong; Z<sub>2</sub><sup>91</sup> &times; Z<sup>27</sup></I>
as stated in Proposition 5 in <A href="biblio.htm#FJNT95"><cite>FJNT95</cite></a>.
<P>
The following  functions  are  not  implemented  specially  for  finitely
presented groups,  but  they work  nevertheless.   However,  you probably
should not use them for larger finitely presented groups.
<P>
<code>Core( <var>G</var>, <var>U</var> )</code> <BR> 
<code>SylowSubgroup( <var>G</var>, <var>p</var> )</code> <BR> 
<code>FittingSubgroup( <var>G</var> )</code>
<P><A NAME="SECT004"><h2>23.4 CosetTableFpGroup</h2></a>
<P><P><P>
<code>CosetTableFpGroup( <var>G</var>, <var>H</var> )</code>
<P>
<code>CosetTableFpGroup</code> returns the  coset  table of the  finitely  presented
group <var>G</var> on the cosets of the subgroup <var>H</var>.
<P>
Basically a coset table is the permutation representation of the finitely
presented group on the cosets of a subgroup  (which need  not be faithful
if the subgroup has a nontrivial  core).  Most  of  the set theoretic and
group functions use the regular  representation of <var>G</var>, i.e.,  the  coset
table of <var>G</var> over the trivial subgroup.
<P>
The coset table is  returned as a list of  lists.   For each generator of
<var>G</var> and  its inverse the table  contains  a generator list.   A generator
list is simply a list of integers.  If <var>l</var> is the  generator list for the
generator <var>g</var> and <code><var>l</var>[<var>i</var>] = <var>j</var></code> then generator <var>g</var> takes the coset <var>i</var>
to the coset <var>j</var> by multiplication from the  right.  Thus the permutation
representation of  <var>G</var>  on  the  cosets of <var>H</var>  is  obtained by  applying
<code>PermList</code> to each  generator list (see <a href="chap020.htm#SECT009">PermList</a>).   The coset table is
standardized,  i.e., the cosets are  sorted with  respect to the smallest
word that lies in each coset.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );
    Group( a, b )
    gap> A5 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^5 ];
    Group( a, b )
    gap> CosetTableFpGroup( A5,
    >            Subgroup( A5, [ A5.1, A5.2*A5.1*A5.2*A5.1*A5.2^-1 ] ) );
    [ [ 1, 3, 2, 5, 4 ],
      [ 1, 3, 2, 5, 4 ],    # inverse of above, <code>A5.1</code> is an involution
      [ 2, 4, 3, 1, 5 ],
      [ 4, 1, 3, 2, 5 ] ]   # inverse of above
    gap> List( last, PermList );
    [ (2,3)(4,5), (2,3)(4,5), (1,2,4), (1,4,2) ] </pre>
<P>
The coset  table is  computed by a method called <strong>coset enumeration</strong>.   A
<strong>Felsch strategy</strong> is used to decide how to define new cosets.
<P>
The  variable  <code>CosetTableFpGroupDefaultLimit</code>  determines  for  how many
cosets   the  table  has   initially   room.   <code>CosetTableFpGroup</code>   will
automatically  extend this table if need arises, but this is an expensive
operation.  Thus  you  should  set <code>CosetTableFpGroupDefaultLimit</code> to the
number of cosets that  you expect will be  needed at most.   However  you
should not set it too  high, otherwise too much space will be used by the
coset table.
<P>
The  variable  <code>CosetTableFpGroupDefaultMaxLimit</code> determines the  maximal
size of  the coset  table.  If a coset enumeration reaches  this limit it
signals an error  and enters the breakloop.  You  can  either continue or
quit  the computation  from  there.   Setting  the  limit to  <code>0</code>  allows
arbitrary large coset tables.
<P><A NAME="SECT005"><h2>23.5 OperationCosetsFpGroup</h2></a>
<P><P><P>
<code>OperationCosetsFpGroup( <var>G</var>, <var>H</var> )</code>
<P>
<code>OperationCosetsFpGroup</code>  returns the  permutation  representation of the
finitely  presented group <var>G</var>  on  the  cosets of  the subgroup  <var>H</var> as a
permutation group.  Note that this permutation representation is faithful
if and only if <var>H</var> has a trivial core in <var>G</var>.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );
    Group( a, b )
    gap> A5 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^5 ];
    Group( a, b )
    gap> OperationCosetsFpGroup( A5,
    >            Subgroup( A5, [ A5.1, A5.2*A5.1*A5.2*A5.1*A5.2^-1 ] ) );
    Group( (2,3)(4,5), (1,2,4) )
    gap> Size( last );
    60 </pre>
<P>
<code>OperationCosetsFpGroup</code>   simply  calls   <code>CosetTableFpGroup</code>,   applies
<code>PermList</code> to each  row  of the table, and returns the group generated by
those permutations (see <a href="chap023.htm#SECT004">CosetTableFpGroup</a>, <a href="chap020.htm#SECT009">PermList</a>).
<P><A NAME="SECT006"><h2>23.6 IsIdenticalPresentationFpGroup</h2></a>
<P><P><P>
<code>IsIdenticalPresentationFpGroup( <var>G</var>, <var>H</var> )</code>
<P>
<code>IsIdenticalPresentationFpGroup</code>  returns <code>true</code>  if the presentations of
the parent groups <var>G</var> and <var>H</var> are identical and <code>false</code> otherwise.
<P>
Two presentations are considered identical if the have the same number of
generators,  i.e.,  <var>G</var> is generated by <var>g1</var> ... <var>gn</var> and <var>H</var> by <var>h1</var> ...
<var>hn</var>, and if the set of relators of <var>G</var> stored in <code><var>G</var>.relators</code> is equal
to the set of relators of <var>H</var> stored in <code><var>H</var>.relators</code> <strong>after</strong>  replacing
<var>hi</var> by <var>gi</var> in these words.
<P>
<pre>    gap> F2 := FreeGroup(2);
    Group( f.1, f.2 )
    gap> g := F2 / [ F2.1^2 / F2.2 ];
    Group( f.1, f.2 )
    gap> h := F2 / [ F2.1^2 / F2.2 ];
    Group( f.1, f.2 )
    gap> g = h;
    false
    gap> IsIdenticalPresentationFpGroup( g, h );
    true </pre>
<P><A NAME="SECT007"><h2>23.7 LowIndexSubgroupsFpGroup</h2></a>
<P><P><P>
<code>LowIndexSubgroupsFpGroup( <var>G</var>, <var>H</var>, <var>index</var> )</code> <BR> 
<code>LowIndexSubgroupsFpGroup( <var>G</var>, <var>H</var>, <var>index</var>, <var>excluded</var> )</code>
<P>
<code>LowIndexSubgroupsFpGroup</code>  returns a  list  of  representatives  of  the
conjugacy classes of  subgroups of the finitely presented  group <var>G</var> that
contain the subgroup <var>H</var> of <var>H</var> and that have index less than or equal to
<var>index</var>.
<P>
The function provides some intermediate output if <code>InfoFpGroup2</code> has been
set to <code>Print</code> (its default value is <code>Ignore</code>).
<P>
If the   optional argument  <var>excluded</var>  has  been specified, then   it is
expected  to   be a list    of words  in   the  generators  of  <var>G</var>,  and
<code>LowIndexSubgroupsFpGroup</code> returns only  those subgroups of index at most
<var>index</var> that contain <var>H</var>,  but do not contain any conjugate of any of the
group elements defined by these words.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );
    Group( a, b )
    gap> A5 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^5 ];
    Group( a, b )
    gap> A5.name := "A5";;
    gap> S := LowIndexSubgroupsFpGroup( A5, TrivialSubgroup( A5 ), 12 );
    [ A5, Subgroup( A5, [ a, b*a*b^-1 ] ),
      Subgroup( A5, [ a, b*a*b*a^-1*b^-1 ] ),
      Subgroup( A5, [ a, b*a*b*a*b^-1*a^-1*b^-1 ] ),
      Subgroup( A5, [ b*a^-1 ] ) ]
    gap> List( S, H -> Index( A5, H ) );
    [ 1, 6, 5, 10, 12 ]    # the indices of the subgroups
    gap> List( S, H -> Index( A5, Normalizer( A5, H ) ) );
    [ 1, 6, 5, 10, 6 ]    # the lengths of the conjugacy classes </pre>
<P>
As an example for an application of the optional parameter <var>excluded</var>, we
compute all conjugacy classes of torsion free  subgroups of index at most
24  in the  group  <I>G = &lang; x,y,z | x<sup>2</sup>, y<sup>4</sup>, z<sup>3</sup>, (xy)<sup>3</sup>, (yz)<sup>2</sup>,
(xz)<sup>3</sup>  &rang;</I>.  It is  know from theory  that  each torsion element of
this group is conjugate to a power of <I>x</I>, <I>y</I>, <I>z</I>, <I>xy</I>, <I>xz</I>, or <I>yz</I>.
<P>
<pre>    gap> G := FreeGroup( "x", "y", "z" );
    Group( x, y, z )
    gap> x := G.1;; y := G.2;; z := G.3;;
    gap> G.relators := [ x^2, y^4, z^3, (x*y)^3, (y*z)^2, (x*z)^3 ];;
    gap> torsion := [ x, y, y^2, z, x*y, x*z, y*z ];;
    gap> InfoFpGroup2 := Print;;
    gap> lis :=
    >    LowIndexSubgroupsFpGroup( G, TrivialSubgroup( G ), 24, torsion );;
    #I   class 1 of index 24 and length 8
    #I   class 2 of index 24 and length 24
    #I   class 3 of index 24 and length 24
    #I   class 4 of index 24 and length 24
    #I   class 5 of index 24 and length 24
    gap> InfoFpGroup2 := Ignore;;
    gap> lis;
    [ Subgroup( Group( x, y, z ),
        [ x*y*z^-1, z*x*z^-1*y^-1, x*z*x*y^-1*z^-1, y*x*z*y^-1*z^-1 ] ),
      Subgroup( Group( x, y, z ),
        [ x*y*z^-1, z^2*x^-1*y^-1, x*z*y*x^-1*z^-1 ] ),
      Subgroup( Group( x, y, z ),
        [ x*y*z^-1, x*z^2*x^-1*y^-1, y^2*x*y^-1*z^-1*x^-1 ] ),
      Subgroup( Group( x, y, z ), [ x*y*z^-1, y^3*x^-1*z^-1*x^-1,
          y^2*z*x^-1*y^-1 ] ),
      Subgroup( Group( x, y, z ), [ y*x*z^-1, x*y*z*y^-1*z^-1,
          y^2*z*x^-1*z^-1*x^-1 ] ) ] </pre>
<P>
The function  <code>LowIndexSubgroupsFpGroup</code> finds the requested subgroups by
systematically  running through a tree of  all potential  coset tables of
<var>G</var>  of length at most <var>index</var> (where it  skips all branches of that tree
for which  it knows in advance  that they cannot  provide  new classes of
such subgroups). The time required to do this  depends, of course, on the
presentation of <var>G</var>, but  in general it will  grow exponentially with the
value of <var>index</var>.  So you should be careful with the choice of <var>index</var>.
<P><A NAME="SECT008"><h2>23.8 Presentation Records</h2></a>
<P><P><P>
In  <strong>GAP3</strong>, <strong>finitely presented  groups</strong>  are  distinguished  from <strong>group
presentations</strong> which are <strong>GAP3</strong> objects of their own and which are stored
in <strong>presentation  records</strong>.  The reason  is that very often presentations
have to be changed (e.g. simplified) by Tietze transformations, but since
in  these new  generators  and relators are introduced, all  words in the
generators of a finitely presented group would also have to be changed if
such  a  Tietze  transformation  were  applied to  the presentation of  a
finitely presented group.  Therefore, in <strong>GAP3</strong> the presentation defining
a finitely presented group is never changed; changes are only allowed for
group presentations  which  are  not  considered  to  define a particular
group.
<P>
<strong>GAP3</strong>  offers a bundle of commands to perform  Tietze transformations on
finite   group    presentations    (see    <a href="chap023.htm#SECT012">SimplifiedFpGroup</a>,   <a href="chap023.htm#SECT013">Tietze
Transformations</a>).  In  order  to speed  up the respective routines,  the
relators in such a presentation record are  not represented  by  ordinary
(abstract)  <strong>GAP3</strong> words,  but by lists of positive or negative generator
numbers which we call <strong>Tietze words</strong>.  <A name = "I14"></a>

<P>
The term ``<strong>Tietze  record</strong>''  will  sometimes be used as an alias for
``<strong>presentation record</strong>''.  It occurs, in particular, in certain  error
messages.  <A name = "I15"></a>

<P>
The following  two  commands can be used to create a presentation  record
from a  finitely presented group  or, vice  versa, to  create a  finitely
presented group from a presentation.
<P>
<P>
<code>PresentationFpGroup( <var>G</var> )</code>
<A name = "I16"></a>
 <BR> 
<code>PresentationFpGroup( <var>G</var>, <var>printlevel</var> )</code>
<P>
<code>PresentationFpGroup</code> returns a presentation record containing a copy  of
the  presentation of the given finitely presented group  <var>G</var> on the  same
set of generators.
<P>
The  optional <var>printlevel</var> parameter can be used to restrict or to extend
the amount  of  output provided by  Tietze  transformation  commands when
being applied to the created presentation record.  The default value 1 is
designed  for  interactive  use  and  implies  explicit  messages  to  be
displayed  by most of  these  commands.   A <var>printlevel</var> value of  0 will
suppress these messages, whereas a <var>printlevel</var>  value of 2  will enforce
some additional output.
<P>
<P>
<code>FpGroupPresentation( <var>P</var> )</code>
<A name = "I17"></a>

<P>
<code>FpGroupPresentation</code> returns a  finitely presented group defined  by the
presentation in the given presentation record <var>P</var>.
<P>
If some presentation record <var>P</var>, say, contains a large presentation, then
it  would  be nasty  to  wait for  the end of an  unintentionally started
printout of all of its components (or, more precisely, of  its  component
<code><var>P</var>.tietze</code> which contains  the essential lists).   Therefore,  whenever
you use the standard print  facilities  to display a presentation record,
<strong>GAP3</strong>  will  provide just  one line of text  containing  the  number  of
generators, the number of relators, and the total length of all relators.
Of course, you may use the <code>RecFields</code> and <code>PrintRec</code> commands to display
all components of <var>P</var>.
<P>
In  addition, you may  use  the  following commands to extract and  print
different amounts of information from a presentation record.
<P>
<P>
<code>TzPrintStatus( <var>P</var> )</code>
<A name = "I18"></a>

<P>
<code>TzPrintStatus</code>  prints the current  state of a presentation record  <var>P</var>,
i.e., the number of generators,  the  number of relators, and  the  total
length of all relators.
<P>
If  you are working  interactively,  you can get the same  information by
just typing <code><var>P</var>;</code>
<P>
<P>
<code>TzPrintGenerators( <var>P</var> )</code>
<A name = "I19"></a>
 <BR> 
<code>TzPrintGenerators( <var>P</var>, <var>list</var> )</code>
<P>
<code>TzPrintGenerators</code>   prints  the  current  list  of   generators  of   a
presentation record <var>P</var>, providing for each generator its name, the total
number of its  occurrences in the relators,  and,  if  that generator  is
known to be an involution, an appropriate message.
<P>
If a  list  <var>list</var> has  been  specified as  second argument,  then  it is
expected to be  a list of the position  numbers  of  the generators to be
printed.  <var>list</var> need not be sorted and  may  contain duplicate elements.
The generators are printed in  the order in which and  as often as  their
numbers occur in <var>list</var>.  Position  numbers out of range (with respect to
the list of generators) will be ignored.
<P>
<P>
<code>TzPrintRelators( <var>P</var> )</code>
<A name = "I20"></a>
 <BR> 
<code>TzPrintRelators( <var>P</var>, <var>list</var> )</code>
<P>
<code>TzPrintRelators</code> prints the current list of relators  of  a presentation
record <var>P</var>.
<P>
If  a  list  <var>list</var>  has been specified  as  second argument, then it  is
expected  to  be a list  of the position numbers  of the  relators  to be
printed.  <var>list</var> need  not be sorted  and may contain duplicate elements.
The relators are printed as Tietze words in  the order  in  which (and as
often as)  their numbers occur in  <var>list</var>.  Position numbers out of range
(with respect to the list of relators) will be ignored.
<P>
<P>
<code>TzPrintPresentation( <var>P</var> )</code>
<A name = "I21"></a>

<P>
<code>TzPrintPresentation</code> prints the current lists of generators and relators
and the current state of a presentation record <var>P</var>.  In fact, the command
<P>
<code>    TzPrintPresentation( P ) </code>
<P>
is an abbreviation of the command sequence
<P>
<pre>    Print( "generators:\n" ); TzPrintGenerators( P );
    Print( "relators:\n" ); TzPrintRelators( P );
    TzPrintStatus( P ); </pre>
<P>
<P>
<code>TzPrint( <var>P</var> )</code>
<A name = "I22"></a>
 <BR> 
<code>TzPrint( <var>P</var>, <var>list</var> )</code>
<P>
<code>TzPrint</code> provides a  kind of  <strong>fast print out</strong> for a presentation record
<var>P</var>.
<P>
Remember that  in order to  speed up  the Tietze transformation routines,
each relator in a presentation record  <var>P</var> is internally represented by a
list of positive or negative generator  numbers, i.e., each factor of the
proper  <strong>GAP3</strong>  word  is  represented  by  the  position  number  of  the
corresponding  generator with respect to the current list of  generators,
or by the respective negative  number, if  the factor is the inverse of a
generator which  is not known to be an involution.   In  contrast  to the
commands  <code>TzPrintRelators</code>  and  <code>TzPrintPresentation</code>  described above,
<code>TzPrint</code> does not  convert these lists back to the corresponding  <strong>GAP3</strong>
words.
<P>
<code>TzPrint</code> prints the  current  list  of  generators,  and  then  for each
relator its length and its internal representation as a list  of positive
or negative generator numbers.
<P>
If  a  list  <var>list</var> has been specified  as  second  argument, then it  is
expected to  be a list of  the position  numbers of the  relators  to  be
printed.  <var>list</var> need not be sorted  and may contain  duplicate elements.
The relators are printed  in the order  in which and  as  often  as their
numbers occur in <var>list</var>.  Position numbers out  of range (with respect to
the list of relators) will be ignored.
<P>
There are  four more  print commands for  presentation records  which are
convenient  in  the  context  of  the interactive  Tietze  transformation
commands:
<P>
<P>
<code>TzPrintGeneratorImages( <var>P</var> )</code>
<P>
See <a href="chap023.htm#SECT013">Tietze Transformations</a>.
<P>
<P>
<code>TzPrintLengths( <var>P</var> )</code>
<P>
See <a href="chap023.htm#SECT013">Tietze Transformations</a>.
<P>
<P>
<code>TzPrintPairs( <var>P</var> )</code> <BR> 
<code>TzPrintPairs( <var>P</var>, <var>n</var> )</code>
<P>
See <a href="chap023.htm#SECT013">Tietze Transformations</a>.
<P>
<P>
<code>TzPrintOptions( <var>P</var> )</code>
<P>
See <a href="chap023.htm#SECT013">Tietze Transformations</a>.
<P>
Moreover, there  are two functions  which allow to convert abstract words
to Tietze words or Tietze words to abstract words.
<P>
<P>
<code>TietzeWordAbstractWord( <var>word</var>, <var>generators</var> )</code>
<A name = "I23"></a>

<P>
Let <var>generators</var> be a list of abstract  generators and <var>word</var> an abstract
word in  these generators.  The function <code>TietzeWordAbstractWord</code> returns
the corresponding (reduced) Tietze word.
<P>
<pre>    gap> F := FreeGroup( "a", "b", "c" );
    Group( a, b, c )
    gap> tzword := TietzeWordAbstractWord(
    >  Comm(F.1,F.2) * (F.3^2 * F.2)^-1, F.generators );
    [ -1, -2, 1, -3, -3 ] </pre>
<P>
<P>
<code>AbstractWordTietzeWord( <var>word</var>, <var>generators</var> )</code>
<A name = "I24"></a>

<P>
Let <var>generators</var>  be a list of  abstract  generators and  <var>word</var> a Tietze
word in these  generators.  The function <code>AbstractWordTietzeWord</code> returns
the corresponding abstract word.
<P>
<pre>    gap> AbstractWordTietzeWord( tzword, F.generators );
    a^-1*b^-1*a*c^-2 </pre>
<P>
<P>
<code>Save( <var>file</var>, <var>P</var>, <var>name</var> )</code>
<A name = "I25"></a>

<P>
The function <code>Save</code> allows to save a presentation and to  recover it in a
later <strong>GAP3</strong> session.
<P>
Let <var>P</var> be a presentation, and let  <var>file</var> and <var>name</var> be strings denoting
a file  name  and a   variable name,  respectively.   The function <code>Save</code>
generates a new  file <var>file</var> and  writes <var>P</var>  and <var>name</var> to  that file in
such  a way that a  copy of <var>P</var> can be  reestablished by just reading the
file with  the function <code>Read</code>. This  copy of <var>P</var>  will be assigned  to a
variable called <var>name</var>.
<P>
Warning: It is  not guaranteed that   the functions <code>Save</code> and  <code>Read</code>
work properly if  the  presentation record <var>P</var> contains  additional, user
defined  components. For  instance, components  involving  abstract words
cannot be   read in again as soon   as the associated  generators are not
available any more.
<P>
Example.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );;
    gap> G := F2 / [ F2.1^2, F2.2^7, Comm(F2.1,F2.1^F2.2),
    >                Comm(F2.1,F2.1^(F2.2^2))*(F2.1^F2.2)^-1 ];
    Group( a, b )
    gap> a := G.1;; b := G.2;;
    gap> P := PresentationFpGroup( G );
    &lt;&lt; presentation with 2 gens and 4 rels of total length 30 >>
    gap> TzPrintGenerators( P );
    #I  1.  a   11 occurrences   involution
    #I  2.  b   19 occurrences
    gap> TzPrintRelators( P );
    #I  1. a^2
    #I  2. b^7
    #I  3. a*b^-1*a*b*a*b^-1*a*b
    #I  4. a*b^-2*a*b^2*a*b^-2*a*b*a*b
    gap> TzPrint( P );
    #I  generators: [ a, b ]
    #I  relators:
    #I  1.  2  [ 1, 1 ]
    #I  2.  7  [ 2, 2, 2, 2, 2, 2, 2 ]
    #I  3.  8  [ 1, -2, 1, 2, 1, -2, 1, 2 ]
    #I  4.  13  [ 1, -2, -2, 1, 2, 2, 1, -2, -2, 1, 2, 1, 2 ]
    gap> TzPrintStatus( P );
    #I  there are 2 generators and 4 relators of total length 30
    gap> Save( "checkpoint", P, "P0" );
    gap> Read( "checkpoint" );
    #I  presentation record P0 read from file
    gap> P0;
    &lt;&lt; presentation with 2 gens and 4 rels of total length 30 >> </pre>
<P><A NAME="SECT009"><h2>23.9 Changing Presentations</h2></a>
<P><P><P>
The  commands  described  in  this section  can be  used  to  change  the
presentation in a presentation record.   Note that, in general, they will
change the  isomorphism  type  of the  group defined by the presentation.
Hence,  though they  sometimes  are  called  as  subroutines  by Tietze
transformations    commands    like    <code>TzSubstitute</code>    (see     <a href="chap023.htm#SECT013">Tietze
Transformations</a>),   they   do  <strong>not</strong>   perform   Tietze  transformations
themselves.
<P>
<P>
<code>AddGenerator( <var>P</var> )</code>
<A name = "I26"></a>
 <BR> 
<code>AddGenerator( <var>P</var>, <var>generator</var> )</code>
<P>
<code>AddGenerator</code> adds a new generator to the list of generators.
<P>
If you don't specify a second argument, then  <code>AddGenerator</code> will define
a  new  abstract  generator  <code>_x<var>i</var></code>  and save  it  in a  new  component
<code><var>P</var>.<var>i</var></code> of  the  given  presentation  record  where  <var>i</var>  is the  least
positive  integer which  has  not  yet  been used as a  generator number.
Though this  new generator will be printed as <code>_x<var>i</var></code>,  you will have to
use the external variable <code><var>P</var>.<var>i</var></code> if you want to access it.
<P>
If you  specify a second  argument, then <var>generator</var> must be  an abstract
generator which does  not yet occur in the presentation.   <code>AddGenerator</code>
will add it to the presentation and save  it in a new component <code><var>P</var>.<var>i</var></code>
in the same way as described for \_x<var>i</var> above.
<P>
<P>
<code>AddRelator( <var>P</var>, <var>word</var> )</code>
<A name = "I27"></a>

<P>
<code>AddRelator</code> adds  the word <var>word</var> to the list of  relators.  <var>word</var> must
be a word in the generators of the given presentation.
<P>
<P>
<code>RemoveRelator( <var>P</var>, <var>n</var> )</code>
<A name = "I28"></a>

<P>
<code>RemoveRelator</code>  removes the <var>n</var>th relator and  then resorts the  list of
relators in the given presentation record <var>P</var>.
<P><A NAME="SECT010"><h2>23.10 Group Presentations</h2></a>
<P><P><P>
In  section  <a href="chap023.htm#SECT008">Presentation    Records</a>  we  have described   the  funtion
<code>PresentationFpGroup</code> which supplies a presentation record for a finitely
presented  group.   The following  function   can be  used to  compute  a
presentation record for a concrete (e.g.  permutation or matrix) group.
<P>
<P>
<code>PresentationViaCosetTable( <var>G</var> )</code>
<A name = "I29"></a>
 <BR> 
<code>PresentationViaCosetTable( <var>G</var>, <var>F</var>, <var>words</var> )</code>
<P>
<code>PresentationViaCosetTable</code>   constructs a  presentation  record for  the
given  group  <var>G</var>.  The  method  being  used is  John Cannon's relations
finding algorithm which  has  been   described  in <A href="biblio.htm#Can73"><cite>Can73</cite></a>   or   in
<A href="biblio.htm#Neu82"><cite>Neu82</cite></a>.
<P>
In its first form, if  only the group  <var>G</var> has been specified, it applies
Cannon's single stage algorithm  which, by plain element multiplication,
computes a coset  table of <var>G</var> with  respect to its  trivial subgroup and
then uses coset enumeration  methods to find  a defining set of  relators
for <var>G</var>.
<P>
<pre>    gap> G := GeneralLinearGroup( 2, 7 );
    GL(2,7)
    gap> G.generators;
    [ [ [ Z(7), 0*Z(7) ], [ 0*Z(7), Z(7)^0 ] ],
      [ [ Z(7)^3, Z(7)^0 ], [ Z(7)^3, 0*Z(7) ] ] ]
    gap> Size( G );
    2016
    gap> P := PresentationViaCosetTable( G );
    &lt;&lt; presentation with 2 gens and 5 rels of total length 46 >>
    gap> TzPrintRelators( P );
    #I  1. f.2^3
    #I  2. f.1^6
    #I  3. f.1*f.2*f.1*f.2*f.1*f.2*f.1*f.2*f.1*f.2*f.1*f.2
    #I  4. f.1*f.2*f.1^-1*f.2*f.1*f.2^-1*f.1^-1*f.2*f.1*f.2*f.1^-1*f.2^-1
    #I  5. f.1^2*f.2*f.1*f.2*f.1*f.2^-1*f.1^-1*f.2^-1*f.1^3*f.2^-1 </pre>
<P>
The second form allows to call Cannon's two  stage algorithm which first
applies the single stage algorithm to  an appropriate subgroup <var>H</var> of <var>G</var>
and then uses the resulting relators of <var>H</var> and a coset table of <var>G</var> with
respect to <var>H</var> to find relators of <var>G</var>. In this case the second argument,
<var>F</var>, is assumed to be a free group with the same  number of generators as
<var>G</var>, and <var>words</var> is expected  to be a list of  words in the generators of
<var>F</var> which, when being  evaluated in the  corresponding generators of <var>G</var>,
provide subgroup generators for <var>H</var>.
<P>
<pre>    gap> M12 := MathieuGroup( 12 );;
    gap> M12.generators;
    [ ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11), ( 3, 7,11, 8)( 4,10, 5, 6),
      ( 1,12)( 2,11)( 3, 6)( 4, 8)( 5, 9)( 7,10) ]
    gap> F := FreeGroup( "a", "b", "c" );
    Group( a, b, c )
    gap> words := [ F.1, F.2 ];
    [ a, b ]
    gap> P := PresentationViaCosetTable( M12, F, words );
    &lt;&lt; presentation with 3 gens and 10 rels of total length 97 >>
    gap> G := FpGroupPresentation( P );
    Group( a, b, c )
    gap> G.relators;
    [ c^2, b^4, a*c*a*c*a*c, a*b^-2*a*b^-2*a*b^-2, a^11,
      a^2*b*a^-2*b^-2*a*b^-1*a^2*b^-1,
      a*b*a^-1*b*a^-1*b^-1*a*b*a^-1*b*a^-1*b^-1,
      a^2*b*a^2*b^-2*a^-1*b*a^-1*b^-1*a^-1*b^-1,
      a^2*b^-1*a^-1*b^-1*a*c*b*c*a*b*a*b, a^3*b*a^2*b*a^-2*c*a*b*a^-1*c*a
     ] </pre>
<P>
Before it is returned, the  resulting presentation is being simplified by
appropriate calls  of the  function  <code>SimplifyPresentation</code> (see  <a href="chap023.htm#SECT013">Tietze
Transformations</a>),  but     without   allowing   it   to  eliminate   any
generators. This restriction guarantees  that we get a  bijection between
the list  of  generators  of <var>G</var>  and   the list  of  generators  in  the
presentation.  Hence, if the  generators of <var>G</var> are  redundant and if you
don't care for the bijection, it may be convenient to apply the function
<code>SimplifyPresentation</code> again.
<P>
<pre>    gap> H := Group(
    >  [ (2,5,3), (2,7,5), (1,8,4), (1,8,6), (4,8,6), (3,5,7) ], () );;
    gap> P := PresentationViaCosetTable( H );
    &lt;&lt; presentation with 6 gens and 12 rels of total length 42 >>
    gap> SimplifyPresentation( P );
    #I  there are 4 generators and 10 relators of total length 36 </pre>
<P><A NAME="SECT011"><h2>23.11 Subgroup Presentations</h2></a>
<P><P><P>
<code>PresentationSubgroupRrs( <var>G</var>, <var>H</var> )</code>
<A name = "I30"></a>
 <BR> 
<code>PresentationSubgroupRrs( <var>G</var>, <var>H</var>, <var>string</var> )</code> <BR> 
<code>PresentationSubgroupRrs( <var>G</var>, <var>cosettable</var> )</code> <BR> 
<code>PresentationSubgroupRrs( <var>G</var>, <var>cosettable</var>, <var>string</var> )</code>
<P>
<code>PresentationSubgroupRrs</code>    returns   a    presentation   record    (see
<a href="chap023.htm#SECT008">Presentation Records</a>) containing a presentation for the subgroup <var>H</var> of
the    finitely   presented   group   <var>G</var>.    It   uses    the    Reduced
Reidemeister-Schreier method to construct this presentation.
<A name = "I31"></a>

<P>
As second argument, you may provide either the subgroup <var>H</var> itself or its
coset table in <var>G</var>.
<P>
The   generators  in  the  resulting  presentation  will   be   named  by
<code><var>string</var>1</code>, <code><var>string</var>2</code>, ..., the default string is <code>"_x"</code>.
<P>
The Reduced  Reidemeister-Schreier algorithm is  a  modification  of  the
Reidemeister-Schreier algorithm of George  Havas  <A href="biblio.htm#Hav74b"><cite>Hav74b</cite></a>.   It was
proposed by Joachim Neub&uuml;ser and first implemented in 1986 by
Andrea Lucchini and Volkmar Felsch in the SPAS system <A href="biblio.htm#Spa89"><cite>Spa89</cite></a>.  Like
George  Havas'  Reidemeister-Schreier  algorithm,  it  needs only  the
presentation of  <var>G</var> and a  coset table  of  <var>H</var>  in <var>G</var>  to construct  a
presentation of <var>H</var>.
<P>
Whenever you call  the <code>PresentationSubgroupRrs</code> command, it checks first
whether a  coset table  of <var>H</var> in <var>G</var> has already been computed and saved
in the subgroup  record of <var>H</var> by a  preceding call  of some  appropriate
command like <code>CosetTableFpGroup</code>  (see <a href="chap023.htm#SECT004">CosetTableFpGroup</a>), <code>Index</code> (see
<a href="chap007.htm#SECT051">Index</a>), or <code>LowIndexSubgroupsFpGroup</code> (see <a href="chap023.htm#SECT007">LowIndexSubgroupsFpGroup</a>).
Only  if the  coset table is not yet available, it  is now constructed by
<code>PresentationSubgroupRrs</code>  which   calls  <code>CosetTableFpGroup</code>  for   this
purpose.  In  this  case,  of  course, a set  of  generators  of  <var>H</var>  is
required, but they will not be used any more in the subsequent steps.
<P>
Next,  a  set of generators of <var>H</var> is  determined  by  reconstructing the
coset table and introducing in  that process as many  Schreier generators
of <var>H</var> in  <var>G</var> as are needed  to do a  Felsch  strategy coset enumeration
without  any  coincidences.  (In  general,  though  containing  redundant
generators,  this set will be  much smaller  than the set of all Schreier
generators.   That's   why   we   call    the   method   the   <strong>Reduced</strong>
Reidemeister-Schreier.)
<P>
After having constructed this set of <strong>primary subgroup generators</strong> , say,
the coset table is extended to an <strong>augmented coset table</strong> which describes
the  action of the  group generators  on  coset representatives, i.e., on
elements  instead of cosets.  For  this purpose,  suitable words  in  the
(primary) subgroup generators have to  be associated  to  the coset table
entries.  In order to keep the lengths of these words short, additional
<strong>secondary  subgroup  generators</strong>  are  introduced  as  abbreviations  of
subwords. Their number may be large.
<A name = "I32"></a>

<A name = "I33"></a>

<A name = "I34"></a>

<P>
Finally, a  Reidemeister  rewriting  process  is  used  to  get  defining
relators for <var>H</var> from the relators of <var>G</var>.  As the resulting presentation
of  <var>H</var>  is  a  presentation on  primary <strong>and</strong>  secondary generators,  in
general   you  will   have   to   simplify   it   by  appropriate  Tietze
transformations  (see  <a href="chap023.htm#SECT013">Tietze  Transformations</a>) or  by the <code>DecodeTree</code>
command  (see  <a href="chap023.htm#SECT014">DecodeTree</a>) before  you can use  it.   Therefore  it  is
returned in the form of a presentation record, <var>P</var> say.
<P>
Compared  with  the  Modified  Todd-Coxeter method described  below,  the
Reduced Reidemeister-Schreier method (as well as Havas' original
Reidemeister-Schreier program) has the advantage that it does not require
generators of <var>H</var>  to be given if  a coset table of <var>H</var> in  <var>G</var> is known.
This  provides  a  possibility to compute  a  presentation  of the normal
closure  of a  given  subgroup  (see  the  <code>PresentationNormalClosureRrs</code>
command below).
<P>
As you may be interested not only  to get the resulting presentation, but
also to know  what  the involved subgroup  generators  are,  the function
<code>PresentationSubgroupRrs</code>   will   also return  a   list   of the primary
generators of <var>H</var> as words in  the generators of <var>G</var>.   It is provided in
form   of an   additional  component  <code><var>P</var>.primaryGeneratorWords</code>  of the
resulting presentation record <var>P</var>.
<P>
Note however: As stated in the description of the function <code>Save</code> (see
<a href="chap023.htm#SECT008">Presentation Records</a>), the  function  <code>Read</code> cannot properly  recover a
component  involving  abstract  generators   different  from the  current
generators when it reads a presentation which has  been written to a file
by  the function  <code>Save</code>. Therefore the   function <code>Save</code> will ignore the
component  <code><var>P</var>.primaryGeneratorWords</code>  if  you  call it    to  write the
presentation <var>P</var> to a file. Hence this component will be lost if you read
the presentation  back from that file,  and it will be  left to  your own
responsibility to remember what the primary generators have been.
<P>
A few examples are given in section <a href="chap023.htm#SECT013">Tietze Transformations</a>.
<P>
<P>
<code>PresentationSubgroupMtc( <var>G</var>, <var>H</var> )</code>
<A name = "I35"></a>
 <BR> 
<code>PresentationSubgroupMtc( <var>G</var>, <var>H</var>, <var>string</var> )</code> <BR> 
<code>PresentationSubgroupMtc( <var>G</var>, <var>H</var>, <var>printlevel</var> )</code> <BR> 
<code>PresentationSubgroupMtc( <var>G</var>, <var>H</var>, <var>string</var>, <var>printlevel</var> )</code>
<P>
<code>PresentationSubgroupMtc</code>    returns    a   presentation   record    (see
<a href="chap023.htm#SECT008">Presentation Records</a>) containing a presentation for the subgroup <var>H</var> of
the  finitely  presented  group  <var>G</var>.  It  uses a  Modified  Todd-Coxeter
method to construct this presentation.
<A name = "I36"></a>

<P>
The  generators  in   the   resulting  presentation  will  be  named   by
<code><var>string</var>1</code>, <code><var>string</var>2</code>, ..., the default string is <code>"_x"</code>.
<P>
The optional <var>printlevel</var> parameter can be used to restrict  or to extend
the amount of  output provided by the <code>PresentationSubgroupMtc</code>  command.
In particular, by specifying the <var>printlevel</var> parameter to be  0, you can
suppress the output of  the <code>DecodeTree</code> command which is called  by  the
<code>PresentationSubgroupMtc</code>  command (see  below).  The  default  value  of
<var>printlevel</var> is 1.
<P>
The  so  called  Modified  Todd-Coxeter  method was proposed, in slightly
different forms, by Nathan S. Mendelsohn and William O. J. Moser in 1966.
Moser's  method  was proved by  Michael J. Beetham and Colin M. Campbell
(see <A href="biblio.htm#BC76"><cite>BC76</cite></a>).  Another  proof  for a  special version  was  given by
D. H. McLain (see  <A href="biblio.htm#McL77"><cite>McL77</cite></a>).  It  was generalized  to cover  a broad
spectrum  of different versions (see the  survey <A href="biblio.htm#Neu82"><cite>Neu82</cite></a>).  Moser's
method was implemented by Harvey A. Campbell (see <A href="biblio.htm#Cam71"><cite>Cam71</cite></a>.  Later, a
Modified Todd-Coxeter program was  implemented in  St. Andrews  by  David
G. Arrell, Sanjiv Manrai, and Michael  F. Worboys (see <A href="biblio.htm#AMW82"><cite>AMW82</cite></a>)  and
further  developed   by  David  G. Arrel  and  Edmund  F. Robertson  (see
<A href="biblio.htm#AR84"><cite>AR84</cite></a>) and by Volkmar Felsch in the SPAS system <A href="biblio.htm#Spa89"><cite>Spa89</cite></a>.
<P>
The  <code>Modified Todd-Coxeter</code>  method  performs  an enumeration  of  coset
representatives.   It  proceeds like an  ordinary  coset enumeration (see
<code>CosetTableFpGroup</code> <a href="chap023.htm#SECT004">CosetTableFpGroup</a>), but as  the product of  a coset
representative by  a group  generator or its inverse need not be a  coset
representative itself, the Modified Todd-Coxeter has to store a  kind  of
correction element for each coset table entry.   Hence it builds  up a so
called <strong>augmented coset table</strong> of <var>H</var>  in <var>G</var> consisting  of the ordinary
coset table and a second  table in parallel which contains the associated
subgroup elements.
<A name = "I37"></a>

<P>
Theoretically, these subgroup elements could be expressed as words in the
given generators of   <var>H</var>, but in    general these words tend   to become
unmanageable  because of their   enormous lengths.   Therefore,  a highly
redundant list of subgroup generators is built up starting from the given
(``<strong>primary</strong>'')  generators     of    <var>H</var>   and     adding   additional
(``<strong>secondary</strong>'')  generators which  are  defined as   abbreviations of
suitable words of length  two in the  preceding generators such that each
of the subgroup elements in the augmented coset table can be expressed as
a word of length at most  one in the  resulting (primary <strong>and</strong> secondary)
subgroup generators.
<A name = "I38"></a>

<A name = "I39"></a>

<P>
Then  a  rewriting  process (which is essentially a kind of  Reidemeister
rewriting process) is used to  get  relators  for  <var>H</var>  from the defining
relators of <var>G</var>.
<P>
The resulting presentation involves  all  the  primary, but not  all  the
secondary generators of <var>H</var>.   In fact, it contains only those  secondary
generators which  explicitly occur in the augmented  coset table.  If  we
extended this presentation by those  secondary generators which  are  not
yet contained in it as additional generators,  and by the  definitions of
all  secondary   generators  as  additional  relators,  we  would  get  a
presentation of <var>H</var>, but, in general, we would end up with a large number
of generators and relators.
<P>
On the other hand, if  we  avoid this extension, the current presentation
will not necessarily define <var>H</var> although  we have used the same rewriting
process  which  in  the  case of  the  <code>SubgroupPresentationRrs</code>  command
computes a defining set of relators for <var>H</var> from an augmented coset table
and defining relators  of <var>G</var>.  The different behaviour here is caused by
the fact that coincidences may have occurred in the Modified Todd-Coxeter
coset enumeration.
<P>
To  overcome  this problem  without  extending  the presentation  by  all
secondary generators, the  <code>SubgroupPresentationMtc</code> command  applies the
so called  <strong>tree decoding</strong>  algorithm  which provides  a  more economical
approach.   The reader is  strongly recommended to carefully read section
<a href="chap023.htm#SECT014">DecodeTree</a>  where this algorithm is  described in more detail.  Here we
will  only  mention  that  this  procedure  adds  many  fewer  additional
generators  and relators  in a  process  which  in  fact  eliminates  all
secondary generators from  the presentation and hence finally  provides a
presentation  of  <var>H</var>  on  the  primary,  i.e.,  the   originally  given,
generators   of  <var>H</var>.   This   is   a   remarkable   advantage   of   the
<code>SubgroupPresentationMtc</code>       command       compared       to       the
<code>SubgroupPresentationRrs</code>  command.   But note that, for  some particular
subgroup <var>H</var>, the  Reduced Reidemeister-Schreier method might quite  well
produce a more concise presentation.
<P>
The  resulting  presentation  is  returned in  the form of a presentation
record, <var>P</var> say.
<P>
As the function <code>PresentationSubgroupRrs</code> desribed  above (see there  for
details), the function  <code>PresentationSubgroupMtc</code> returns  a list of  the
primary   subgroup generators    of    <var>H</var>   in form  of    a   component
<code><var>P</var>.primaryGeneratorWords</code>. In fact, this list is not very exciting here
because it  is just a copy  of  the list <code><var>H</var>.generators</code>, however  it is
needed to  guarantee a  certain  consistency between  the results  of the
different functions for computing subgroup presentations.
<P>
Though  the tree   decoding routine  already  involves  a  lot of  Tietze
transformations,   we  recommend that you  try   to  further simplify the
resulting presentation by appropriate Tietze transformations (see <a href="chap023.htm#SECT013">Tietze
Transformations</a>).
<P>
An example is given in section <a href="chap023.htm#SECT014">DecodeTree</a>.
<P>
<P>
<code>PresentationSubgroup( <var>G</var>, <var>H</var> )</code>
<A name = "I40"></a>
 <BR> 
<code>PresentationSubgroup( <var>G</var>, <var>H</var>, <var>string</var> )</code> <BR> 
<code>PresentationSubgroup( <var>G</var>, <var>cosettable</var> )</code> <BR> 
<code>PresentationSubgroup( <var>G</var>, <var>cosettable</var>, <var>string</var> )</code>
<P>
<code>PresentationSubgroup</code> returns a presentation record  (see  <a href="chap023.htm#SECT008">Presentation
Records</a>) containing a presentation for the subgroup  <var>H</var> of the finitely
presented group <var>G</var>.
<P>
As second argument, you may provide either the subgroup <var>H</var> itself or its
coset table in <var>G</var>.
<P>
In  the case   of providing  the  subgroup  <var>H</var>  itself as  argument, the
current   <strong>GAP3</strong>  implementation offers a  choice   between two different
methods for  constructing   subgroup presentations,  namely   the Reduced
Reidemeister-Schreier and  the Modified  Todd-Coxeter procedure.  You can
specify either of  them by calling the commands <code>PresentationSubgroupRrs</code>
or <code>PresentationSubgroupMtc</code>, respectively.  Further methods may be added
in a later <strong>GAP3</strong> version.  If, in  some concrete application, you don't
care  for   the    method   to    be selected,     you    may use     the
<code>PresentationSubgroup</code>  command  as a kind  of default  command.   In the
present installation,   it  will call  the  Reduced Reidemeister-Schreier
method, i.e., it is identical with the <code>PresentationSubgroupRrs</code> command.
<P>
A few examples are given in section <a href="chap023.htm#SECT013">Tietze Transformations</a>.
<P>
<P>
<code>PresentationNormalClosureRrs( <var>G</var>, <var>H</var> )</code>
<A name = "I41"></a>
 <BR> 
<code>PresentationNormalClosureRrs( <var>G</var>, <var>H</var>, <var>string</var> )</code>
<P>
<code>PresentationNormalClosureRrs</code> returns   a  presentation record      (see
<a href="chap023.htm#SECT008">Presentation Records</a>), <var>P</var>  say, containing   a  presentation for   the
normal closure of the  subgroup <var>H</var> of the  finitely presented group <var>G</var>.
It uses the  Reduced   Reidemeister-Schreier  method to  construct   this
presentation.  This provides a  possibility to compute a presentation for
a normal subgroup  for which only  ``normal subgroup generators'',  but
not necessarily a full set of generators are known.
<P>
The   generators  in   the  resulting   presentation  will  be  named  by
<code><var>string</var>1</code>, <code><var>string</var>2</code>, ..., the default string is <code>"_x"</code>.
<P>
<code>PresentationNormalClosureRrs</code>  first  establishes an  intermediate group
record for the factor group of <var>G</var> by the normal closure <var>N</var>, say, of <var>H</var>
in <var>G</var>.  Then it performs a coset enumeration of  the trivial subgroup in
that factor group.  The resulting coset table  can be considered as coset
table  of  <var>N</var> in <var>G</var>, hence  a presentation for <var>N</var> can  be  constructed
using the  Reduced  Reidemeister-Schreier algorithm as  described for the
<code>PresentationSubgroupRrs</code> command.
<P>
As the  function <code>PresentationSubgroupRrs</code> desribed  above (see there for
details),  the function <code>PresentationNormalClosureRrs</code>  returns a list of
the  primary   subgroup  generators  of  <var>N</var>  in    form  of a  component
<code><var>P</var>.primaryGeneratorWords</code>.
<P>
<P>
<code>PresentationNormalClosure( <var>G</var>, <var>H</var> )</code>
<A name = "I42"></a>
 <BR> 
<code>PresentationNormalClosure( <var>G</var>, <var>H</var>, <var>string</var> )</code>
<P>
<code>PresentationNormalClosure</code>   returns    a   presentation   record   (see
<a href="chap023.htm#SECT008">Presentation Records</a>) containing a presentation for the  normal closure
of the subgroup <var>H</var> of the finitely presented group <var>G</var>.  This provides a
possibility  to  compute  a presentation for a normal subgroup for  which
only ``normal  subgroup generators'', but not necessarily a full set of
generators are known.
<P>
If,  in  a  later  release,  <strong>GAP3</strong>  offers  different  methods  for  the
construction      of     normal     closure      presentations,      then
<code>PresentationNormalClosure</code> will call one of these  procedures as a  kind
of    default    method.     At    present,    however,    the    Reduced
Reidemeister-Schreier  algorithm  is  the only  one implemented  so  far.
Therefore,  at   present   the  <code>PresentationNormalClosure</code>   command  is
identical  with  the   <code>PresentationNormalClosureRrs</code>  command  described
above.
<P><A NAME="SECT012"><h2>23.12 SimplifiedFpGroup</h2></a>
<P><P><P>
<code>SimplifiedFpGroup( <var>G</var> )</code>
<P>
<code>SimplifiedFpGroup</code>  applies  Tietze  transformations  to a  copy of  the
presentation of the given finitely presented group <var>G</var> in order to reduce
it with respect to  the number of generators, the number of relators, and
the relator lengths.
<P>
<code>SimplifiedFpGroup</code> returns the resulting finitely presented group (which
is isomorphic to <var>G</var>).
<P>
<pre>    gap> F6 := FreeGroup( 6, "G" );;
    gap> G := F6 / [ F6.1^2, F6.2^2, F6.4*F6.6^-1, F6.5^2, F6.6^2,
    >         F6.1*F6.2^-1*F6.3, F6.1*F6.5*F6.3^-1, F6.2*F6.4^-1*F6.3,
    >         F6.3*F6.4*F6.5^-1, F6.1*F6.6*F6.3^-2, F6.3^4 ];;
    gap> H := SimplifiedFpGroup( G );
    Group( G.1, G.3 )
    gap> H.relators;
    [ G.1^2, G.1*G.3^-1*G.1*G.3^-1, G.3^4 ] </pre>
<P>
In fact, the command
<P>
<code>    H := SimplifiedFpGroup( G ); </code>
<P>
is an abbreviation of the command sequence
<P>
<pre>    P := PresentationFpGroup( G, 0 );;
    SimplifyPresentation( P );
    H := FpGroupPresentation( P ); </pre>
<P>
which applies  a rather simple-minded strategy of  Tietze transformations
to the intermediate presentation record <var>P</var> (see <a href="chap023.htm#SECT008">Presentation Records</a>).
If for  some  concrete group the resulting presentation  is unsatisfying,
then  you  should  try  a  more  sophisticated,  interactive  use of  the
available Tietze transformation commands  (see <a href="chap023.htm#SECT013">Tietze Transformations</a>).
<P><A NAME="SECT013"><h2>23.13 Tietze Transformations</h2></a>
<P><P><P>
The <strong>GAP3</strong> commands being described in this section can be used to modify
a group presentation  in a presentation record by Tietze transformations.
<P>
In general, the aim of such modifications will be to <strong>simplify</strong> the given
presentation, i.e., to reduce the number of generators and the number  of
relators without increasing too much the sum of all relator lengths which
we  will  call the <strong>total length</strong> of the  presentation.  Depending on the
concrete  presentation under  investigation  one may end up  with a nice,
short presentation or with a very huge one.
<A name = "I43"></a>

<P>
Unfortunately there  is  no algorithm which could be  applied to find the
shortest presentation which  can  be  obtained  by Tietze transformations
from a  given one.  Therefore, what  <strong>GAP3</strong>  offers  are some lower-level
Tietze  transformation  commands  and,  in  addition,  some  higher-level
commands which apply the lower-level ones in  a kind of  default strategy
which of course cannot be the optimal choice for all presentations.
<P>
The  design  of  these commands  follows closely the  concept of the  ANU
Tietze transformation program designed by George Havas <A href="biblio.htm#Hav69"><cite>Hav69</cite></a> which
has been  available  from Canberra  since  1977 in a  stand-alone version
implemented by Peter  Kenne and  James Richardson and later on revised by
Edmund F. Robertson (see <A href="biblio.htm#HKRR84"><cite>HKRR84</cite></a>, <A href="biblio.htm#Rob88"><cite>Rob88</cite></a>).
<P>
\vspace5mm In this section, we first describe the higher-level commands
<code>SimplifyPresentation</code>, <code>TzGo</code>,  and  <code>TzGoGo</code> (the  first two  of  these
commands are identical).
<P>
Then  we  describe  the  lower-level commands  <code>TzEliminate</code>, <code>TzSearch</code>,
<code>TzSearchEqual</code>, and  <code>TzFindCyclicJoins</code>.  They  are the bricks of which
the preceding higher-level commands have been composed.  You may use them
to  try  alternative  strategies,  but  if  you  are  satisfied  by   the
performance of <code>TzGo</code> and <code>TzGoGo</code>, then you don't need them.
<P>
Some  of  the Tietze transformation commands listed so far  may eliminate
generators and hence change the given presentation to a presentation on a
subset  of  the  given set of generators, but they all do <strong>not</strong> introduce
new generators.  However,  sometimes you will need to  substitute certain
words as new generators in order to improve your presentation.  Therefore
<strong>GAP3</strong>     offers     the     two     commands     <code>TzSubstitute</code>     and
<code>TzSubstituteCyclicJoins</code> which introduce new generators.  These commands
will be described next.
<P>
Then we continue  the  section   with  a  description of  the    commands
<code>TzInitGeneratorImages</code> and <code>TzPrintGeneratorImages</code> which can be used to
determine and to   display  the images  or   preimages of  the   involved
generators  under the  isomorphism  which is defined  by  the sequence of
Tietze transformations which are applied to a presentation.
<P>
Subsequently we describe  some further print  commands, <code>TzPrintLengths</code>,
<code>TzPrintPairs</code>,  and <code>TzPrintOptions</code>, which are useful if  you  run  the
Tietze transformations interactively.
<P>
At the end of the section  we list the  <strong>Tietze  options</strong>  and give their
default  values.  These  are  parameters which essentially influence  the
performance  of  the commands mentioned  above.   However, they  are  not
specified as  arguments of function  calls.  Instead, they are associated
to the  presentation  records: Each presentation record keeps  its own
set of Tietze option values in the form of ordinary record components.
<P>
<P>
<code>SimplifyPresentation( <var>P</var> )</code>
<A name = "I44"></a>
 <BR> 
<code>TzGo( <var>P</var> )</code>
<A name = "I45"></a>

<P>
<code>SimplifyPresentation</code>  performs Tietze transformations on a presentation
<var>P</var>.   It  is perhaps  the  most  convenient  of  the interactive  Tietze
transformation commands.  It offers  a kind of default strategy which, in
general,  saves you from explicitly  calling the lower-level commands  it
involves.
<P>
Roughly  speaking,  <code>SimplifyPresentation</code>  consists  of  a  loop  over a
procedure which  involves two  phases: In the <strong>search phase</strong> it  calls
<code>TzSearch</code> and <code>TzSearchEqual</code>  described  below which  try to reduce the
relator lengths  by  substituting  common  subwords  of relators,  in the
<strong>elimination phase</strong>  it calls the command  <code>TzEliminate</code>  described below
(or, more  precisely, a subroutine of <code>TzEliminate</code> in order to save some
administrative overhead) which tries to eliminate generators that can  be
expressed as words in the remaining generators.
<P>
If <code>SimplifyPresentation</code> succeeds in reducing the number of  generators,
the  number of  relators,  or the total length of all  relators, then  it
displays the  new  status before returning (provided that you did not set
the print level to zero).  However, it does not provide any output if all
these three  values  have remained unchanged, even if the <code>TzSearchEqual</code>
command involved has changed the presentation such  that  another call of
<code>SimplifyPresentation</code> might provide further  progress.  Hence, in such a
case it makes sense  to repeat the call of the command for  several times
(or to call instead the <code>TzGoGo</code> command which we will describe next).
<P>
As an example  we  compute  a presentation of a  subgroup of index 408 in
<I>PSL(2,17)</I>.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );;
    gap> G := F2 / [ F2.1^9, F2.2^2, (F2.1*F2.2)^4, (F2.1^2*F2.2)^3 ];;
    gap> a := G.1;;  b := G.2;;
    gap> H := Subgroup( G, [ (a*b)^2, (a^-1*b)^2 ] );;
    gap> Index( G, H );
    408
    gap> P := PresentationSubgroup( G, H );
    &lt;&lt; presentation with 8 gens and 36 rels of total length 111 >>
    gap> P.primaryGeneratorWords;
    [ b, a*b*a ]
    gap> P.protected := 2;;
    gap> P.printLevel := 2;;
    gap> SimplifyPresentation( P );
    #I  eliminating _x7 = _x5
    #I  eliminating _x5 = _x4
    #I  eliminating _x18 = _x3
    #I  eliminating _x8 = _x3
    #I  there are 4 generators and 8 relators of total length 21
    #I  there are 4 generators and 7 relators of total length 18
    #I  eliminating _x4 = _x3^-1*_x2^-1
    #I  eliminating _x3 = _x2*_x1^-1
    #I  there are 2 generators and 4 relators of total length 14
    #I  there are 2 generators and 4 relators of total length 13
    #I  there are 2 generators and 3 relators of total length 9
    gap> TzPrintRelators( P );
    #I  1. _x1^2
    #I  2. _x2^3
    #I  3. _x2*_x1*_x2*_x1 </pre>
<P>
Note that the number  of loops over the two phases as well  as the number
of  subword   searches  or  generator  eliminations  in  each  phase  are
determined by a set of option parameters which may  heavily influence the
resulting presentation and the computing time (see Tietze options below).
<P>
<code>TzGo</code> is just another name  for the  <code>SimplifyPresentation</code> command.  It
has  been introduced for  the convenience  of those <strong>GAP3</strong> users  who are
used to  that  name from the <strong>go</strong> option of the ANU Tietze transformation
stand-alone program or from the <strong>go</strong> command in SPAS.
<P>
<P>
<code>TzGoGo( <var>P</var> )</code>
<A name = "I46"></a>

<P>
<code>TzGoGo</code>  performs  Tietze  transformations  on  a presentation  <var>P</var>.  It
repeatedly   calls  the  <code>TzGo</code>  command  until  neither  the  number  of
generators  nor  the number  of relators  nor  the total  length  of  all
relators have changed during five consecutive calls of <code>TzGo</code>.
<P>
This  may  remarkably  save  you  time  and effort  if you  handle  small
presentations, however it may  lead  to  annoyingly  long  and  fruitless
waiting times in case of large presentations.
<P>
<P>
<code>TzEliminate( <var>P</var> )</code>
<A name = "I47"></a>
 <BR> 
<code>TzEliminate( <var>P</var>, <var>gen</var> )</code> <BR> 
<code>TzEliminate( <var>P</var>, <var>n</var> )</code>
<P>
<code>TzEliminate</code> tries to eliminate a generator from a  presentation <var>P</var> via
Tietze transformations.
<P>
Any  relator which  contains  some generator just  once  can be  used  to
substitute that generator by a word in the remaining generators.  If such
generators and relators exist, then <code>TzEliminate</code> chooses a generator for
which  the product of  its number  of occurrences and  the length  of the
substituting word is minimal, and  then it eliminates this generator from
the  presentation, provided  that  the  resulting  total  length  of  the
relators  does   not  exceed  the  associated  Tietze  option   parameter
<code><var>P</var>.spaceLimit</code>.   The default value of <code><var>P</var>.spaceLimit</code>  is <code>infinity</code>,
but you may alter it appropriately (see Tietze options below).
<P>
If you specify a generator <var>gen</var> as  second argument, then  <code>TzEliminate</code>
only tries to eliminate that generator.
<P>
If you  specify an  integer  <var>n</var>  as second argument,  then <code>TzEliminate</code>
tries  to   eliminate   up  to   <var>n</var>  generators.  Note  that  the  calls
<code>TzEliminate( <var>P</var> )</code> and <code>TzEliminate( <var>P</var>, 1 )</code> are equivalent.
<P>
<P>
<code>TzSearch( <var>P</var> )</code>
<A name = "I48"></a>

<P>
<code>TzSearch</code>  performs Tietze transformations  on  a  presentation <var>P</var>.  It
tries to reduce the relator lengths by  substituting  common  subwords of
relators by shorter words.
<P>
The idea is to find pairs of relators <I>r<sub>1</sub></I> and <I>r<sub>2</sub></I> of length <I>l<sub>1</sub></I> and
<I>l<sub>2</sub></I>, respectively, such that <I>l<sub>1</sub>  &le; l<sub>2</sub></I> and <I>r<sub>1</sub></I> and <I>r<sub>2</sub></I> coincide
(possibly  after inverting or conjugating one of  them)  in some  maximal
subword <I>w</I>, say, of length  greater than <I>l<sub>1</sub>/2</I>, and then to substitute
each copy of <I>w</I> in <I>r<sub>2</sub></I> by the inverse complement of <I>w</I> in <I>r<sub>1</sub></I>.
<P>
Two of the  Tietze option parameters which  are listed at the end of this
section may  strongly  influence the performance and  the results of  the
<code>TzSearch</code>  command.   These  are   the  parameters  <code><var>P</var>.saveLimit</code>  and
<code><var>P</var>.searchSimultaneous</code>.  The first of them has the following effect.
<P>
When TzSearch  has  finished  its main  loop over  all relators, then, in
general, there are  relators which  have  changed  and  hence  should  be
handled  again in  another run  through  the  whole  procedure.  However,
experience shows that it really does  not pay  to continue this way until
no more relators change.  Therefore, <code>TzSearch</code> starts a new loop only if
the loop just finished has reduced the total length of the relators by at
least <code><var>P</var>.saveLimit</code> per cent.
<P>
The default value of <code><var>P</var>.saveLimit</code> is 10.
<P>
To understand the  effect of  the parameter <code><var>P</var>.searchSimultaneous</code>,  we
have to look in more detail at how <code>TzSearch</code> proceeds.
<P>
First,  it sorts  the  list of  relators by increasing lengths.   Then it
performs a loop  over this list.  In each step  of this loop, the current
relator  is treated as <strong>short  relator</strong> <I>r<sub>1</sub></I>, and a subroutine is called
which  loops  over  the  succeeding  relators,  treating  them  as  <strong>long
relators</strong>   <I>r<sub>2</sub></I>   and  performing   the   respective   comparisons  and
substitutions.
<P>
As  this  subroutine performs a  very  expensive  process,  it  has  been
implemented  as a C routine in the  <strong>GAP3</strong> kernel.  For the given relator
<I>r<sub>1</sub></I> of  length <I>l<sub>1</sub></I>,  say,  it  first  determines  the  <strong>minimal match
length</strong>  <I>l</I>  which  is  <I>l<sub>1</sub>/2+1</I>,  if  <I>l<sub>1</sub></I>  is  even, or <I>(l<sub>1</sub>+1)/2</I>,
otherwise.  Then it builds  up a hash list for all subwords of length <I>l</I>
occurring in the conjugates of  <I>r<sub>1</sub></I> or <I>r<sub>1</sub><sup>-1</sup></I>, and finally it loops
over all long  relators  <I>r<sub>2</sub></I> and  compares the  hash  values  of  their
subwords of length <I>l</I> against this list.  A comparison of subwords which
is much more expensive is only done if a hash match has been found.
<P>
To improve  the efficiency  of this  process  we  allow the subroutine to
handle several short relators simultaneously provided that they  have the
same  minimal  match  length.   If,  for example,  it  handles  <I>n</I> short
relators simultaneously,  then you save  <I>n  -  1</I> loops  over  the  long
relators <I>r<sub>2</sub></I>,  but  you  pay  for  it by  additional fruitless  subword
comparisons.  In general, you will not get the best performance by always
choosing the maximal  possible number of  short  relators  to  be handled
simultaneously.  In fact, the optimal choice of the number will depend on
the concrete presentation under investigation.  You can use the parameter
<code><var>P</var>.searchSimultaneous</code> to prescribe  an upper  bound for the  number of
short relators to be handled simultaneously.
<P>
The default value of <code><var>P</var>.searchSimultaneous</code> is 20.
<P>
<P>
<code>TzSearchEqual( <var>P</var> )</code>
<A name = "I49"></a>

<P>
<code>TzSearchEqual</code>  performs Tietze transformations on a  presentation  <var>P</var>.
It tries to alter relators by substituting common subwords of relators by
subwords of equal length.
<P>
The idea is to find pairs of relators <I>r<sub>1</sub></I> and <I>r<sub>2</sub></I> of length <I>l<sub>1</sub></I> and
<I>l<sub>2</sub></I>, respectively, such that <I>l<sub>1</sub></I> is  even, <I>l<sub>1</sub>   &le; l<sub>2</sub></I>, and  <I>r<sub>1</sub></I>
and <I>r<sub>2</sub></I> coincide (possibly after inverting or conjugating one  of them)
in some maximal subword <I>w</I>, say, of length at least <I>l<sub>1</sub>/2</I>.  Let <I>l</I> be
the  length of  <I>w</I>.   Then, if  <I>l &gt; l<sub>1</sub>/2</I>,  the pair is  handled as in
<code>TzSearch</code>.  Otherwise, if <I>l  = l<sub>1</sub>/2</I>, then <code>TzSearchEqual</code> substitutes
each copy of <I>w</I> in <I>r<sub>2</sub></I> by the inverse complement of <I>w</I> in <I>r<sub>1</sub></I>.
<P>
The  Tietze  option   parameter   <code><var>P</var>.searchSimultaneous</code>  is   used  by
<code>TzSearchEqual</code> in the same way as described for <code>TzSearch</code>.
<P>
However, <code>TzSearchEqual</code> does  not use the  parameter <code><var>P</var>.saveLimit</code>:
The loop over the relators is executed exactly once.
<P>
<P>
<code>TzFindCyclicJoins( <var>P</var> )</code>
<A name = "I50"></a>

<P>
<code>TzFindCyclicJoins</code> performs  Tietze transformations  on  a  presentation
<var>P</var>.  It searches  for pairs of generators which generate the same cyclic
subgroup and eliminates  one of  the two generators of each such pair  it
finds.
<P>
More precisely:  <code>TzFindCyclicJoins</code>  searches for pairs of generators
<I>a</I>  and  <I>b</I> such that (possibly  after inverting  or  conjugating  some
relators)  the set of relators  contains the  commutator <I>[a,b]</I>, a power
<I>a<sup>n</sup></I>, and  a  product  of the form <I>a<sup>s</sup> b<sup>t</sup></I> with <I>s</I> prime to <I>n</I>.  For
each  such  pair, <code>TzFindCyclicJoins</code>  uses  the  Euclidian algorithm  to
express <I>a</I> as a power of <I>b</I>, and then it eliminates <I>a</I>.
<P>
<P>
<code>TzSubstitute( <var>P</var>, <var>word</var> )</code>
<A name = "I51"></a>
 <BR> 
<code>TzSubstitute( <var>P</var>, <var>word</var>, <var>string</var> )</code>
<P>
There are two forms of the command <code>TzSubstitute</code>. This is the first one.
It expects  <var>P</var> to be a presentation and  <var>word</var> to be either an abstract
word or a Tietze word in the generators of <var>P</var>.  It substitutes the given
word as a new generator of <var>P</var>. This is done as follows.
<P>
First, <code>TzSubstitute</code> creates a new abstract generator, <I>g</I> say, and adds
it to the presentation <var>P</var>,  then it adds a  new relator <I>g<sup>-1</sup> \! .
\!  word </I>  to <var>P</var>.  If  a string <var>string</var> has  been specified as third
argument, the new generator  <I>g</I> will be  named by <var>string</var>, otherwise it
will get  a   default  name  <code>_x<var>i</var></code> as   described   with the  function
<code>AddGenerator</code> (see <a href="chap023.htm#SECT009">Changing Presentations</a>).
<P>
More precisely: If, for instance, <code>word</code> is an abstract word, a call
<P>
<code>    TzSubstitute( P, word );</code>
<P>
is more or less equivalent to
<P>
<pre>    AddGenerator( P );
    g := P.generators[Length( P.generators )];
    AddRelator( P, g^-1 * word );</pre>
<P>
whereas a call
<P>
<code>    TzSubstitute( P, word, string );</code>
<P>
is more or less equivalent to
<P>
<pre>    g := AbstractGenerator( string );
    AddGenerator( P, g );
    AddRelator( P, g^-1 * word );</pre>
<P>
The   essential  difference   is,   that  <code>TzSubstitute</code>,  as  a   Tietze
transformation  of <var>P</var>, saves and updates  the lists  of generator images
and preimages if  they are being  traced under the Tietze transformations
applied to <var>P</var> (see  the function <code>TzInitGeneratorImages</code> below), whereas
a call  of the  function <code>AddGenerator</code> (which   does not perform  Tietze
transformations) will delete these lists and hence terminate the tracing.
<P>
Example.
<P>
<pre>    gap> G := PerfectGroup( 960, 1 );
    PerfectGroup(960,1)
    gap> P := PresentationFpGroup( G );
    &lt;&lt; presentation with 6 gens and 21 rels of total length 84 >>
    gap> P.generators;
    [ a, b, s, t, u, v ]
    gap> TzGoGo( P );
    #I  there are 3 generators and 10 relators of total length 81
    #I  there are 3 generators and 10 relators of total length 80
    gap> TzPrintGenerators( P );
    #I  1.  a   31 occurrences   involution
    #I  2.  b   26 occurrences
    #I  3.  t   23 occurrences   involution
    gap> a := P.generators[1];;
    gap> b := P.generators[2];;
    gap> TzSubstitute( P, a*b, "ab" );
    #I  substituting new generator ab defined by a*b
    #I  there are 4 generators and 11 relators of total length 83
    gap> TzGo(P);
    #I  there are 3 generators and 10 relators of total length 74
    gap> TzPrintGenerators( P );
    #I  1.  a   23 occurrences   involution
    #I  2.  t   23 occurrences   involution
    #I  3.  ab   28 occurrences </pre>
<P>
<P>
<code>TzSubstitute( <var>P</var> )</code>
<A name = "I52"></a>
 <BR> 
<code>TzSubstitute( <var>P</var>, <var>n</var> )</code> <BR> 
<code>TzSubstitute( <var>P</var>, <var>n</var>, <var>eliminate</var> )</code>
<P>
This is the second form of the command <code>TzSubstitute</code>.
It performs Tietze transformations on the presentation <var>P</var>.
Basically, it  substitutes  a  squarefree  word  of  length  2  as  a new
generator and then eliminates a  generator  from  the extended  generator
list. We will describe this process in more detail.
<P>
The  parameters  <var>n</var>  and  <var>eliminate</var>  are  optional.   If  you  specify
arguments  for them, then <var>n</var>  is expected to be a  positive integer, and
<var>eliminate</var> is expected to be 0, 1, or 2.  The default values are <I>n = 1</I>
and <I>eliminate = 0</I>.
<P>
<code>TzSubstitute</code>   first  determines  the  <var>n</var>  most  frequently  occurring
squarefree  relator subwords  of  length  2 and sorts  them by decreasing
numbers of occurrences.  Let <I>ab</I> be the <var>n</var>th word in that list, and let
<var>i</var> be the smallest  positive integer  which has not  yet  been used as a
generator number.  Then <code>TzSubstitute</code> defines a new  generator <code><var>P</var>.<var>i</var></code>
(see  <code>AddGenerator</code> for  details), adds it to  the presentation together
with a new relator <I>P.i<sup>-1</sup>ab</I>, and  replaces all occurrences of <I>ab</I> in
the given relators by <code><var>P</var>.<var>i</var></code>.
<P>
Finally,  it eliminates some generator  from  the  extended presentation.
The  choice  of that  generator  depends  on  the  actual  value  of  the
<var>eliminate</var> parameter:
<P>
If <var>eliminate</var> is zero, then the generator to be eliminated is  chosen as
by the  <code>TzEliminate</code> command.  This means  that in this case it may well
happen that  it is the generator <code><var>P</var>.<var>i</var></code> just introduced which  is  now
deleted  again  so  that  you do  not  get  any  remarkable  progress  in
transforming  your  presentation.   On  the other  hand,  this  procedure
guaranties that the total length of the relators will not be increased by
a call of <code>TzSubstitute</code> with <I>eliminate = 0</I>.
<P>
Otherwise,  if <var>eliminate</var> is 1 or 2, then  <code>TzSubstitute</code> eliminates the
respective factor of the  substituted word <I>ab</I>, i.e., <I>a</I> for <I>eliminate
=  1</I> or  <I>b</I> for <I>eliminate = 2</I>.  In this case, it may well happen that
the  total  length  of  the  relators  increases,  but  sometimes such an
intermediate  extension  is  the  only  way to  finally  reduce  a  given
presentation.
<P>
In order to decide which arguments might be appropriate for the next call
of <code>TzSubstitute</code>, often it  is helpful to print out a  list of the  most
frequently occurring squarefree  relator subwords of  length 2.  You  may
use the <code>TzPrintPairs</code> command described below to do this.
<P>
As an example we handle a subgroup of index 266 in the Janko group <I>J<sub>1</sub></I>.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );;
    gap> J1 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^7,
    >    Comm(F2.1,F2.2)^10, Comm(F2.1,F2.2^-1*(F2.1*F2.2)^2)^6 ];;
    gap> a := J1.1;;  b := J1.2;;
    gap> H := Subgroup ( J1, [ a, b^(a*b*(a*b^-1)^2) ] );;
    gap> P := PresentationSubgroup( J1, H );
    &lt;&lt; presentation with 23 gens and 82 rels of total length 530 >>
    gap> TzGoGo( P );
    #I  there are 3 generators and 47 relators of total length 1368
    #I  there are 2 generators and 46 relators of total length 3773
    #I  there are 2 generators and 46 relators of total length 2570
    gap> TzGoGo( P );
    #I  there are 2 generators and 46 relators of total length 2568
    gap> TzGoGo( P );
    gap> # We do not get any more progress without substituting a new
    gap> # generator
    gap> TzSubstitute( P );
    #I  substituting new generator _x28 defined by _x6*_x23^-1
    #I  eliminating _x28 = _x6*_x23^-1
    gap> # GAP cannot substitute a new generator without extending the
    gap> # total length, so we have to explicitly ask for it
    gap> TzPrintPairs( P );
    #I  1.  504  occurrences of  _x6 * _x23^-1
    #I  2.  504  occurrences of  _x6^-1 * _x23
    #I  3.  448  occurrences of  _x6 * _x23
    #I  4.  448  occurrences of  _x6^-1 * _x23^-1
    gap> TzSubstitute( P, 2, 1 );
    #I  substituting new generator _x29 defined by _x6^-1*_x23
    #I  eliminating _x6 = _x23*_x29^-1
    #I  there are 2 generators and 46 relators of total length 2867
    gap> TzGoGo( P );
    #I  there are 2 generators and 45 relators of total length 2417
    #I  there are 2 generators and 45 relators of total length 2122
    gap> TzSubstitute( P, 1, 2 );
    #I  substituting new generator _x30 defined by _x23*_x29^-1
    #I  eliminating _x29 = _x30^-1*_x23
    #I  there are 2 generators and 45 relators of total length 2192
    gap> TzGoGo( P );
    #I  there are 2 generators and 42 relators of total length 1637
    #I  there are 2 generators and 40 relators of total length 1286
    #I  there are 2 generators and 36 relators of total length 807
    #I  there are 2 generators and 32 relators of total length 625
    #I  there are 2 generators and 22 relators of total length 369
    #I  there are 2 generators and 18 relators of total length 213
    #I  there are 2 generators and 13 relators of total length 141
    #I  there are 2 generators and 12 relators of total length 121
    #I  there are 2 generators and 10 relators of total length 101
    gap> TzPrintPairs( P );
    #I  1.  19  occurrences of  _x23 * _x30^-1
    #I  2.  19  occurrences of  _x23^-1 * _x30
    #I  3.  14  occurrences of  _x23 * _x30
    #I  4.  14  occurrences of  _x23^-1 * _x30^-1
    gap> # If we save a copy of the current presentation, then later we
    gap> # will be able to restart the computation from the current state
    gap> P1 := Copy( P );;
    gap> # Just for demonstration, let's make an inconvenient choice
    gap> TzSubstitute( P, 3, 1 );
    #I  substituting new generator _x31 defined by _x23*_x30
    #I  eliminating _x23 = _x31*_x30^-1
    #I  there are 2 generators and 10 relators of total length 122
    gap> TzGoGo( P );
    #I  there are 2 generators and 9 relators of total length 105
    gap> # The presentation is worse than the one we have saved, so let's
    gap> # restart from that one again
    gap> P := Copy( P1 );
    &lt;&lt; presentation with 2 gens and 10 rels of total length 101 >>
    gap> TzSubstitute( P, 2, 1);
    #I  substituting new generator _x31 defined by _x23^-1*_x30
    #I  eliminating _x23 = _x30*_x31^-1
    #I  there are 2 generators and 10 relators of total length 107
    gap> TzGoGo( P );
    #I  there are 2 generators and 9 relators of total length 84
    #I  there are 2 generators and 8 relators of total length 75
    gap> TzSubstitute( P, 2, 1);
    #I  substituting new generator _x32 defined by _x30^-1*_x31
    #I  eliminating _x30 = _x31*_x32^-1
    #I  there are 2 generators and 8 relators of total length 71
    gap> TzGoGo( P );
    #I  there are 2 generators and 7 relators of total length 56
    #I  there are 2 generators and 5 relators of total length 36
    gap> TzPrintRelators( P );
    #I  1. _x32^5
    #I  2. _x31^5
    #I  3. _x31^-1*_x32^-1*_x31^-1*_x32^-1*_x31^-1*_x32^-1
    #I  4. _x31*_x32*_x31^-1*_x32*_x31^-1*_x32*_x31*_x32^-2
    #I  5. _x31^-1*_x32^2*_x31*_x32^-1*_x31^2*_x32^-1*_x31*_x32^2 </pre>
<P>
As shown in the preceding example, you can use the <code>Copy</code> command to save
a copy of a presentation record and to restart from it  again if you want
to try an alternative strategy.  However, this copy will be lost as  soon
as you finish your current <strong>GAP3</strong> session.  If you use the <code>Save</code> command
(see <a href="chap023.htm#SECT008">Presentation Records</a>) instead,  then you get a permanent copy on a
file which you can read in again in a later session.
<P>
<P>
<code>TzSubstituteCyclicJoins( <var>P</var> )</code>
<A name = "I53"></a>

<P>
<code>TzSubstituteCyclicJoins</code>    performs   Tietze   transformations   on   a
presentation <var>P</var>.  It tries to find pairs of generators <I>a</I> and <I>b</I>, say,
for which among  the  relators (possibly after  inverting  or conjugating
some of them) there are the commutator <I>[a,b]</I> and powers <I>a<sup>m</sup></I> and <I>b<sup>n</sup></I>
with mutually  prime exponents  <I>m</I> and  <I>n</I>.   For each  such  pair,  it
substitutes the product <I>ab</I>  as  a new generator, and then it eliminates
the generators <I>a</I> and <I>b</I>.
<P>
<P>
<code>TzInitGeneratorImages( <var>P</var> )</code>
<A name = "I54"></a>

<P>
Any sequence of Tietze  transformations applied to a presentation  record
<var>P</var>, starting from an ``old'' presentation <I>P<sub>1</sub></I> and  ending up with a
``new''  presentation  <I>P<sub>2</sub></I>, defines an   isomorphism, <I>&phi;</I> say,
between the  groups defined by  <I>P<sub>1</sub></I> and <I>P<sub>2</sub></I>, respectively.  Sometimes
it is desirable to know the images of the old generators or the preimages
of the new generators under <I>&phi;</I>.  The <strong>GAP3</strong> Tietze transformations
functions are able to trace these images.  This is not automatically done
because the involved words may grow to  tremendous length, but it will be
done  if you    explicitly   request for   it  by  calling  the  function
<code>TzInitGeneratorImages</code>.
<P>
<code>TzInitGeneratorImages</code> initializes three components of <var>P</var>:
<P>
<DL><DT><code><var>P</var>.oldGenerators</code>:<DD> <BR> 
        This is the  list of the old generators.  It is initialized  by a
        copy of the current list of generators, <code><var>P</var>.generators</code>.
</DL><P>
<DL><DT><code><var>P</var>.imagesOldGens</code>:<DD> <BR> 
        This  will be  the list  of the images  of the  old generators as
        Tietze words in the new generators. For each generator <I>g<sub>i</sub></I>, the
        <I>i</I>-th entry of the list is initialized by the Tietze word <code>[i]</code>.
</DL><P>
<DL><DT><code><var>P</var>.preImagesNewGens</code>:<DD> <BR> 
        This will be the  list of the  preimages of the new generators as
        Tietze words in the old generators. For each generator <I>g<sub>i</sub></I>, the
        <I>i</I>-th entry of the list is initialized by the Tietze word <code>[i]</code>.
</DL><P>
This means, that  <I>P<sub>1</sub></I> is  defined  to be the  current presentation  and
<I>&phi;</I> to be the identity on <I>P<sub>1</sub></I>. From now  on, the existence of the
component  <code><var>P</var>.imagesOldGens</code>   will  cause the  Tietze  transformations
functions to update  the lists of images and  preimages whenever they are
called.
<P>
You can  reinitialize the tracing of  the  generator images at  any later
state by just calling the function <code>TzInitGeneratorImages</code> again. For, if
the   above components do   already exist when <code>TzInitGeneratorImages</code> is
being called, they will first be deleted and then initialized again.
<P>
There    are  a few restrictions    concerning  the tracing  of generator
images:
<P>
In   general,    the    functions    <code>AddGenerator</code>,  <code>AddRelator</code>,   and
<code>RemoveRelator</code>  described  in section  <a href="chap023.htm#SECT009">Changing  Presentations</a>  do not
perform Tietze transformations as they may change the isomorphism type of
the presentation.  Therefore, if any of them is called for a presentation
in which generator images and preimages are  being traced, it will delete
these lists.
<P>
If  the function <code>DecodeTree</code>   is called  for   a presentation in  which
generator images and preimages are being traced,  it will not continue to
trace them. Instead, it will delete  the corresponding lists, then decode
the   tree, and  finally  reinitialize   the tracing   for  the resulting
presentation.
<P>
As  stated in the description of  the function  <code>Save</code> (see <a href="chap023.htm#SECT008">Presentation
Records</a>), the  function  <code>Read</code>  cannot  properly recover   a  component
involving abstract generators different from  the current generators when
it reads a presentation which has been written to a  file by the function
<code>Save</code>.   Therefore  the function   <code>Save</code>   will  ignore the   component
<code><var>P</var>.oldGenerators</code> if  you call it  to write  the  presentation <var>P</var> to a
file. Hence this component will be lost if you read the presentation back
from that  file,  and  it  will  be left  to  your own  responsibility to
remember what the old generators have been.
<P>
<P>
<code>TzPrintGeneratorImages( <var>P</var> )</code>
<A name = "I55"></a>

<P>
If <var>P</var> is   a presentation in  which  generator images and preimages  are
being  traced  through  all  Tietze  transformations   applied  to <var>P</var>,
<code>TzPrintGeneratorImages</code> prints the preimages  of the current  generators
as  Tietze   words in the   old  generators  and  the  images of  the old
generators as Tietze words in the current generators.
<P>
<pre>    gap> G := PerfectGroup( 960, 1 );
    PerfectGroup(960,1)
    gap> P := PresentationFpGroup( G );
    &lt;&lt; presentation with 6 gens and 21 rels of total length 84 >>
    gap> TzInitGeneratorImages( P );
    gap> TzGo( P );
    #I  there are 3 generators and 11 relators of total length 96
    #I  there are 3 generators and 10 relators of total length 81
    gap> TzPrintGeneratorImages( P );
    #I  preimages of current generators as Tietze words in the old ones:
    #I  1. [ 1 ]
    #I  2. [ 2 ]
    #I  3. [ 4 ]
    #I  images of old generators as Tietze words in the current ones:
    #I  1. [ 1 ]
    #I  2. [ 2 ]
    #I  3. [ 1, -2, 1, 3, 1, 2, 1 ]
    #I  4. [ 3 ]
    #I  5. [ -2, 1, 3, 1, 2 ]
    #I  6. [ 1, 3, 1 ]
    gap> # Print the old generators as words in the new generators.
    gap> gens := P.generators;
    [ a, b, t ]
    gap> oldgens := P.oldGenerators;
    [ a, b, s, t, u, v ]
    gap> for i in [ 1 .. Length( oldgens ) ] do
    >  Print( oldgens[i], " = ",
    >  AbstractWordTietzeWord( P.imagesOldGens[i], gens ), "\n" );
    >  od;
    a = a
    b = b
    s = a*b^-1*a*t*a*b*a
    t = t
    u = b^-1*a*t*a*b
    v = a*t*a </pre>
<P>
<P>
<code>TzPrintLengths( <var>P</var> )</code>
<A name = "I56"></a>

<P>
<code>TzPrintLengths</code> prints  the list of  the lengths  of all relators of the
given presentation <var>P</var>.
<P>
<P>
<code>TzPrintPairs( <var>P</var> )</code>
<A name = "I57"></a>
 <BR> 
<code>TzPrintPairs( <var>P</var>, <var>n</var> )</code>
<P>
<code>TzPrintPairs</code> determines  in  the  given presentation  <var>P</var>  the <var>n</var> most
frequently occurring squarefree relator subwords  of length  2 and prints
them together with their numbers of  occurrences.   The  default value of
<var>n</var> is 10.  A value <I>n = 0</I> is interpreted as <code>infinity</code>.
<P>
This  list is a  useful piece of information  in the context of using the
<code>TzSubstitute</code> command described above.
<P>
<P>
<code>TzPrintOptions( <var>P</var> )</code>
<A name = "I58"></a>

<P>
Several  of  the  Tietze  transformation  commands  described  above  are
controlled by  certain parameters, the <strong>Tietze options</strong>, which often have
a  tremendous  influence on their performance and  results.   However, in
each application of the  commands, an appropriate choice of these  option
parameters  will depend on the concrete presentation under investigation.
Therefore we have implemented the Tietze options in such  a way that they
are associated to the presentation records:  Each  presentation record
keeps its own  set  of  Tietze option parameters in the form of  ordinary
record components.   In  particular, you may alter the  value  of any  of
these  Tietze  options by  just assigning  a  new value to the respective
record component.
<A name = "I59"></a>

<P>
<code>TzPrintOptions</code>  prints the Tietze  option components of  the  specified
presentation <var>P</var>.
<P>
<P>
The Tietze options have the following meaning.
<P>
<DL><DT><code>protected</code>:<DD> <BR> 
        The first  <code><var>P</var>.protected</code>  generators in a presentation  <var>P</var> are
        protected from  being  eliminated  by the  Tietze transformations
        functions.   There  are  only   two  exceptions:   The  option
        <code><var>P</var>.protected</code>     is     ignored      by     the      functions
        <code>TzEliminate(<var>P</var>,<var>gen</var>)</code> and  <code>TzSubstitute(<var>P</var>,<var>n</var>,<var>eliminate</var>)</code>
        because they explicitly specify  the generator  to be eliminated.
        The default value of <code>protected</code> is 0.
</DL><P>
<DL><DT><code>eliminationsLimit</code>:<DD> <BR> 
        Whenever the elimination  phase of  the <code>TzGo</code> command is entered
        for  a  presentation  <var>P</var>,   then  it   will  eliminate  at  most
        <code><var>P</var>.eliminationsLimit</code> generators (except for further ones which
        have  turned  out  to   be  trivial).  Hence  you  may  use   the
        <code>eliminationsLimit</code> parameter as a break criterion for the <code>TzGo</code>
        command.  Note, however, that it  is ignored by the <code>TzEliminate</code>
        command. The default value of <code>eliminationsLimit</code> is 100.
</DL><P>
<DL><DT><code>expandLimit</code>:<DD> <BR> 
        Whenever the routine for eliminating  more than  1  generators is
        called for a presentation <var>P</var> by the <code>TzEliminate</code> command or the
        elimination phase of the <code>TzGo</code> command, then it saves the  given
        total  length of the  relators,  and  subsequently it checks  the
        current total length against  its value before  each elimination.
        If the total length  has increased to more than <code><var>P</var>.expandLimit</code>
        per cent of its original value, then the  routine returns instead
        of   eliminating  another  generator.   Hence  you  may  use  the
        <code>expandLimit</code> parameter  as a  break  criterion  for  the  <code>TzGo</code>
        command. The default value of <code>expandLimit</code> is 150.
</DL><P>
<DL><DT><code>generatorsLimit</code>:<DD> <BR> 
        Whenever the elimination  phase of the  <code>TzGo</code> command is entered
        for  a  presentation  <var>P</var>  with  <I>n</I>  generators,  then  it  will
        eliminate at most <I>n - </I><code><var>P</var>.generatorsLimit</code>  generators (except
        for generators which turn out to  be trivial).  Hence you may use
        the  <code>generatorsLimit</code>  parameter  as  a break  criterion for the
        <code>TzGo</code> command. The default value of <code>generatorsLimit</code> is 0.
</DL><P>
<DL><DT><code>lengthLimit</code>:<DD> <BR> 
        The  Tietze  transformation  commands  will  never  eliminate   a
        generator of a presentation  <var>P</var>,  if  they  cannot  exclude  the
        possibility  that  the  resulting total  length  of  the relators
        exceeds  the value of  <code><var>P</var>.lengthLimit</code>.  The default  value  of
        <code>lengthLimit</code> is <code>infinity</code>.
</DL><P>
<DL><DT><code>loopLimit</code>:<DD> <BR> 
        Whenever the <code>TzGo</code>  command  is called  for a  presentation <var>P</var>,
        then  it  will  loop  over  at  most <code><var>P</var>.loopLimit</code> of its basic
        steps.  Hence you  may  use the  <code>loopLimit</code> parameter as a break
        criterion  for   the  <code>TzGo</code>   command.  The   default  value  of
        <code>loopLimit</code> is <code>infinity</code>.
</DL><P>
<DL><DT><code>printLevel</code>:<DD> <BR> 
        Whenever   Tietze  transformation  commands  are  called  for   a
        presentation <var>P</var> with  <code><var>P</var>.printLevel</code>  <I>=  0</I>,  they  will  not
        provide any output except for error messages. If <code><var>P</var>.printLevel</code>
        <I>=  1</I>, they will display some  reasonable amount of output which
        allows you to watch the progress of the computation and to decide
        about your next commands. In the case <code><var>P</var>.printLevel</code> <I>= 2</I>, you
        will  get  a much more  generous amount  of output.  Finally,  if
        <code><var>P</var>.printLevel</code> <I>= 3</I>, various messages on internal details will
        be added. The default value of <code>printLevel</code> is 1.
</DL><P>
<DL><DT><code>saveLimit</code>:<DD> <BR> 
        Whenever the  <code>TzSearch</code> command has finished its main loop  over
        all relators of a presentation <var>P</var>, then it checks whether during
        this loop the total length of the relators has been reduced by at
        least  <code><var>P</var>.saveLimit</code>  per  cent.  If  this is  the  case,  then
        <code>TzSearch</code> repeats its procedure instead of returning.  Hence you
        may use the <code>saveLimit</code> parameter  as a  break  criterion for the
        <code>TzSearch</code> command  and, in  particular,  for the search phase of
        the <code>TzGo</code> command. The default value of <code>saveLimit</code> is 10.
</DL><P>
<DL><DT><code>searchSimultaneous</code>:<DD> <BR> 
        Whenever the <code>TzSearch</code>  or the <code>TzSearchEqual</code> command is called
        for  a  presentation  <var>P</var>,  then it is  allowed  to handle  up to
        <code><var>P</var>.searchSimultaneously</code> short relators simultaneously (see for
        the description of the <code>TzSearch</code> command for more details).  The
        choice of this parameter may heavily influence the performance as
        well  as  the result of the  <code>TzSearch</code>  and  the <code>TzSearchEqual</code>
        commands and  hence also  of  the  search  phase  of  the  <code>TzGo</code>
        command. The default value of <code>searchSimultaneous</code> is 20.
</DL><P>
\vspace5mm As soon as  a presentation record has been defined, you  may
alter any of its Tietze option parameters at any time by just assigning a
new value to the respective component.
<P>
To demonstrate  the  effect of the <code>eliminationsLimit</code> parameter, we will
give  an example in which we handle a subgroup of index 240 in a group of
order 40320  given by  a presentation  due  to B. H.  Neumann.   First we
construct a presentation of the subgroup, and  then  we  apply  to it the
<code>TzGoGo</code>   command  for  different   values  of  the  <code>eliminationsLimit</code>
parameter (including the default value 100).  In  fact, we also alter the
<code>printLevel</code> parameter, but this  is only done in order to suppress  most
of  the output.   In all  cases the  resulting  presentations  cannot  be
improved any more by applying the <code>TzGoGo</code>  command again, i.e., they are
the best results which we can get without substituting new generators.
<P>
<pre>    gap> F3 := FreeGroup( "a", "b", "c" );;
    gap> G := F3 / [ F3.1^3, F3.2^3, F3.3^3, (F3.1*F3.2)^5,
    >       (F3.1^-1*F3.2)^5, (F3.1*F3.3)^4, (F3.1*F3.3^-1)^4,
    >       F3.1*F3.2^-1*F3.1*F3.2*F3.3^-1*F3.1*F3.3*F3.1*F3.3^-1,
    >       (F3.2*F3.3)^3, (F3.2^-1*F3.3)^4 ];;
    gap> a := G.1;;  b := G.2;;  c := G.3;;
    gap> H := Subgroup( G, [ a, c ] );;
    gap> P := PresentationSubgroup( G, H );
    &lt;&lt; presentation with 224 gens and 593 rels of total length 2769 >>
    gap> for i in [ 28, 29, 30, 94, 100 ] do
    >       Pi := Copy( P );
    >       Pi.eliminationsLimit := i;
    >       Print( "#I  eliminationsLimit set to ", i, "\n" );
    >       Pi.printLevel := 0;
    >       TzGoGo( Pi );
    >       TzPrintStatus( Pi );
    >    od;
    #I  eliminationsLimit set to 28
    #I  there are 2 generators and 95 relators of total length 10817
    #I  eliminationsLimit set to 29
    #I  there are 2 generators and 5 relators of total length 35
    #I  eliminationsLimit set to 30
    #I  there are 3 generators and 98 relators of total length 2928
    #I  eliminationsLimit set to 94
    #I  there are 4 generators and 78 relators of total length 1667
    #I  eliminationsLimit set to 100
    #I  there are 3 generators and 90 relators of total length 3289 </pre>
<P>
Similarly,  we  demonstrate the influence of the <code>saveLimit</code> parameter by
just continuing the  preceding example  for some  different values of the
<code>saveLimit</code> parameter  (including  its  default  value  10),  but without
changing the <code>eliminationsLimit</code>  parameter which keeps its default value
100.
<P>
<pre>    gap> for i in [ 9, 10, 11, 12, 15 ] do
    >       Pi := Copy( P );
    >       Pi.saveLimit := i;
    >       Print( "#I  saveLimit set to ", i, "\n" );
    >       Pi.printLevel := 0;
    >       TzGoGo( Pi );
    >       TzPrintStatus( Pi );
    >    od;
    #I  saveLimit set to 9
    #I  there are 3 generators and 97 relators of total length 5545
    #I  saveLimit set to 10
    #I  there are 3 generators and 90 relators of total length 3289
    #I  saveLimit set to 11
    #I  there are 3 generators and 103 relators of total length 3936
    #I  saveLimit set to 12
    #I  there are 2 generators and 4 relators of total length 21
    #I  saveLimit set to 15
    #I  there are 3 generators and 143 relators of total length 18326 </pre>
<P><A NAME="SECT014"><h2>23.14 DecodeTree</h2></a>
<P><P><P>
<code>DecodeTree( <var>P</var> )</code>
<A name = "I60"></a>

<P>
<code>DecodeTree</code> eliminates the secondary generators  from a presentation <var>P</var>
constructed by  the Modified Todd-Coxeter (see <code>PresentationSubgroupMtc</code>)
or      the      Reduced     Reidemeister-Schreier     procedure     (see
<code>PresentationSubgroupRrs</code>, <code>PresentationNormalClosureRrs</code>).  It is called
automatically by the <code>PresentationSubgroupMtc</code>  command where it  reduces
<var>P</var> to a presentation on the given subgroup generators.
<A name = "I61"></a>

<P>
In  order to explain  the effect of this command  we need to insert a few
remarks  on   the subgroup presentation  commands    described in section
<a href="chap023.htm#SECT011">Subgroup Presentations</a>.   All these commands  have  the common property
that in  the process of constructing  a presentation for a given subgroup
<var>H</var>  of a  finitely presented group   <var>G</var> they first   build up a  highly
redundant  list of  generators of <var>H</var>  which  consists of  an (in general
small)  list  of ``primary'' generators,  followed  by  an (in general
large)  list   of ``secondary'' generators,     and  then construct  a
presentation <I>P<sub>0</sub></I>, say, <strong>on a sublist of  these generators</strong> by rewriting
the defining relators of <var>G</var>.  This sublist contains all primary, but, at
least in general, by far not all secondary generators.
<A name = "I62"></a>

<P>
The role of the primary generators depends on  the concrete choice of the
subgroup presentation command.  If  the  Modified  Todd-Coxeter method is
used, they are just the given generators of <var>H</var>, whereas  in  the case of
the Reduced Reidemeister-Schreier algorithm they are  constructed  by the
program.
<P>
Each of  the secondary generators is defined  by a  word of length two in
the preceding  generators and their inverses.  By historical reasons, the
list  of these  definitions is  called  the  <strong>subgroup  generators  tree</strong>
though in fact it is not a tree but rather a kind of bush.
<A name = "I63"></a>

<P>
Now we have to distinguish two cases.  If  <I>P<sub>0</sub></I> has been constructed  by
the Reduced Reidemeister-Schreier routines, it is a presentation of
<var>H</var>.   However, if  the Modified Todd-Coxeter  routines  have  been  used
instead, then  the relators in <I>P<sub>0</sub></I> are valid relators  of <var>H</var>, but they
do not necessarily  define <var>H</var>.  We handle these cases in turn,  starting
with the latter one.
<P>
Also in the  case  of the Modified Todd-Coxeter method,  we could  easily
extend  <I>P<sub>0</sub></I> to a presentation of <var>H</var> by adding to it  all the secondary
generators which are not yet contained in it and all the definitions from
the generators tree as additional generators and relators.  Then we could
recursively eliminate all secondary generators by Tietze  transformations
using the  new relators.  However,  this  procedure  turns out to  be too
inefficient to be of interest.
<P>
Instead, we  use the  so called <strong>tree decoding</strong> procedure which  has been
developed  in  St. Andrews by  David  G. Arrell,  Sanjiv  Manrai,  Edmund
F. Robertson, and Michael F. Worboys  (see <A href="biblio.htm#AMW82"><cite>AMW82</cite></a>,  <A href="biblio.htm#AR84"><cite>AR84</cite></a>).
It proceeds as follows.
<P>
Starting from  <I>P = P<sub>0</sub></I>, it  runs through a  number of steps  in each of
which it  eliminates the current ``last''  generator  (with respect to
the list of all primary and secondary generators).  If the last generator
<var>g</var>, say, is a primary generator, then the procedure finishes.  Otherwise
it checks  whether there is a relator  in the current  presentation which
can be used to substitute <var>g</var> by a Tietze transformation.  If so, this is
done.  Otherwise, and only then, the  tree definition of  <var>g</var> is added to
<var>P</var> as  a  new relator,  and  the generators involved   are added as  new
generators if they have not yet been contained in <var>P</var>.  Subsequently, <var>g</var>
is eliminated.
<P>
Note that the extension of <var>P</var> by  one or two new  generators is <strong>not</strong>  a
Tietze  transformation.  In general, it will change the  isomorphism type
of the group  defined by  <var>P</var>.  However,  it is a remarkable  property of
this  procedure, that  at  the  end,  i.e.,  as  soon  as  all  secondary
generators have been eliminated, it  provides a  presentation  <I>P = P<sub>1</sub></I>,
say, which defines  a  group  isomorphic to <var>H</var>.   In  fact,  it is  this
presentation  which is returned by  the <code>DecodeTree</code> command and hence by
the <code>PresentationSubgroupMtc</code> command.
<P>
If, in the other case, the presentation <I>P<sub>0</sub></I> has been constructed by the
Reduced   Reidemeister-Schreier   algorithm,  then  <I>P<sub>0</sub></I>   itself  is  a
presentation  of <var>H</var>, and the corresponding subgroup presentation command
(<code>PresentationSubgroupRrs</code>   or    <code>PresentationNormalClosureRrs</code>)   just
returns <I>P<sub>0</sub></I>.
<P>
As  mentioned in section  <a href="chap023.htm#SECT011">Subgroup Presentations</a>, we  recommend further
simplifying this  presentation  before using it.  The standard  way to do
this is to start from <I>P<sub>0</sub></I> and to apply suitable Tietze transformations,
e.g.,  by calling the <code>TzGo</code> or  <code>TzGoGo</code> commands.  This is probably the
most efficient approach, but  you will end up with a presentation on some
unpredictable set of generators.   As an alternative, <strong>GAP3</strong>  offers  you
the  <code>DecodeTree</code> command  which you can use to  eliminate all  secondary
generators (provided that there are no space or time problems).  For this
purpose,  the  subgroup presentation  commands  do  not only  return  the
resulting  presentation, but also the tree (together with some associated
lists)  as  a  kind  of  side  result in  a component  <code><var>P</var>.tree</code> of  the
resulting presentation record <var>P</var>.
<P>
Note,  however, that  the tree decoding  routines will not work correctly
any  more  on  a presentation  from which  generators have  already  been
eliminated  by  Tietze transformations.  Therefore, to prevent  you  from
getting wrong  results by calling  the  <code>DecodeTree</code>  command in  such  a
situation, <strong>GAP3</strong>  will automatically remove the subgroup generators tree
from  a  presentation  record  as  soon  as  one  of  the  generators  is
substituted by a Tietze transformation.
<P>
Nevertheless,  a certain misuse of  the command is still possible, and we
want to explicitly warn you from this.   The reason  is  that the  Tietze
option parameters described in  section <a href="chap023.htm#SECT013">Tietze Transformations</a> apply to
the <code>DecodeTree</code> command as well.  Hence, in case of inadequate values of
these  parameters,  it may  happen  that the  <code>DecodeTree</code> routine  stops
before all  the secondary generators  have vanished.  In this case <strong>GAP3</strong>
will  display  an  appropriate  warning.   Then  you  should  change  the
respective   parameters   and  continue  the  process   by  calling   the
<code>DecodeTree</code>  command  again.   Otherwise,  if  you  would  apply  Tietze
transformations,  it  might  happen  because  of the convention described
above that  the  tree  is  removed  and  that you end  up  with  a  wrong
presentation.
<P>
After  a successful run of  the <code>DecodeTree</code> command  it is convenient to
further   simplify  the   resulting   presentation  by  suitable   Tietze
transformations.
<P>
As an example of an explicit call of the <code>DecodeTree</code> command we  compute
two presentations  of  a  subgroup  of  order  <I>384</I>  in a group of order
<I>6912</I>.   In  both  cases  we   use   the  Reduced  Reidemeister-Schreier
algorithm, but  in the first run we just apply the Tietze transformations
offered by the <code>TzGoGo</code> command with  its default  parameters, whereas in
the second run we call the <code>DecodeTree</code> command before.
<P>
<pre>    gap> F2 := FreeGroup( "a", "b" );;
    gap> G := F2 / [ F2.1*F2.2^2*F2.1^-1*F2.2^-1*F2.1^3*F2.2^-1,
    >                F2.2*F2.1^2*F2.2^-1*F2.1^-1*F2.2^3*F2.1^-1 ];;
    gap> a := G.1;;  b := G.2;;
    gap> H := Subgroup( G, [ Comm(a^-1,b^-1), Comm(a^-1,b), Comm(a,b) ] );;
    gap> #
    gap> # We use the Reduced Reidemeister Schreier method and default
    gap> # Tietze transformations to get a presentation for H.
    gap> P := PresentationSubgroupRrs( G, H );
    &lt;&lt; presentation with 18 gens and 35 rels of total length 169 >>
    gap> TzGoGo( P );
    #I  there are 3 generators and 20 relators of total length 488
    #I  there are 3 generators and 20 relators of total length 466
    gap> # We end up with 20 relators of total length 466.
    gap> #
    gap> # Now we repeat the procedure, but we call the tree decoding
    gap> # algorithm before doing the Tietze transformations.
    gap> P := PresentationSubgroupRrs( G, H );
    &lt;&lt; presentation with 18 gens and 35 rels of total length 169 >>
    gap> DecodeTree( P );
    #I  there are 9 generators and 26 relators of total length 185
    #I  there are 6 generators and 23 relators of total length 213
    #I  there are 3 generators and 20 relators of total length 252
    #I  there are 3 generators and 20 relators of total length 244
    gap> TzGoGo( P );
    #I  there are 3 generators and 19 relators of total length 168
    #I  there are 3 generators and 17 relators of total length 138
    #I  there are 3 generators and 15 relators of total length 114
    #I  there are 3 generators and 13 relators of total length 96
    #I  there are 3 generators and 12 relators of total length 84
    gap> # This time we end up with a shorter presentation. </pre>
<P>
As  an  example  of   an   implicit   call   of   the   command  via  the
<code>PresentationSubgroupMtc</code> command  we handle a subgroup of index 240 in a
group of order 40320 given by a presentation due to B. H. Neumann.
<P>
<pre>    gap> F3 := FreeGroup( "a", "b", "c" );;
    gap> a := F3.1;;  b := F3.2;;  c := F3.3;;
    gap> G := F3 / [ a^3, b^3, c^3, (a*b)^5, (a^-1*b)^5, (a*c)^4,
    >     (a*c^-1)^4, a*b^-1*a*b*c^-1*a*c*a*c^-1, (b*c)^3, (b^-1*c)^4 ];;
    gap> a := G.1;;  b := G.2;;  c := G.3;;
    gap> H := Subgroup( G, [ a, c ] );;
    gap> InfoFpGroup1 := Print;;
    gap> P := PresentationSubgroupMtc( G, H );;
    #I  index = 240  total = 4737  max = 4507
    #I  MTC defined 2 primary and 4446 secondary subgroup generators
    #I  there are 246 generators and 617 relators of total length 2893
    #I  calling DecodeTree
    #I  there are 115 generators and 382 relators of total length 1837
    #I  there are 69 generators and 298 relators of total length 1785
    #I  there are 44 generators and 238 relators of total length 1767
    #I  there are 35 generators and 201 relators of total length 2030
    #I  there are 26 generators and 177 relators of total length 2084
    #I  there are 23 generators and 167 relators of total length 2665
    #I  there are 20 generators and 158 relators of total length 2848
    #I  there are 20 generators and 148 relators of total length 3609
    #I  there are 21 generators and 148 relators of total length 5170
    #I  there are 24 generators and 148 relators of total length 7545
    #I  there are 27 generators and 146 relators of total length 11477
    #I  there are 32 generators and 146 relators of total length 18567
    #I  there are 36 generators and 146 relators of total length 25440
    #I  there are 39 generators and 146 relators of total length 38070
    #I  there are 43 generators and 146 relators of total length 54000
    #I  there are 41 generators and 143 relators of total length 64970
    #I  there are 8 generators and 129 relators of total length 20031
    #I  there are 7 generators and 125 relators of total length 27614
    #I  there are 4 generators and 113 relators of total length 36647
    #I  there are 3 generators and 108 relators of total length 44128
    #I  there are 2 generators and 103 relators of total length 35394
    #I  there are 2 generators and 102 relators of total length 34380
    gap> TzGoGo( P );
    #I  there are 2 generators and 101 relators of total length 19076
    #I  there are 2 generators and 84 relators of total length 6552
    #I  there are 2 generators and 38 relators of total length 1344
    #I  there are 2 generators and 9 relators of total length 94
    #I  there are 2 generators and 8 relators of total length 86
    gap> TzPrintGenerators( P );
    #I  1.  _x1   43 occurrences
    #I  2.  _x2   43 occurrences </pre>
<P><a href ="chap022.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap024.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
<html><head><title>GAP3 Manual: 42 Modules</title></head>
<body bgcolor="ffffff">
<h1>42 Modules</h1>
<P><P><P>
This chapter describes the data structures and functions for modules in
<strong>GAP3</strong>.
<P>
After the introduction of the data structures (see <a href="chap042.htm#SECT001">More about Modules</a>,
<a href="chap042.htm#SECT002">Row Modules</a>, <a href="chap042.htm#SECT003">Free Modules</a>) the functions for constructing modules
and submodules (see <a href="chap042.htm#SECT004">Module</a>, <a href="chap042.htm#SECT005">Submodule</a>, <a href="chap042.htm#SECT006">AsModule</a>, <a href="chap042.htm#SECT007">AsSubmodule</a>,
<a href="chap042.htm#SECT008">AsSpace for Modules</a>) and testing for modules (see <a href="chap042.htm#SECT009">IsModule</a>,
<a href="chap042.htm#SECT010">IsFreeModule</a>) are described.
<P>
The next sections describe operations and functions for modules (see
<a href="chap042.htm#SECT011">Operations for Row Modules</a>, <a href="chap042.htm#SECT012">Functions for Row Modules</a>, <a href="chap042.htm#SECT013">StandardBasis
for Row Modules</a>, <a href="chap042.htm#SECT014">IsEquivalent for Row Modules</a>, <a href="chap042.htm#SECT016">FixedSubmodule</a>).
<P>
The next section describes available module homomorphisms.  At the moment
only operation homomorphisms are supported (see <a href="chap042.htm#SECT017">Module Homomorphisms</a>).
<P>
The last sections describe the implementation of the data structures (see
<a href="chap042.htm#SECT018">Row Module Records</a>, <a href="chap042.htm#SECT019">Module Homomorphism Records</a>).
<P>
<P>
<P>
Many examples in this chapter use the natural permutation module for
the symmetric group <I>S<sub>3</sub></I>.  If you want to run the examples you must first
define this module, as is done using the following commands.
<P>
<pre>    gap> mat1:= PermutationMat( (1,2,3), 3, GF(2) );;
    gap> mat2:= PermutationMat(   (1,2), 3, GF(2) );;
    gap> a:= UnitalAlgebra( GF(2), [ mat1, mat2 ] );; a.name:= "a";;
    gap> nat:= NaturalModule( a );;
    gap> nat.name:= "nat";; </pre>
<P>
<P>
<P>
There is no possibility to compute the lattice of submodules with the
implementations in <strong>GAP3</strong>.  However, it is possible to use the <strong>MeatAxe</strong>
share library (see chapter <a href="chap069.htm">The MeatAxe</a>) to compute the lattice, and then
(perhaps) to carry back interesting parts to <strong>GAP3</strong> format using <a href="chap069.htm#SECT002">GapObject</a>
<code>GapObject</code>.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap042.htm#SECT001">More about Modules</a>
<LI> <A HREF="chap042.htm#SECT002">Row Modules</a>
<LI> <A HREF="chap042.htm#SECT003">Free Modules</a>
<LI> <A HREF="chap042.htm#SECT004">Module</a>
<LI> <A HREF="chap042.htm#SECT005">Submodule</a>
<LI> <A HREF="chap042.htm#SECT006">AsModule</a>
<LI> <A HREF="chap042.htm#SECT007">AsSubmodule</a>
<LI> <A HREF="chap042.htm#SECT008">AsSpace for Modules</a>
<LI> <A HREF="chap042.htm#SECT009">IsModule</a>
<LI> <A HREF="chap042.htm#SECT010">IsFreeModule</a>
<LI> <A HREF="chap042.htm#SECT011">Operations for Row Modules</a>
<LI> <A HREF="chap042.htm#SECT012">Functions for Row Modules</a>
<LI> <A HREF="chap042.htm#SECT013">StandardBasis for Row Modules</a>
<LI> <A HREF="chap042.htm#SECT014">IsEquivalent for Row Modules</a>
<LI> <A HREF="chap042.htm#SECT015">IsIrreducible for Row Modules</a>
<LI> <A HREF="chap042.htm#SECT016">FixedSubmodule</a>
<LI> <A HREF="chap042.htm#SECT017">Module Homomorphisms</a>
<LI> <A HREF="chap042.htm#SECT018">Row Module Records</a>
<LI> <A HREF="chap042.htm#SECT019">Module Homomorphism Records</a>
</ol>
<A NAME="SECT001"><h2>42.1 More about Modules</h2></a>
<P><P><P>
Let <I>R</I> be a ring.  An <I>R</I>-<strong>module</strong> (or, more exactly, an <I>R</I>-right module)
is an additive abelian group on that <I>R</I> acts from the right.
<P>
A module is of interest mainly as operation domain of an algebra (see chapter
<a href="chap039.htm">Algebras</a>).  Thus it is the natural place to store information about the
operation of the algebra, for example whether it is irreducible.  But since
a module is a domain it has also properties of its own, independent of the
algebra.
<P>
According to the different types of algebras in <strong>GAP3</strong>, namely matrix
algebras and finitely presented algebras, at the moment two types of modules
are supported in <strong>GAP3</strong>, namely <strong>row modules</strong> and their quotients for
matrix algebras and <strong>free modules</strong> and their submodules and quotients for
finitely presented algebras.  See <a href="chap042.htm#SECT002">Row Modules</a> and <a href="chap042.htm#SECT003">Free Modules</a> for more
information.
<P>
For modules, the same concept of parent and substructures holds as for row
spaces.  That is, a module is stored either as a submodule of a module, or
it is not (see <a href="chap042.htm#SECT005">Submodule</a>, <a href="chap042.htm#SECT007">AsSubmodule</a> for the details).
<P>
Also the concept of factor structures and cosets is the same as that for
row spaces (see <a href="chap033.htm#SECT004">Quotient Spaces</a>, <a href="chap033.htm#SECT003">Row Space Cosets</a>), especially the
questions about a factor module is mainly delegated to the numerator and the
denominator, see also <a href="chap042.htm#SECT011">Operations for Row Modules</a>.
<P><A NAME="SECT002"><h2>42.2 Row Modules</h2></a>
<P><P><P>
A <strong>row module</strong> for a matrix algebra <I>A</I> is a row space over a field <I>F</I> on
that <I>A</I> acts from the right via matrix multiplication.  All operations, set
theoretic functions and vector space functions for row spaces are applicable
to row modules, and the conventions for row spaces also hold for row modules
(see chapter <a href="chap033.htm">Row Spaces</a>).  For the notion of a standard basis of a module,
see <a href="chap042.htm#SECT013">StandardBasis for Row Modules</a>.
<P>
It should be mentioned, however, that the functions and their results have to
be interpreted in the module context.  For example, <code>Generators</code> returns a
list of module generators not vector space generators (see <a href="chap042.htm#SECT008">AsSpace for
Modules</a>), and <code>Closure</code> or <code>Sum</code> for modules return a module (namely the
smallest module generated by the arguments).
<P>
<strong>Quotient modules</strong> <I>Q = V / W</I> of row modules are quotients of row spaces
<I>V</I>, <I>W</I> that are both (row) modules for the same matrix algebra <I>A</I>.
All operations and functions for quotient spaces are applicable.  
The element of such quotient modules are <strong>module cosets</strong>, in addition to
the operations and functions for row space cosets they can be multiplied
by elements of the acting algebra.
<P><A NAME="SECT003"><h2>42.3 Free Modules</h2></a>
<P><P><P>
A <strong>free module</strong> of dimension <I>n</I> for an algebra <I>A</I> consists of all
<I>n</I>-tuples of elements of <I>A</I>, the action of <I>A</I> is defined as
component-wise multiplication from the right.
Submodules and quotient modules are defined in the obvious way.
<P>
In <strong>GAP3</strong>, elements of free modules are stored as lists of algebra elements.
Thus there is no difference to row modules with respect to addition of
elements, and operation of the algebra.  However, the applicable functions
are different.
<P>
At the moment, only free modules for finitely presented algebras are
supported in <strong>GAP3</strong>, and only very few functions are available for free
modules at the moment.  Especially the set theoretic and vector space
functions do not work for free modules and their submodules and quotients.
<P>
Free modules were only introduced as operation domains of finitely
presented algebras.
<P>
<P>
<P>
<code><var>A</var> ^ <var>n</var></code> 
<P>
returns a free module of dimension <var>n</var> for the algebra <var>A</var>.
<P>
<pre>    gap> a:= FreeAlgebra( Rationals, 2 );; a.name:= "a";;
    gap> a^2;
    Module( a, [ [ a.one, a.zero ], [ a.zero, a.one ] ] ) </pre>
<P><A NAME="SECT004"><h2>42.4 Module</h2></a>
<P><P><P>
<code>Module( <var>R</var>, <var>gens</var> )</code> <BR> 
<code>Module( <var>R</var>, <var>gens</var>, <var>zero</var> )</code> <BR> 
<code>Module( <var>R</var>, <var>gens</var>, "basis" )</code>
<P>
returns the module for the ring <var>R</var> that is generated by the elements in the
list <var>gens</var>.  If <var>gens</var> is empty then the zero element <var>zero</var> of the module
must be entered.
<P>
If the third argument is the string <code>"basis"</code> then the generators <var>gens</var>
are assumed to form a vector space basis.
<P>
<pre>    gap> a:= UnitalAlgebra( GF(2), GL(2,2).generators );;
    gap> a.name:="a";;
    gap> m1:= Module( a, [ a.1[1] ] );
    Module( a, [ [ Z(2)^0, Z(2)^0 ] ] )
    gap> Dimension( m1 );
    2
    gap> Basis( m1 );
    SemiEchelonBasis( Module( a, [ [ Z(2)^0, Z(2)^0 ] ] ), 
    [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ] )
    gap> m2:= Module( a, a.2, "basis" );;
    gap> Basis( m2 );
    Basis( Module( a, [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ] ),
    [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ] )
    gap> a.2;
    [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ]
    gap> m1 = m2;
    true </pre>
<P><A NAME="SECT005"><h2>42.5 Submodule</h2></a>
<P><P><P>
<code>Submodule( <var>M</var>, <var>gens</var> )</code>
<P>
returns the submodule of the parent of the module <var>M</var> that is generated by
the elements in the list <var>gens</var>.
If <var>M</var> is a factor module, <var>gens</var> may also consist of representatives
instead of the cosets themselves.
<P>
<pre>    gap> a:= UnitalAlgebra( GF(2), [ mat1, mat2 ] );; a.name:= "a";;
    gap> nat:= NaturalModule( a );;
    gap> nat.name:= "nat";;
    gap> s:= Submodule( nat, [ [ 1, 1, 1 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] )
    gap> Dimension( s );
    1 </pre>
<P><A NAME="SECT006"><h2>42.6 AsModule</h2></a>
<P><P><P>
<code>AsModule( <var>M</var> )</code>
<P>
returns a module that is isomorphic to the module or submodule <var>M</var>.
<P>
<pre>    gap> s:= Submodule( nat, [ [ 1, 1, 1 ] * Z(2) ] );;
    gap> s2:= AsModule( s );
    Module( a, [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] )
    gap> s = s2;
    true </pre>
<P><A NAME="SECT007"><h2>42.7 AsSubmodule</h2></a>
<P><P><P>
<code>AsSubmodule( <var>M</var>, <var>U</var> )</code>
<P>
returns a submodule of the parent of <var>M</var> that is isomorphic to the module
<var>U</var> which can be a parent module or a submodule with a different parent.
<P>
Note that the same ring must act on <var>M</var> and <var>U</var>.
<P>
<pre>    gap> s2:= Module( a, [ [ 1, 1, 1 ] * Z(2) ] );;
    gap> s:= AsSubmodule( nat, s2 );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] )
    gap> s = s2;
    true </pre>
<P><A NAME="SECT008"><h2>42.8 AsSpace for Modules</h2></a>
<P><P><P>
<code>AsSpace( <var>M</var> )</code>
<P>
returns a (quotient of a) row space that is equal to the (quotient of a) row
module <var>M</var>.
<P>
<pre>    gap> s:= Submodule( nat, [ [ 1, 1, 0 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ] )
    gap> Dimension( s );
    2
    gap> AsSpace( s );
    RowSpace( GF(2),
    [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, Z(2)^0 ] ] )
    gap> q:= nat / s;
    nat / [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ]
    gap> AsSpace( q );
    RowSpace( GF(2),
    [ [ Z(2)^0, 0*Z(2), 0*Z(2) ], [ 0*Z(2), Z(2)^0, 0*Z(2) ],
      [ 0*Z(2), 0*Z(2), Z(2)^0 ] ] ) / 
    [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, Z(2)^0 ] ] </pre>
<P><A NAME="SECT009"><h2>42.9 IsModule</h2></a>
<P><P><P>
<code>IsModule( <var>obj</var> )</code>
<P>
returns <code>true</code> if <var>obj</var>, which may be an object of arbitrary type, is a
module, and <code>false</code> otherwise.
<P>
<pre>    gap> IsModule( nat );
    true
    gap> IsModule( AsSpace( nat ) );
    false </pre>
<P><A NAME="SECT010"><h2>42.10 IsFreeModule</h2></a>
<P><P><P>
<code>IsFreeModule( <var>obj</var> )</code>
<P>
returns <code>true</code> if <var>obj</var>, which may be an object of arbitrary type, is a
free module, and <code>false</code> otherwise.
<P>
<pre>    gap> IsFreeModule( nat );
    false
    gap> IsFreeModule( a^2 );
    true </pre>
<P><A NAME="SECT011"><h2>42.11 Operations for Row Modules</h2></a>
<P><P><P>
Here we mention only those facts about operations that have to be told in
addition to those for row spaces (see <a href="chap033.htm#SECT007">Operations for Row Spaces</a>).
<P>
<strong>Comparisons of Modules</strong>
<P>
<code><var>M1</var> = <var>M2</var></code> <BR> 
<code><var>M1</var> < <var>M2</var></code>
<P>
Equality and ordering of (quotients of) row modules are defined as equality
resp. ordering of the modules as vector spaces (see <a href="chap033.htm#SECT007">Operations for Row
Spaces</a>).
<P>
This means that equal modules may be inequivalent as modules, and even the
acting rings may be different.  For testing equivalence of modules, see
<a href="chap042.htm#SECT014">IsEquivalent for Row Modules</a>.
<P>
<pre>    gap> s:= Submodule( nat, [ [ 1, 1, 1 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] )
    gap> s2:= Submodule( nat, [ [ 1, 1, 0 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ] )
    gap> s = s2;
    false
    gap> s &lt; s2;
    true </pre>
<P>
<strong>Arithmetic Operations of Modules</strong>
<P>
<DL><DT><code><var>M1</var> + <var>M2</var></code> :<DD> <BR> 
    returns the sum of the two modules <var>M1</var> and <var>M2</var>, that is, the smallest
    module containing both <var>M1</var> and <var>M2</var>.  Note that the same ring must act
    on <var>M1</var> and <var>M2</var>.
</DL><P>
<DL><DT><code><var>M1</var> / <var>M2</var></code> :<DD> <BR> 
    returns the factor module of the module <var>M1</var> by its submodule <var>M2</var>.
    Note that the same ring must act on <var>M1</var> and <var>M2</var>.
</DL><P>
<pre>    gap> s1:= Submodule( nat, [ [ 1, 1, 1 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] )
    gap> q:= nat / s1;
    nat / [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ]
    gap> s2:= Submodule( nat, [ [ 1, 1, 0 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ] )
    gap> s3:= s1 + s2;
    Submodule( nat,
    [ [ Z(2)^0, Z(2)^0, Z(2)^0 ], [ 0*Z(2), 0*Z(2), Z(2)^0 ] ] )
    gap> s3 = nat;
    true </pre>
<P>
For forming the sum and quotient of row spaces, see <a href="chap033.htm#SECT007">Operations for Row
Spaces</a>.
<P><A NAME="SECT012"><h2>42.12 Functions for Row Modules</h2></a>
<P><P><P>
As stated in <a href="chap042.htm#SECT002">Row Modules</a>, row modules behave like row spaces with respect
to <strong>set theoretic</strong> and <strong>vector space</strong> functions (see <a href="chap033.htm#SECT008">Functions for Row
Spaces</a>).
<P>
The functions in the following sections use the module structure (see
<a href="chap042.htm#SECT013">StandardBasis for Row Modules</a>, <a href="chap042.htm#SECT014">IsEquivalent for Row Modules</a>,
<a href="chap042.htm#SECT015">IsIrreducible for Row Modules</a>, <a href="chap042.htm#SECT016">FixedSubmodule</a>, <a href="chap042.htm#SECT017">Module Homomorphisms</a>).
<P><A NAME="SECT013"><h2>42.13 StandardBasis for Row Modules</h2></a>
<P><P><P>
<code>StandardBasis( <var>M</var> )</code> <BR> 
<code>StandardBasis( <var>M</var>, <var>seedvectors</var> )</code>
<P>
returns the standard basis of the row module <var>M</var> with respect to the seed
vectors in the list <var>seedvectors</var>.  If no second argument is given the
generators of <var>M</var> are taken.
<P>
The <strong>standard basis</strong> is defined as follows.  Take the first seed vector <I>v</I>,
apply the generators of the ring <I>R</I> acting on <var>M</var> in turn, and if the image
is linearly independent of the basis vectors found up to this time, it is
added to the basis.  When the space becomes stable under the action of <I>R</I>,
proceed with the next seed vector, and so on.
<P>
Note that you do not get a basis of the whole module if all seed vectors
lie in a proper submodule.
<P>
<pre>    gap> s:= Submodule( nat, [ [ 1, 1, 0 ] * Z(2) ] );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ] )
    gap> b:= StandardBasis( s );
    StandardBasis( Submodule( nat, [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ] ) )
    gap> b.vectors;
    [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, Z(2)^0 ] ]
    gap> StandardBasis( s, [ [ 0, 1, 1 ] * Z(2) ] );
    StandardBasis( Submodule( nat, [ [ Z(2)^0, Z(2)^0, 0*Z(2) ] ] ), 
    [ [ 0*Z(2), Z(2)^0, Z(2)^0 ], [ Z(2)^0, 0*Z(2), Z(2)^0 ] ] ) </pre>
<P><A NAME="SECT014"><h2>42.14 IsEquivalent for Row Modules</h2></a>
<P><P><P>
<code>IsEquivalent( <var>M1</var>, <var>M2</var> )</code>
<P>
Let <var>M1</var> and <var>M2</var> be modules acted on by rings <I>R<sub>1</sub></I> and <I>R<sub>2</sub></I>, respectively,
such that mapping the generators of <I>R<sub>1</sub></I> to the generators of <I>R<sub>2</sub></I> defines
a ring homomorphism.  Furthermore let at least one of <var>M1</var>, <var>M2</var> be
irreducible.  Then <code>IsEquivalent( <var>M1</var>, <var>M2</var> )</code> returns <code>true</code> if the actions
on <var>M1</var> and <var>M2</var> are equivalent, and <code>false</code> otherwise.
<P>
<pre>    gap> rand:= RandomInvertableMat( 3, GF(2) );;
    gap> b:= UnitalAlgebra( GF(2), List( a.generators, x -> x^rand ) );;
    gap> m:= NaturalModule( b );;
    gap> IsEquivalent( nat / FixedSubmodule( nat ),
    >                  m / FixedSubmodule( m ) );
    true </pre>
<P><A NAME="SECT015"><h2>42.15 IsIrreducible for Row Modules</h2></a>
<P><P><P>
<code>IsIrreducible( <var>M</var> )</code>
<P>
returns <code>true</code> if the (quotient of a) row module <var>M</var> is irreducible, and
<code>false</code> otherwise.
<P>
<pre>    gap> IsIrreducible( nat );
    false
    gap> IsIrreducible( nat / FixedSubmodule( nat ) );
    true </pre>
<P><A NAME="SECT016"><h2>42.16 FixedSubmodule</h2></a>
<P><P><P>
<code>FixedSubmodule( <var>M</var> )</code>
<P>
returns the submodule of fixed points in the module <var>M</var> under the action of
the generators of <code><var>M</var>.ring</code>.
<P>
<pre>    gap> fix:= FixedSubmodule( nat );
    Submodule( nat, [ [ Z(2)^0, Z(2)^0, Z(2)^0 ] ] )
    gap> Dimension( fix );
    1 </pre>
<P><A NAME="SECT017"><h2>42.17 Module Homomorphisms</h2></a>
<P><P>
<A name = "I0"></a>

<A name = "I1"></a>

<P>
Let <I>M<sub>1</sub></I> and <I>M<sub>2</sub></I> be modules acted on by the rings <I>R<sub>1</sub></I> and <I>R<sub>2</sub></I> (via
exponentiation), and <I>&phi;</I> a ring homomorphism from <I>R<sub>1</sub></I> to <I>R<sub>2</sub></I>.
Any linear map <I>&psi; = &psi;<sub>&phi;</sub></I> from <I>M<sub>1</sub></I> to <I>M<sub>2</sub></I> with the property
that <I>(m<sup>r</sup>)<sup>&psi;</sup> = (m<sup>&psi;</sup>)<sup>(</sup>r<sup>&phi;</sup>)</I> is called a
<strong>module homomorphism</strong>.
<P>
At the moment only the following type of module homomorphism is available in
<strong>GAP3</strong>.  Suppose you have the module <I>M<sub>1</sub></I> for the algebra <I>R<sub>1</sub></I>.  Then you
can construct the operation algebra <I>R<sub>2</sub><code>:= Operation</code>( R<sub>1</sub>, M<sub>1</sub> )</I>, and
the module for <I>R<sub>2</sub></I> isomorphic to <I>M<sub>1</sub></I> as <I>M<sub>2</sub><code>:= OperationModule</code>( R<sub>2</sub> )</I>.
<P>
Then <I><code>OperationHomomorphism</code>( M<sub>1</sub>, M<sub>2</sub> )</I> can be used to construct the
module homomorphism from <I>M<sub>1</sub></I> to <I>M<sub>2</sub></I>.
<P>
<pre>    gap> s:= Submodule( nat, [ [ 1, 1, 0 ] *Z(2) ] );; s.name:= "s";;
    gap> op:= Operation( a, s ); op.name:="op";;
    UnitalAlgebra( GF(2), [ [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, Z(2)^0 ] ], 
      [ [ Z(2)^0, 0*Z(2) ], [ Z(2)^0, Z(2)^0 ] ] ] )
    gap> opmod:= OperationModule( op ); opmod.name:= "opmod";;
    Module( op, [ [ Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0 ] ] )
    gap> modhom:= OperationHomomorphism( s, opmod );
    OperationHomomorphism( s, opmod )
    gap> b:= Basis( s );
    SemiEchelonBasis( s,
    [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, Z(2)^0 ] ] ) </pre>
<P>
Images and preimages of elements under module homomorphisms are computed
using <code>Image</code> and <code>PreImagesRepresentative</code>, respectively.  If <I>M<sub>1</sub></I> is a row
module this is done by using the knowledge of images of a basis, if <I>M<sub>1</sub></I> is
a (quotient of a) free module then the algebra homomorphism and images of the
generators of <I>M<sub>1</sub></I> are used.  The computation of preimages requires in both
cases the knowledge of representatives of preimages of a basis of <I>M<sub>2</sub></I>.
<P>
<pre>    gap> im:= List( b.vectors, x -> Image( modhom, x ) );
    [ [ Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0 ] ]
    gap> List( im, x -> PreImagesRepresentative( modhom, x ) );
    [ [ Z(2)^0, Z(2)^0, 0*Z(2) ], [ 0*Z(2), Z(2)^0, Z(2)^0 ] ] </pre>
<P><A NAME="SECT018"><h2>42.18 Row Module Records</h2></a>
<P><P><P>
Module records contain at least the components
<P>
<DL><DT><code>isDomain</code> :<DD> <BR> 
    always <code>true</code>,
</DL><P>
<DL><DT><code>isModule</code> :<DD> <BR> 
    always <code>true</code>,
</DL><P>
<DL><DT><code>isVectorSpace</code> :<DD> <BR> 
    always <code>true</code>, since modules are vector spaces,
</DL><P>
<DL><DT><code>ring</code> :<DD> <BR> 
    the ring acting on the module,
</DL><P>
<DL><DT><code>field</code> :<DD> <BR> 
    the coefficients field, is the same as <code><var>R</var>.field</code> where <var>R</var> is
    the <code>ring</code> component of the module,
</DL><P>
<DL><DT><code>operations</code> :<DD> <BR> 
    the operations record of the module.
</DL><P>
The following components are optional, but if they are not present then
the corresponding function in the <code>operations</code> record must know how to
compute them.
<P>
<DL><DT><code>generators</code> :<DD> <BR> 
    a list of <strong>module</strong> generators (not necessarily of vector space
    generators),
</DL><P>
<DL><DT><code>zero</code> :<DD> <BR> 
    the zero element of the module.
</DL><P>
<DL><DT><code>basis</code> :<DD> <BR> 
    a vector space basis of the module (see also <a href="chap033.htm#SECT002">Row Space Bases</a>),
</DL><P>
<P>
<P>
<strong>Factors of row modules</strong> have the same components as quotients of row spaces
(see <a href="chap033.htm#SECT030">Quotient Space Records</a>), except that of course they have an
appropriate <code>operations</code> record.
<P>
Additionally factors of row modules have the components <code>isModule</code>,
<code>isFactorModule</code> (both always <code>true</code>).  Parent modules also have the
<code>ring</code> component, which is the same ring as the ring component of
numerator and denominator.
<P><A NAME="SECT019"><h2>42.19 Module Homomorphism Records</h2></a>
<P><P><P>
Module homomorphism records have at least the following components.
<P>
<DL><DT><code>isGeneralMapping</code> :<DD> <BR> 
    <code>true</code>,
</DL><P>
<DL><DT><code>isMapping</code> :<DD> <BR> 
    <code>true</code>,
</DL><P>
<DL><DT><code>isHomomorphism</code>:<DD> <BR> 
    <code>true</code>,
</DL><P>
<DL><DT><code>domain</code> :<DD> <BR> 
    <code>Mappings</code>,
</DL><P>
<DL><DT><code>source</code> :<DD> <BR> 
    the source of the homomorphism, a module <I>M<sub>1</sub></I>,
</DL><P>
<DL><DT><code>range</code> :<DD> <BR> 
    the range of the homomorphism, a module <I>M<sub>2</sub></I>,
</DL><P>
<DL><DT><code>preImage</code> :<DD> <BR> 
    the module <I>M<sub>1</sub></I>,
</DL><P>
<DL><DT><code>basisImage</code> :<DD> <BR> 
    a vector space basis of the image of <I>M<sub>1</sub></I>,
</DL><P>
<DL><DT><code>preimagesBasis</code> :<DD> <BR> 
    a list of preimages of the basis vectors in <code>basisImage</code>
</DL><P>
<DL><DT><code>operations</code> :<DD> <BR> 
    the operations record of the homomorphism.
</DL><P>
If the source is a (factor of a) free module then there are also the
components
<P>
<DL><DT><code>genimages</code> :<DD> <BR> 
    a list of images of the generators of the source,
</DL><P>
<DL><DT><code>alghom</code> :<DD> <BR> 
    the underlying algebra homomorphism from the ring acting on <I>M<sub>1</sub></I>
    to the ring acting on <I>M<sub>2</sub></I>.
</DL><P>
If the source is a (factor of a) row module then there are also the
components
<P>
<DL><DT><code>basisSource</code> :<DD> <BR> 
    a vector space basis of <I>M<sub>1</sub></I>,
</DL><P>
<DL><DT><code>imagesBasis</code> :<DD> <BR> 
    a list of images of the basis vectors in <code>basisSource</code>.
</DL><P><a href ="chap041.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap043.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
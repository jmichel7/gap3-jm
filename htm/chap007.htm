<html><head><title>GAP3 Manual: 7 Groups</title></head>
<body bgcolor="ffffff">
<h1>7 Groups</h1>
<P><P><P>
Finitely generated groups  and their  subgroups are important  domains in
<strong>GAP3</strong>.  They  are  represented as permutation groups,  matrix groups, ag
groups or even  more complicated constructs  as for instance automorphism
groups, direct products or semi-direct products  where the group elements
are represented by records.
<P>
Groups  are created using <code>Group</code> (see <a href="chap007.htm#SECT009">Group</a>),  they are represented by
records that contain important  information  about the groups.  Subgroups
are created as subgroups of a given group using <code>Subgroup</code>, and are  also
represented  by records.   See  <a href="chap007.htm#SECT006">More about  Groups  and  Subgroups</a>  for
details about the distinction between groups and subgroups.
<P>
Because this chapter is very large it  is split into several parts.  Each
part consists of several sections.
<P>
Note  that  some functions will only work if the elements of a  group are
represented in an  unique  way.  This  is not true  in finitely presented
groups, see <a href="chap023.htm#SECT003">Group Functions for Finitely Presented Groups</a> for a list of
functions applicable to finitely presented groups.
<P>
The first part describes the operations and functions  that are available
for group elements, e.g., <code>Order</code> (see <a href="chap007.htm#SECT001">Group Elements</a>).   The next part
tells your more about the distinction of parent groups and subgroups (see
<a href="chap007.htm#SECT006">More  about  Groups  and  Subgroups</a>).   The  next  parts  describe  the
functions  that compute subgroups, e.g.,  <code>SylowSubgroup</code>  (<a href="chap007.htm#SECT014">Subgroups</a>),
and   series   of  subgroups,  e.g.,  <code>DerivedSeries</code>   (see  <a href="chap007.htm#SECT036">Series  of
Subgroups</a>).  The next part describes the functions that compute and test
properties  of  groups,  e.g.,  <code>AbelianInvariants</code> and  <code>IsSimple</code>  (see
<a href="chap007.htm#SECT045">Properties and Property Tests</a>), and that identify the isomorphism type.
The next parts describe conjugacy classes of elements and  subgroups (see
<a href="chap007.htm#SECT068">Conjugacy  Classes</a>) and  cosets (see <a href="chap007.htm#SECT084">Cosets of  Subgroups</a>).  The next
part   describes    the   functions  that   create  new   groups,   e.g.,
<code>DirectProduct</code> (see  <a href="chap007.htm#SECT098">Group   Constructions</a>).  The  next part describes
group    homomorphisms,   e.g.,   <code>NaturalHomomorphism</code>    (see    <a href="chap007.htm#SECT106">Group
Homomorphisms</a>).  The last part tells you more  about  the implementation
of   groups,  e.g., it describes  the format  of group  records (see <a href="chap007.htm#SECT114">Set
Functions for Groups</a>).
<P>
The functions described in this chapter are  implemented in the following
library files.  <code>LIBNAME/"grpelms.g"</code> contains the functions for  group
elements, <code>LIBNAME/"group.g"</code> contains the dispatcher and default group
functions, <code>LIBNAME/"grpcoset.g"</code> contains the functions for cosets and
factor    groups,   <code>LIBNAME/"grphomom.g"</code>   implements    the    group
homomorphisms,   and  <code>LIBNAME/"grpprods.g"</code>   implements   the   group
constructions.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap007.htm#SECT001">Group Elements</a>
<LI> <A HREF="chap007.htm#SECT002">Comparisons of Group Elements</a>
<LI> <A HREF="chap007.htm#SECT003">Operations for Group Elements</a>
<LI> <A HREF="chap007.htm#SECT004">IsGroupElement</a>
<LI> <A HREF="chap007.htm#SECT005">Order</a>
<LI> <A HREF="chap007.htm#SECT006">More about Groups and Subgroups</a>
<LI> <A HREF="chap007.htm#SECT007">IsParent</a>
<LI> <A HREF="chap007.htm#SECT008">Parent</a>
<LI> <A HREF="chap007.htm#SECT009">Group</a>
<LI> <A HREF="chap007.htm#SECT010">AsGroup</a>
<LI> <A HREF="chap007.htm#SECT011">IsGroup</a>
<LI> <A HREF="chap007.htm#SECT012">Subgroup</a>
<LI> <A HREF="chap007.htm#SECT013">AsSubgroup</a>
<LI> <A HREF="chap007.htm#SECT014">Subgroups</a>
<LI> <A HREF="chap007.htm#SECT015">Agemo</a>
<LI> <A HREF="chap007.htm#SECT016">Centralizer</a>
<LI> <A HREF="chap007.htm#SECT017">Centre</a>
<LI> <A HREF="chap007.htm#SECT018">Closure</a>
<LI> <A HREF="chap007.htm#SECT019">CommutatorSubgroup</a>
<LI> <A HREF="chap007.htm#SECT020">ConjugateSubgroup</a>
<LI> <A HREF="chap007.htm#SECT021">Core</a>
<LI> <A HREF="chap007.htm#SECT022">DerivedSubgroup</a>
<LI> <A HREF="chap007.htm#SECT023">FittingSubgroup</a>
<LI> <A HREF="chap007.htm#SECT024">FrattiniSubgroup</a>
<LI> <A HREF="chap007.htm#SECT025">NormalClosure</a>
<LI> <A HREF="chap007.htm#SECT026">NormalIntersection</a>
<LI> <A HREF="chap007.htm#SECT027">Normalizer</a>
<LI> <A HREF="chap007.htm#SECT028">PCore</a>
<LI> <A HREF="chap007.htm#SECT029">PrefrattiniSubgroup</a>
<LI> <A HREF="chap007.htm#SECT030">Radical</a>
<LI> <A HREF="chap007.htm#SECT031">SylowSubgroup</a>
<LI> <A HREF="chap007.htm#SECT032">TrivialSubgroup</a>
<LI> <A HREF="chap007.htm#SECT033">FactorGroup</a>
<LI> <A HREF="chap007.htm#SECT034">FactorGroupElement</a>
<LI> <A HREF="chap007.htm#SECT035">CommutatorFactorGroup</a>
<LI> <A HREF="chap007.htm#SECT036">Series of Subgroups</a>
<LI> <A HREF="chap007.htm#SECT037">DerivedSeries</a>
<LI> <A HREF="chap007.htm#SECT038">CompositionSeries</a>
<LI> <A HREF="chap007.htm#SECT039">ElementaryAbelianSeries</a>
<LI> <A HREF="chap007.htm#SECT040">JenningsSeries</a>
<LI> <A HREF="chap007.htm#SECT041">LowerCentralSeries</a>
<LI> <A HREF="chap007.htm#SECT042">PCentralSeries</a>
<LI> <A HREF="chap007.htm#SECT043">SubnormalSeries</a>
<LI> <A HREF="chap007.htm#SECT044">UpperCentralSeries</a>
<LI> <A HREF="chap007.htm#SECT045">Properties and Property Tests</a>
<LI> <A HREF="chap007.htm#SECT046">AbelianInvariants</a>
<LI> <A HREF="chap007.htm#SECT047">DimensionsLoewyFactors</a>
<LI> <A HREF="chap007.htm#SECT048">EulerianFunction</a>
<LI> <A HREF="chap007.htm#SECT049">Exponent</a>
<LI> <A HREF="chap007.htm#SECT050">Factorization</a>
<LI> <A HREF="chap007.htm#SECT051">Index</a>
<LI> <A HREF="chap007.htm#SECT052">IsAbelian</a>
<LI> <A HREF="chap007.htm#SECT053">IsCentral</a>
<LI> <A HREF="chap007.htm#SECT054">IsConjugate</a>
<LI> <A HREF="chap007.htm#SECT055">IsCyclic</a>
<LI> <A HREF="chap007.htm#SECT056">IsElementaryAbelian</a>
<LI> <A HREF="chap007.htm#SECT057">IsNilpotent</a>
<LI> <A HREF="chap007.htm#SECT058">IsNormal</a>
<LI> <A HREF="chap007.htm#SECT059">IsPerfect</a>
<LI> <A HREF="chap007.htm#SECT060">IsSimple</a>
<LI> <A HREF="chap007.htm#SECT061">IsSolvable</a>
<LI> <A HREF="chap007.htm#SECT062">IsSubgroup</a>
<LI> <A HREF="chap007.htm#SECT063">IsSubnormal</a>
<LI> <A HREF="chap007.htm#SECT064">IsTrivial for Groups</a>
<LI> <A HREF="chap007.htm#SECT065">GroupId</a>
<LI> <A HREF="chap007.htm#SECT066">PermutationCharacter</a>
<LI> <A HREF="chap007.htm#SECT068">Conjugacy Classes</a>
<LI> <A HREF="chap007.htm#SECT068">ConjugacyClasses</a>
<LI> <A HREF="chap007.htm#SECT069">ConjugacyClass</a>
<LI> <A HREF="chap007.htm#SECT070">PositionClass</a>
<LI> <A HREF="chap007.htm#SECT071">IsConjugacyClass</a>
<LI> <A HREF="chap007.htm#SECT072">Set Functions for Conjugacy Classes</a>
<LI> <A HREF="chap007.htm#SECT073">Conjugacy Class Records</a>
<LI> <A HREF="chap007.htm#SECT074">ConjugacyClassesSubgroups</a>
<LI> <A HREF="chap007.htm#SECT075">Lattice</a>
<LI> <A HREF="chap007.htm#SECT076">ConjugacyClassSubgroups</a>
<LI> <A HREF="chap007.htm#SECT077">IsConjugacyClassSubgroups</a>
<LI> <A HREF="chap007.htm#SECT078">Set Functions for Subgroup Conjugacy Classes</a>
<LI> <A HREF="chap007.htm#SECT079">Subgroup Conjugacy Class Records</a>
<LI> <A HREF="chap007.htm#SECT080">ConjugacyClassesMaximalSubgroups</a>
<LI> <A HREF="chap007.htm#SECT081">MaximalSubgroups</a>
<LI> <A HREF="chap007.htm#SECT082">NormalSubgroups</a>
<LI> <A HREF="chap007.htm#SECT083">ConjugateSubgroups</a>
<LI> <A HREF="chap007.htm#SECT084">Cosets of Subgroups</a>
<LI> <A HREF="chap007.htm#SECT085">RightCosets</a>
<LI> <A HREF="chap007.htm#SECT086">RightCoset</a>
<LI> <A HREF="chap007.htm#SECT087">IsRightCoset</a>
<LI> <A HREF="chap007.htm#SECT088">Set Functions for Right Cosets</a>
<LI> <A HREF="chap007.htm#SECT089">Right Cosets Records</a>
<LI> <A HREF="chap007.htm#SECT090">LeftCosets</a>
<LI> <A HREF="chap007.htm#SECT091">LeftCoset</a>
<LI> <A HREF="chap007.htm#SECT092">IsLeftCoset</a>
<LI> <A HREF="chap007.htm#SECT093">DoubleCosets</a>
<LI> <A HREF="chap007.htm#SECT094">DoubleCoset</a>
<LI> <A HREF="chap007.htm#SECT095">IsDoubleCoset</a>
<LI> <A HREF="chap007.htm#SECT096">Set Functions for Double Cosets</a>
<LI> <A HREF="chap007.htm#SECT097">Double Coset Records</a>
<LI> <A HREF="chap007.htm#SECT098">Group Constructions</a>
<LI> <A HREF="chap007.htm#SECT099">DirectProduct</a>
<LI> <A HREF="chap007.htm#SECT100">DirectProduct for Groups</a>
<LI> <A HREF="chap007.htm#SECT101">SemidirectProduct</a>
<LI> <A HREF="chap007.htm#SECT102">SemidirectProduct for Groups</a>
<LI> <A HREF="chap007.htm#SECT103">SubdirectProduct</a>
<LI> <A HREF="chap007.htm#SECT104">WreathProduct</a>
<LI> <A HREF="chap007.htm#SECT105">WreathProduct for Groups</a>
<LI> <A HREF="chap007.htm#SECT106">Group Homomorphisms</a>
<LI> <A HREF="chap007.htm#SECT107">IsGroupHomomorphism</a>
<LI> <A HREF="chap007.htm#SECT108">KernelGroupHomomorphism</a>
<LI> <A HREF="chap007.htm#SECT109">Mapping Functions for Group Homomorphisms</a>
<LI> <A HREF="chap007.htm#SECT110">NaturalHomomorphism</a>
<LI> <A HREF="chap007.htm#SECT111">ConjugationGroupHomomorphism</a>
<LI> <A HREF="chap007.htm#SECT112">InnerAutomorphism</a>
<LI> <A HREF="chap007.htm#SECT113">GroupHomomorphismByImages</a>
<LI> <A HREF="chap007.htm#SECT114">Set Functions for Groups</a>
<LI> <A HREF="chap007.htm#SECT115">Elements for Groups</a>
<LI> <A HREF="chap007.htm#SECT116">Intersection for Groups</a>
<LI> <A HREF="chap007.htm#SECT117">Operations for Groups</a>
<LI> <A HREF="chap007.htm#SECT118">Group Records</a>
</ol>
<A NAME="SECT001"><h2>7.1 Group Elements</h2></a>
<P><P><P>
The following  sections  describe the operations and  functions available
for group  elements (see <a href="chap007.htm#SECT002">Comparisons of Group Elements</a>, <a href="chap007.htm#SECT003">Operations for
Group Elements</a>, <a href="chap007.htm#SECT004">IsGroupElement</a>, and <a href="chap007.htm#SECT005">Order</a>).
<P>
Note  that group elements  usually  exist independently of a group, e.g.,
you  can write down two  permutations and  compute  their product without
ever defining a group that contains them.
<P><A NAME="SECT002"><h2>7.2 Comparisons of Group Elements</h2></a>
<P><P>
<A name = "I0"></a>

<A name = "I1"></a>

<P>
<code><var>g</var> = <var>h</var></code> <BR> 
<code><var>g</var> <> <var>h</var></code>
<P>
The equality operator <code>=</code> evaluates to <code>true</code>  if the group  elements <var>g</var>
and  <var>h</var> are  equal and  to <code>false</code> otherwise.   The  inequality operator
<code><></code> evaluates to <code>true</code> if the group elements <var>g</var> and <var>h</var> are not equal
and to <code>false</code> otherwise.
<P>
You can  compare group elements with objects  of other types.   Of course
they are never equal.  Standard group elements are permutations, ag words
and  matrices.  For examples of  generic group elements see for  instance
<a href="chap007.htm#SECT099">DirectProduct</a>.
<P>
<P>
<code><var>g</var> < <var>h</var></code> <BR> 
<code><var>g</var> <= <var>h</var></code> <BR> 
<code><var>g</var> >= <var>h</var></code> <BR> 
<code><var>g</var> > <var>h</var></code>
<P>
The operators <code><</code>, <code><=</code>, <code>>=</code> and <code>></code> evaluate to <code>true</code>  if  the group
element <var>g</var> is strictly less than, less than or equal to, greater than or
equal to  and strictly greater than the  group element <var>h</var>.  There  is no
general ordering on group  elements.
<P>
Standard group elements may be compared with objects of other types while
generic group elements may disallow such a comparison.
<P><A NAME="SECT003"><h2>7.3 Operations for Group Elements</h2></a>
<P><P><P>
<code><var>g</var> * <var>h</var></code>
<A name = "I2"></a>
<BR> 
<code><var>g</var> / <var>h</var></code>
<A name = "I3"></a>

<P>
The operators  <code>*</code> and <code>/</code> evaluate to the product and quotient  of  the
two group elements <var>g</var> and <var>h</var>.   The  operands  must of course  lie in a
common parent group, otherwise an error is signaled.
<P>
<P>
<code><var>g</var> ^ <var>h</var></code>
<A name = "I4"></a>

<P>
The operator <code>^</code> evaluates to the conjugate <I>&lt;h&gt;<sup>-1</sup>*  <var>g</var>*  <var>h</var></I>  of
<var>g</var> under  <var>h</var> for two group elements elements <var>g</var> and <var>h</var>.  The operands
must  of course  lie  in  a  common parent  group, otherwise an  error is
signaled.
<P>
<P>
<code><var>g</var> ^ <var>i</var></code>
<A name = "I5"></a>

<P>
The powering operator  <code>^</code> returns the  <var>i</var>-th power  of a group element
<var>g</var> and an integer <var>i</var>.  If <var>i</var> is zero the identity of a parent group of
<var>g</var> is returned.
<P>
<P>
<code><var>list</var> * <var>g</var></code>
<A name = "I6"></a>
<BR> 
<code><var>g</var> * <var>list</var></code>
<P>
In this form the operator <code>*</code> returns a new list where each entry is the
product of <var>g</var>  and the   corresponding  entry  of <var>list</var>.    Of   course
multiplication must be defined between <var>g</var> and each entry of <var>list</var>.
<P>
<P>
<code><var>list</var> / <var>g</var></code>
<A name = "I7"></a>

<P>
In this form the operator <code>/</code> returns a new list where  each entry is the
quotient of  <var>g</var>  and  the  corresponding entry  of   <var>list</var>.   Of course
division must be defined between <var>g</var> and each entry of <var>list</var>.
<P>
<P>
<code>Comm( <var>g</var>, <var>h</var> )</code>
<A name = "I8"></a>

<P>
<code>Comm</code>  returns the commutator <I>&lt;g&gt;<sup>-1</sup>*  <var>h</var><sup>-1</sup>* <var>g</var>*  <var>h</var></I> of two
group elements <var>g</var> and <var>h</var>.  The operands  must of course lie in a common
parent group, otherwise an error is signaled.
<P>
<P>
<code>LeftNormedComm( <var>g1</var>, ..., <var>gn</var> )</code>
<A name = "I9"></a>

<P>
<code>LeftNormedComm</code> returns the left  normed commutator 
<code>Comm( LeftNormedComm( <var>g1</var>, ..., <var>gn-1</var> ), <var>gn</var> )</code>  of  group   elements
<var>g1</var>, ..., <var>gn</var>. The operands must  of  course  lie  in a  common  parent
group, otherwise an error is signaled.
<P>
<P>
<code>RightNormedComm( <var>g1</var>, <var>g2</var>, ..., <var>gn</var> )</code>
<A name = "I10"></a>

<P>
<code>RightNormedComm</code> returns the right  normed commutator 
<code>Comm( <var>g1</var>, RightNormedComm( <var>g2</var>, ..., <var>gn</var> ) )</code>  of   group   elements
<var>g1</var>, ..., <var>gn</var>. The operands must  of  course  lie  in a  common  parent
group, otherwise an error is signaled.
<P>
<P>
<code>LeftQuotient( <var>g</var>, <var>h</var> )</code>
<A name = "I11"></a>

<P>
<code>LeftQuotient</code>  returns the  left quotient <I>&lt;g&gt;<sup>-1</sup>*  <var>h</var></I> of two group
elements <var>g</var> and <var>h</var>.  The operands must of course lie in a common parent
group, otherwise an error is signaled.
<P><A NAME="SECT004"><h2>7.4 IsGroupElement</h2></a>
<P><P>
<A name = "I12"></a>

<P>
<code>IsGroupElement( <var>obj</var> )</code>
<P>
<code>IsGroupElement</code>  returns  <code>true</code> if  <var>obj</var>,  which may  be  an object of
arbitrary type, is a  group element, and  <code>false</code> otherwise. The function
will signal an error if <var>obj</var> is an unbound variable.
<P>
<pre>    gap> IsGroupElement( 10 );
    false
    gap> IsGroupElement( (11,10) );
    true
    gap> IsGroupElement( IdWord );
    true </pre>
<P><A NAME="SECT005"><h2>7.5 Order</h2></a>
<P><P>
<A name = "I13"></a>

<P>
<code>Order( <var>G</var>, <var>g</var> )</code>
<P>
<code>Order</code> returns the order of a group element <var>g</var> in the group <var>G</var>.
<P>
The <strong>order</strong> is the smallest positive integer <I>i</I> such that <I>&lt;g&gt;<sup>i</sup></I> is the
identity.  The order of the identity is one.
<P>
<pre>    gap> Order( Group( (1,2), (1,2,3,4) ), (1,2,3) );
    3
    gap> Order( Group( (1,2), (1,2,3,4) ), () );
    1 </pre>
<P><A NAME="SECT006"><h2>7.6 More about Groups and Subgroups</h2></a>
<P><P><P>
<strong>GAP3</strong> distinguishs between parent groups and subgroups of parent groups.
Each subgroup belongs to  a unique parent group.  We say that this parent
group is the <strong>parent</strong> of the  subgroup.  We also say that a  parent group
is its own parent.
<P>
Parent groups are constructed by <code>Group</code> and subgroups are constructed by
<code>Subgroup</code>.  The first argument of  <code>Subgroup</code>  must be  a parent  group,
i.e., it must not be a subgroup of a  parent group, and this parent group
will be the parent of the constructed subgroup.
<P>
Those group functions that take more than one  argument require that  the
arguments have a common parent. Take for instance <code>CommutatorSubgroup</code>. It
takes two  arguments,  a  group <var>G</var>  and  a  group  <var>H</var>, and  returns the
commutator subgroup  of <var>H</var> with <var>G</var>.  So either <var>G</var> is a parent group,
and <var>H</var> is a
subgroup of this parent  group, or <var>G</var> and <var>H</var> are  subgroups of a common
parent group <var>P</var>.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );
    Group( (1,2), (1,2,3,4) )
    gap> c3 := Subgroup( s4, [ (1,2,3) ] );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2,3) ] )
    gap> CommutatorSubgroup( s4, c3 );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,3,2), (1,2,4) ] )
    # ok, <code>c3</code> is a subgroup of the parent group <code>s4</code>
    gap> a4 := Subgroup( s4, [ (1,2,3), (2,3,4) ] );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2,3), (2,3,4) ] )
    gap> CommutatorSubgroup( a4, c3 );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,4)(2,3), (1,3)(2,4) ] )
    # also ok, <code>c3</code> and <code>a4</code> are subgroups of the parent group <code>s4</code>
    gap> x3 := Group( (1,2,3) );
    Group( (1,2,3) )
    gap> CommutatorSubgroup( s4, x3 );
    Error, &lt;G> and &lt;H> must have the same parent group
    # not ok, <code>s4</code> is its own parent and <code>x3</code> is its own parent </pre>
<P>
Those functions that return  new  subgroups, as  with <code>CommutatorSubgroup</code>
 above,
return  this subgroup  as  a  subgroup  of  the  common  parent  of their
arguments.  Note  especially  that the  commutator subgroup  of <code>c3</code>  with
<code>a4</code>  is
returned  as a subgroup  of  their  common parent  group  <code>s4</code>, not as  a
subgroup  of <code>a4</code>.  It  can  not be a subgroup of <code>a4</code>, because subgroups
must be  subgroups  of parent groups, and <code>a4</code> is not a parent group.  Of
course, mathematically the commutator subgroup is a subgroup of <code>a4</code>.
<P>
Note that a subgroup of a parent group need not be a proper subgroup, as
can be seen in the following example.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );
    Group( (1,2), (1,2,3,4) )
    gap> x4 := Subgroup( s4, [ (1,2,3,4), (3,4) ] );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2,3,4), (3,4) ] )
    gap> Index( s4, x4 );
    1 </pre>
<P>
One exception to the rule are functions that construct new groups such as
<code>DirectProduct</code>.  They accept groups with different parents.  If you want
rename the function <code>DirectProduct</code> to <code>OuterDirectProduct</code>.
<P>
Another  exception is <code>Intersection</code> (see <a href="chap004.htm#SECT012">Intersection</a>),  which  allows
groups with different parent groups, it computes the intersection in such
cases  as  if  the  groups  were  sets  of  elements.   This  is  because
<code>Intersection</code>  is not a  group function, but a domain function, i.e., it
accepts two (or more) arbitrary domains as arguments.
<P>
Whenever you have  two subgroups which have different  parent groups  but
have a common supergroup <var>G</var> you can use <code>AsSubgroup</code>  (see <a href="chap007.htm#SECT013">AsSubgroup</a>)
in order to construct new subgroups which have a common parent group <var>G</var>.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );
    Group( (1,2), (1,2,3,4) )
    gap> x3 := Group( (1,2,3) );
    Group( (1,2,3) )
    gap> CommutatorSubgroup( s4, x3 );
    Error, &lt;G> and &lt;H> must have the same parent group
    # not ok, <code>s4</code> is its own parent and <code>x3</code> is its own parent
    gap> c3 := AsSubgroup( s4, x3 );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2,3) ] )
    gap> CommutatorSubgroup( s4, c3 );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,3,2), (1,2,4) ] )</pre>
<P>
The following sections describe  the functions  related  to  this concept
(see  <a href="chap007.htm#SECT007">IsParent</a>, <a href="chap007.htm#SECT008">Parent</a>,  <a href="chap007.htm#SECT009">Group</a>, <a href="chap007.htm#SECT010">AsGroup</a>,  <a href="chap007.htm#SECT011">IsGroup</a>,  <a href="chap007.htm#SECT012">Subgroup</a>,
<a href="chap007.htm#SECT013">AsSubgroup</a>).
<P><A NAME="SECT007"><h2>7.7 IsParent</h2></a>
<P><P><P>
<code>IsParent( <var>G</var> )</code>
<P>
<code>IsParent</code> returns <code>true</code> if <var>G</var> is a parent group, and <code>false</code> otherwise
(see <a href="chap007.htm#SECT006">More about Groups and Subgroups</a>).
<P><A NAME="SECT008"><h2>7.8 Parent</h2></a>
<P><P><P>
<code>Parent( <var><I>U<sub>1</sub></I></var>, ..., <var><I>U<sub>n</sub></I></var> )</code>
<P>
<code>Parent</code> returns  the  common parent  group of its  subgroups  and parent
group arguments.
<P>
In case more than one argument  is given, all  groups  must have the same
parent  group.   Otherwise an  error is signaled.    This can  be used to
ensure that a collection of given subgroups have a common parent group.
<P><A NAME="SECT009"><h2>7.9 Group</h2></a>
<P><P><P>
<code>Group( <var>U</var> )</code>
<P>
Let <var>U</var> be a parent group or a subgroup.  <code>Group</code>  returns  a  new parent
group <I>G</I> which is isomorphic to <var>U</var>.  The generators of <I>G</I>  need not be
the same elements as the  generators of <var>U</var>.   The default group function
uses the same  generators, while the   ag group  function  may create new
generators along with a new collector.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> s3 := Subgroup( s4, [ (1,2,3), (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2,3), (1,2) ] )
    gap> Group( s3 ); # same elements
    Group( (1,2,3), (1,2) )
    gap> s4.1 * s3.1;
    (1,3,4,2)
    gap> s4 := AgGroup( s4 );
    Group( g1, g2, g3, g4 )
    gap> a4 := DerivedSubgroup( s4 );
    Subgroup( Group( g1, g2, g3, g4 ), [ g2, g3, g4 ] )
    gap> a4 := Group( a4 ); # different elements
    Group( g1, g2, g3 )
    gap> s4.1 * a4.1;
    Error, AgWord op: agwords have different groups </pre>
<P>
<code>Group( <var>list</var>, <var>id</var> )</code>
<P>
<code>Group</code> returns a new parent group  <I>G</I> generated by group elements <I>g<sub>1</sub>,
..., g<sub>n</sub></I> of <var>list</var>. <var>id</var> must be the identity of this group.
<P>
<code>Group( <var><I>g<sub>1</sub></I></var>, ..., <var><I>g<sub>n</sub></I></var> )</code>
<P>
<code>Group</code>  returns  a   new parent group   <I>G</I> generated  by group elements
<var><I>g<sub>1</sub></I></var>, ..., <var><I>g<sub>n</sub></I></var>.
<P>
The generators of this new parent group need not  be the same elements as
<I>g<sub>1</sub>, ...,  g<sub>n</sub></I>.  The default group  function  however returns   a group
record with generators  <I>g<sub>1</sub>, ..., g<sub>n</sub></I>  and identity <var>id</var>,  while the ag
group function may create new generators along with a new  collector.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> z4 := Group( s4.1 ); # same element
    Group( (1,2,3,4) )
    gap> s4.1 * z4.1;
    (1,3)(2,4)
    gap> s4 := AgGroup( s4 );
    Group( g1, g2, g3, g4 )
    gap> z4 := Group( s4.1 * s4.3 ); # different elements
    Group( g1, g2 )
    gap> s4.1 * z4.1;
    Error, AgWord op: agwords have different groups </pre>
<P>
Let <I>g<sub>i<sub>1</sub></sub>, ...,  g<sub>i<sub>m</sub></sub></I> be the  set of nontrivial  generators in all
four cases.   <code>Groups</code> sets  record components  <code><var>G</var>.1</code>,  ..., <code><var>G</var>.m</code> to
these generators.
<P><A NAME="SECT010"><h2>7.10 AsGroup</h2></a>
<P><P><P>
<code>AsGroup( <var>D</var> )</code>
<P>
Let <var>D</var> be a domain. <code>AsGroup</code> returns a group <I>G</I> such that  the  set of
elements of  <var>D</var> is the same as  the set of  elements of <I>G</I>  if  this is
possible.
<P>
If <var>D</var> is  a list of  group elements these  elements must  form  a group.
Otherwise an error is signaled.
<P>
Note that this function returns a parent group or a subgroup  of a parent
group  depending on <var>D</var>. In order  to convert a   subgroup  into a parent
group you must use <code>Group</code> (see <a href="chap007.htm#SECT009">Group</a>).
<P>
<pre>    gap> s4 := AgGroup( Group( (1,2,3,4), (2,3) ) );
    Group( g1, g2, g3, g4 )
    gap> Elements( last );
    [ IdAgWord, g4, g3, g3*g4, g2, g2*g4, g2*g3, g2*g3*g4, g2^2, g2^2*g4,
      g2^2*g3, g2^2*g3*g4, g1, g1*g4, g1*g3, g1*g3*g4, g1*g2, g1*g2*g4, 
      g1*g2*g3, g1*g2*g3*g4, g1*g2^2, g1*g2^2*g4, g1*g2^2*g3, 
      g1*g2^2*g3*g4 ]
    gap> AsGroup( last );
    Group( g1, g2, g3, g4 ) </pre>
<P>
The default function <code>GroupOps.AsGroup</code> for a group <var>D</var> returns a copy of
<var>D</var>.  If <var>D</var>  is a  subgroup then  a   subgroup is  returned. The default
function <code>GroupElementsOps.AsGroup</code> expects a list <var>D</var> of group  elements
forming a  group  and uses successively <code>Closure</code>  in  order to compute a
reduced generating set.
<P><A NAME="SECT011"><h2>7.11 IsGroup</h2></a>
<P><P><P>
<code>IsGroup( <var>obj</var> )</code>
<P>
<code>IsGroup</code> returns <code>true</code> if  <var>obj</var>, which can be  an object of  arbitrary
type, is a parent group or a subgroup and <code>false</code> otherwise. The function
will signal an error if <var>obj</var> is an unbound variable.
<P>
<pre>    gap> IsGroup( Group( (1,2,3) ) );
    true
    gap> IsGroup( 1/2 );
    false </pre>
<P><A NAME="SECT012"><h2>7.12 Subgroup</h2></a>
<P><P><P>
<code>Subgroup( <var>G</var>, <var>L</var> )</code>
<P>
Let <var>G</var> be a parent group and <var>L</var> be a  list  of elements <I>g<sub>1</sub>, ..., g<sub>n</sub></I>
of <var>G</var>.  <code>Subgroup</code> returns the subgroup <I>U</I> generated by <I>g<sub>1</sub>, ..., g<sub>n</sub></I>
with parent group <I>G</I>.
<P>
Note  that this function  is  the only  group  function in which the name
<code>Subgroup</code>  does not   refer  to  the  mathematical terms  subgroup   and
supergroup but  to the implementation  of  groups as subgroups and parent
groups.   <code>IsSubgroup</code>  (see   <a href="chap007.htm#SECT062">IsSubgroup</a>)  is  not   the   negation of
<code>IsParent</code>  (see   <a href="chap007.htm#SECT007">IsParent</a>)  but   decides   subgroup  and  supergroup
relations.
<P>
<code>Subgroup</code> always binds a copy of <var>L</var> to <code><I>U</I>.generators</code>,  so it is safe
to modify <var>L</var> after calling <code>Subgroup</code> because  this will  not change the
entries in <I>U</I>.
<P>
Let <I>g<sub>i<sub>1</sub></sub>, ..., g<sub>i<sub>m</sub></sub></I> be  the nontrivial  generators.   <code>Subgroups</code>
binds these generators to <code><var>U</var>.1</code>, ..., <code><var>U</var>.m</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> v4 := Subgroup( s4, [ (1,2), (1,2)(3,4) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2), (1,2)(3,4) ] )
    gap> IsParent( v4 );
    false </pre>
<P><A NAME="SECT013"><h2>7.13 AsSubgroup</h2></a>
<P><P><P>
<code>AsSubgroup( <var>G</var>, <var>U</var> )</code>
<P>
Let <var>G</var> be a parent group and <var>U</var> be a parent group or  a subgroup with a
possibly different parent group, such that the generators <I>g<sub>1</sub>, ..., g<sub>n</sub></I>
of <var>U</var> are elements of <var>G</var>.  <code>AsSubgroup</code> returns a new subgroup <I>S</I> such
that <I>S</I> has parent group <var>G</var> and is generated by <I>g<sub>1</sub>, ..., g<sub>n</sub></I>.
<P>
<pre>    gap> d8 := Group( (1,2,3,4), (1,2)(3,4) );
    Group( (1,2,3,4), (1,2)(3,4) )
    gap> z := Centre( d8 );
    Subgroup( Group( (1,2,3,4), (1,2)(3,4) ), [ (1,3)(2,4) ] )
    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> Normalizer( s4, AsSubgroup( s4, z ) );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (2,4), (1,2,3,4), (1,3)(2,4)
     ] ) </pre>
<P><A NAME="SECT014"><h2>7.14 Subgroups</h2></a>
<P><P><P>
The following sections describe functions that compute certain  subgroups
of  a given group, e.g.,  <code>SylowSubgroup</code> computes  a Sylow subgroup of a
group  (see  <a href="chap007.htm#SECT016">Centralizer</a>,  <a href="chap007.htm#SECT017">Centre</a>,  <a href="chap007.htm#SECT018">Closure</a>,  <a href="chap007.htm#SECT019">CommutatorSubgroup</a>,
<a href="chap007.htm#SECT020">ConjugateSubgroup</a>,    <a href="chap007.htm#SECT021">Core</a>,   <a href="chap007.htm#SECT022">DerivedSubgroup</a>,   <a href="chap007.htm#SECT023">FittingSubgroup</a>,
<a href="chap007.htm#SECT024">FrattiniSubgroup</a>, <a href="chap007.htm#SECT025">NormalClosure</a>, <a href="chap007.htm#SECT026">NormalIntersection</a>,  <a href="chap007.htm#SECT027">Normalizer</a>,
<a href="chap007.htm#SECT028">PCore</a>,   <a href="chap007.htm#SECT029">PrefrattiniSubgroup</a>,       <a href="chap007.htm#SECT030">Radical</a>,       <a href="chap007.htm#SECT031">SylowSubgroup</a>,
<a href="chap007.htm#SECT032">TrivialSubgroup</a>).
<P>
They  return  group  records as  described in  <a href="chap007.htm#SECT118">Group  Records</a>  for  the
computed subgroups.  Some functions  may not terminate if the given group
has  an infinite set  of elements, while other functions  may  signal  an
error in such cases.
<P>
Here the term ``subgroup'' is used  in  a mathematical sense.  But  in
<strong>GAP3</strong>,  every group is either a parent group or  a  subgroup of a unique
parent group.  If you compute a  Sylow subgroup  <I>S</I> of a group <I>U</I>  with
parent group <I>G</I> then <I>S</I> is a  subgroup of <I>U</I> but its  parent group  is
<I>G</I> (see <a href="chap007.htm#SECT006">More about Groups and Subgroups</a>).
<P>
Further sections describe functions that return factor groups  of a given
group (see <a href="chap007.htm#SECT033">FactorGroup</a> and <a href="chap007.htm#SECT035">CommutatorFactorGroup</a>).
<P><A NAME="SECT015"><h2>7.15 Agemo</h2></a>
<P><P><P>
<code>Agemo( <var>G</var>, <var>p</var> )</code>
<P>
<var>G</var> must be  a  <var>p</var>-group.  <code>Agemo</code> returns the subgroup of <var>G</var> generated
by the <var>p</var>.th powers of the elements of <var>G</var>.
<P>
<pre>    gap> d8 := Group( (1,3)(2,4), (1,2) );
    Group( (1,3)(2,4), (1,2) )
    gap> Agemo( d8, 2 );
    Subgroup( Group( (1,3)(2,4), (1,2) ), [ (1,2)(3,4) ] ) </pre>
<P>
The  default  function <code>GroupOps.Agemo</code>  computes  the  subgroup  of  <var>G</var>
generated by  the  <var>p</var>.th powers  of the  generators  of  <var>G</var> if  <var>G</var>  is
abelian.   Otherwise  the  function computes  the  normal closure  of the
<var>p</var>.th powers of the representatives of the conjugacy classes of <var>G</var>.
<P><A NAME="SECT016"><h2>7.16 Centralizer</h2></a>
<P><P><P>
<code>Centralizer( <var>G</var>, <var>x</var> )</code>
<P>
<code>Centralizer</code> returns the centralizer of an element <var>x</var> in <var>G</var>  where <var>x</var>
must be an element of the parent group of <var>G</var>.
<P>
The <strong>centralizer</strong> of an element <var>x</var> in <var>G</var>  is defined as the set  <I>C</I> of
elements <I>c</I> of <var>G</var> such that <var>c</var> and <var>x</var> commute.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> v4 := Centralizer( s4, (1,2) );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (3,4), (1,2) ] )</pre>
<P>
The  default    function <code>GroupOps.Centralizer</code>   uses  <code>Stabilizer</code> (see
<a href="chap008.htm#SECT024">Stabilizer</a>) in order to compute the centralizer of <var>x</var> in <var>G</var> acting by
conjugation.
<P>
<code>Centralizer( <var>G</var>, <var>U</var> )</code>
<P>
<code>Centralizer</code>  returns the centralizer  of a group   <var>U</var>  in <var>G</var> as group
record.  Note that <var>G</var> and <var>U</var> must have a common parent group.
<P>
The <strong>centralizer</strong> of  a group <var>U</var> in <var>G</var>  is  defined as  the set <I>C</I>  of
elements <I>c</I> of <I>C</I> such <I>c</I> commutes with every element of <var>U</var>.
<P>
If <var>G</var> is  the parent group of <var>U</var>  then <code>Centralizer</code> will set  and test
the  record   component <code><var>U</var>.centralizer</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> v4 := Centralizer( s4, (1,2) );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (3,4), (1,2) ] )
    gap> c2 := Subgroup( s4, [ (1,3) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,3) ] )
    gap> Centralizer( v4, c2 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [  ] ) </pre>
<P>
The default function <code>GroupOps.Centralizer</code> uses <code>Stabilizer</code> in order to
compute successively the stabilizer of the generators of <var>U</var>.
<P><A NAME="SECT017"><h2>7.17 Centre</h2></a>
<P><P><P>
<code>Centre( <var>G</var> )</code>
<P>
<code>Centre</code> returns the centre of <var>G</var>.
<P>
The <strong>centre</strong> of a group <var>G</var> is defined as the centralizer of <var>G</var> in <var>G</var>.
<P>
Note that <code>Centre</code> sets and tests the record component <code><var>G</var>.centre</code>.
<P>
<pre>    gap> d8 := Group( (1,2,3,4), (1,2)(3,4) );
    Group( (1,2,3,4), (1,2)(3,4) )
    gap> Centre( d8 );
    Subgroup( Group( (1,2,3,4), (1,2)(3,4) ), [ (1,3)(2,4) ] ) </pre>
<P>
The default   group function   <code>GroupOps.Centre</code> uses  <code>Centralizer</code> (see
<a href="chap007.htm#SECT016">Centralizer</a>) in order to compute the centralizer of <var>G</var> in <var>G</var>.
<P><A NAME="SECT018"><h2>7.18 Closure</h2></a>
<P><P><P>
<code>Closure( <var>U</var>, <var>g</var> )</code>
<P>
Let <var>U</var> be  a group with  parent group <I>G</I>  and let <var>g</var> be an  element of
<I>G</I>. Then <code>Closure</code> returns the closure <I>C</I> of <var>U</var> and <var>g</var> as subgroup of
<I>G</I>. The closure <I>C</I> of <var>U</var> and <var>g</var> is  the subgroup generated by <var>U</var> and
<var>g</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2 ) );
    Group( (1,2,3,4), (1,2) )
    gap> s2 := Subgroup( s4, [ (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2) ] )
    gap> Closure( s2, (3,4) );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2), (3,4) ] ) </pre>
<P>
The default function <code>GroupOps.Closure</code>  returns <var>U</var> if <var>U</var> is  a  parent
group, or if <var>g</var> or its inverse  is a generator of  <var>U</var>, or if the set of
elements  is  known  and  <var>g</var>  is in  this  set,  or  if <var>g</var>  is trivial.
Otherwise the function constructs a  new subgroup <I>C</I>  which is generated
by the generators of <var>U</var> and the element <var>g</var>.
<P>
Note  that if the set of elements of <var>U</var> is bound to <code><var>U</var>.elements</code>  then
<code>GroupOps.Closure</code>  computes the set of elements  for <I>C</I> and binds it to
<code><I>C</I>.elements</code>.
<P>
If <var>U</var> is known to be non-abelian or infinite so is <I>C</I>.  If <var>U</var> is known
to be  abelian  the  function  checks  whether  <var>g</var>  commutes  with every
generator of <var>U</var>.
<P>
<code>Closure( <var>U</var>, <var>S</var> )</code>
<P>
Let <var>U</var> and <var>S</var> be  two  group with a   common parent  group   <I>G</I>.  Then
<code>Closure</code> returns the subgroup of <I>G</I> generated by <var>U</var> and <var>S</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2 ) );
    Group( (1,2,3,4), (1,2) )
    gap> s2 := Subgroup( s4, [ (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2) ] )
    gap> z3 := Subgroup( s4, [ (1,2,3) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2,3) ] )
    gap> Closure( z3, s2 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2,3), (1,2) ] ) </pre>
<P>
The default function <code>GroupOps.Closure</code> returns the parent of <var>U</var> and <var>S</var>
if <var>U</var> or <var>S</var> is  a  parent group. Otherwise  the  function computes  the
closure of <var>U</var> under all generators of <var>S</var>.
<P>
Note that if the set  of elements of <var>U</var> is  bound to <code><var>U</var>.elements</code> then
<code>GroupOps.Closure</code> computes the set of  elements for the closure <I>C</I>  and
binds it to <code><I>C</I>.elements</code>.
<P><A NAME="SECT019"><h2>7.19 CommutatorSubgroup</h2></a>
<P><P><P>
<code>CommutatorSubgroup( <var>G</var>, <var>H</var> )</code>
<P>
Let <var>G</var>   and    <var>H</var>   be   groups    with   a  common     parent  group.
<code>CommutatorSubgroup</code> returns the commutator subgroup <I>[ G, H ]</I>.
<P>
The <strong>commutator subgroup</strong> of  <var>G</var> and <var>H</var>  is the group  generated by all
commutators <I>[ g, h ]</I> with <I>g&isin; <var>G</var></I> and <I>h&isin; <var>H</var></I>.
<P>
See also <code>DerivedSubgroup</code> (<a href="chap007.htm#SECT022">DerivedSubgroup</a>).
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> d8 := Group( (1,2,3,4), (1,2)(3,4) );
    Group( (1,2,3,4), (1,2)(3,4) )
    gap> CommutatorSubgroup( s4, AsSubgroup( s4, d8 ) );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,3)(2,4), (1,3,2) ] ) </pre>
<P>
Let <var>G</var> be generated by <I>g<sub>1</sub>,  ..., g<sub>n</sub></I> and <var>H</var>  be generated  by  <I>h<sub>1</sub>,
..., h<sub>m</sub></I>.   The normal  closure of the  subgroup <I>S</I> generated by <I>Comm(
g<sub>i</sub>, h<sub>j</sub> )</I> for <I>1  &le; i  &le; n</I> and <I>1  &le; j  &le; m</I> under <var>G</var> and <var>H</var>
is  the commutator  subgroup  of  <var>G</var> and  <var>H</var>  (see  <A href="biblio.htm#Hup67"><cite>Hup67</cite></a>).  The
default function <code>GroupOps.CommutatorSubgroup</code> returns the normal closure
of <I>S</I> under the closure of <var>G</var> and <var>H</var>.
<P><A NAME="SECT020"><h2>7.20 ConjugateSubgroup</h2></a>
<P><P><P>
<code>ConjugateSubgroup( <var>U</var>, <var>g</var> )</code>
<P>
<code>ConjugateSubgroup</code> returns the subgroup <I>&lt;U&gt;<sup><var>g</var></sup> </I> conjugate to <var>U</var> under
<var>g</var>, which must be an element of the parent group of <var>G</var>.
<P>
If       present,   the      flags      <code><var>U</var>.isAbelian</code>,  <code><var>U</var>.isCyclic</code>,
<code><var>U</var>.isElementaryAbelian</code>,      <code><var>U</var>.isFinite</code>,        <code><var>U</var>.isNilpotent</code>,
<code><var>U</var>.isPerfect</code>,   <code><var>U</var>.isSimple</code>, <code><var>U</var>.isSolvable</code>, and   <code><var>U</var>.size</code> are
copied to <I>&lt;U&gt;<sup><var>g</var></sup> </I>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> c2 := Subgroup( s4, [ (1,2)(3,4) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2)(3,4) ] )
    gap> ConjugateSubgroup( c2, (1,3) );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,4)(2,3) ] ) </pre>
<P>
The default function <code>GroupOps.ConjugateSubgroup</code> returns  <var>U</var> if the set
of elements of <var>U</var> is known and <var>g</var> is an element  of this  set or if <var>g</var>
is  a generator  of  <var>U</var>.  Otherwise it conjugates the  generators of <var>U</var>
with <var>g</var>.
<P>
If  the set  of elements  of <var>U</var> is   known  the default   function  also
conjugates and binds it to the conjugate subgroup.
<P><A NAME="SECT021"><h2>7.21 Core</h2></a>
<P><P><P>
<code>Core( <var>S</var>, <var>U</var> )</code>
<P>
Let <var>S</var>  and <var>U</var>  be groups with a common  parent group <I>G</I>.  Then <code>Core</code>
returns the core of <var>U</var> under conjugation of <var>S</var>.
<P>
The  <strong>core</strong> of a group <var>U</var> under a group  <var>S</var> <I>Core<sub><var>S</var></sub>(  <var>U</var> )</I> is the
intersection  <I>&<big>cap;</big><sub>s&isin; <var>S</var></sub> <var>U</var><sup>s</sup></I> of  all  groups conjugate to <var>U</var>
under conjugation by elements of <var>S</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> s4.name := "s4";;
    gap> d8 := Subgroup( s4, [ (1,2,3,4), (1,2)(3,4) ] );
    Subgroup( s4, [ (1,2,3,4), (1,2)(3,4) ] )
    gap> Core( s4, d8 );
    Subgroup( s4, [ (1,2)(3,4), (1,3)(2,4) ] )
    gap> Core( d8, s4 );
    s4 </pre>
<P>
The default function <code>GroupOps.Core</code> starts   with <var>U</var> and  replaces  <var>U</var>
with  the intersection of <var>U</var>   and a conjugate subgroup  of  <var>U</var> under a
generator of <var>G</var> until the subgroup is normalized by <var>G</var>.
<P><A NAME="SECT022"><h2>7.22 DerivedSubgroup</h2></a>
<P><P><P>
<code>DerivedSubgroup( <var>G</var> )</code>
<P>
<code>DerivedSubgroup</code> returns  the derived subgroup  <I>&lt;G&gt;' = [ <var>G</var>, <var>G</var>
]</I> of <var>G</var>.
<P>
The <strong>derived subgroup</strong> of <var>G</var> is the  group generated  by all commutators
<I>[ g, h ]</I> with <I>g, h&isin; <var>G</var></I>.
<P>
Note   that  <code>DerivedSubgroup</code> sets  and   tests   <code><var>G</var>.derivedSubgroup</code>.
<code>CommutatorSubgroup</code> (see <a href="chap007.htm#SECT019">CommutatorSubgroup</a>) allows you to compute the
commutator group of two subgroups.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> DerivedSubgroup( s4 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,3,2), (2,4,3) ] ) </pre>
<P>
Let   <var>G</var> be generated by  <I>g<sub>1</sub>,  ...,  g<sub>n</sub></I>.  Then  the default function
<code>GroupOps.DerivedSubgroup</code> returns the  normal  closure of <I>S</I> under  <var>G</var>
where <I>S</I> is the subgroup of <var>G</var> generated by <I>Comm(  g<sub>i</sub>,  g<sub>j</sub> )</I> for <I>1
 &le; j &lt; i  &le; n</I>.
<P><A NAME="SECT023"><h2>7.23 FittingSubgroup</h2></a>
<P><P><P>
<code>FittingSubgroup( <var>G</var> )</code>
<P>
<code>FittingSubgroup</code> returns the Fitting subgroup of <var>G</var>.
<P>
The <strong>Fitting subgroup</strong> of a  group  <var>G</var> is the  biggest  nilpotent normal
subgroup of <var>G</var>.
<P>
<pre>    gap> s4;
    Group( (1,2,3,4), (1,2) )
    gap> FittingSubgroup( s4 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,3)(2,4), (1,4)(2,3) ] )
    gap> IsNilpotent( last );
    true </pre>
<P>
Let  <var>G</var>  be   a  finite  group.     Then  the  default  group   function
<code>GroupOps.FittingSubgroup</code> computes the subgroup of  <var>G</var> generated by the
cores of the Sylow subgroups in <var>G</var>.
<P><A NAME="SECT024"><h2>7.24 FrattiniSubgroup</h2></a>
<P><P><P>
<code>FrattiniSubgroup( <var>G</var> )</code> 
<P>
<code>FrattiniSubgroup</code> returns the Frattini subgroup of group <var>G</var>.
<P>
The <strong>Frattini subgroup</strong> of a group <var>G</var> is the intersection of all maximal
subgroups of <var>G</var>.
<P>
<pre>    gap> s4 := SymmetricGroup( AgWords, 4 );;
    gap> ss4 := SpecialAgGroup( s4 );;
    gap> FrattiniSubgroup( ss4 );
    Subgroup( Group( g1, g2, g3, g4 ), [  ] ) </pre>
<P>
The generic method computes the Frattini subgroup  as intersection of the
cores (see  <a href="chap007.htm#SECT021">Core</a>)  of the  representatives of  the conjugacy classes of
maximal subgroups (see <a href="chap007.htm#SECT080">ConjugacyClassesMaximalSubgroups</a>).
<P><A NAME="SECT025"><h2>7.25 NormalClosure</h2></a>
<P><P><P>
<code>NormalClosure( <var>S</var>, <var>U</var> )</code>
<P>
Let  <var>S</var>  and <var>U</var>  be  groups  with  a  common  parent group  <I>G</I>.   Then
<code>NormalClosure</code> returns the normal closure of <var>U</var> under <var>S</var> as a subgroup
of <I>G</I>.
<P>
The <strong>normal  closure</strong> <I>N</I> of a group <var>U</var>  under the action of a group <var>S</var>
is the smallest subgroup in <I>G</I> that contains <var>U</var>  and is invariant under
conjugation by elements of <var>S</var>.  Note that <I>N</I> is independent of <I>G</I>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> s4.name := "s4";;
    gap> d8 := Subgroup( s4, [ (1,2,3,4), (1,2)(3,4) ] );
    Subgroup( s4, [ (1,2,3,4), (1,2)(3,4) ] )
    gap> NormalClosure( s4, d8 );
    Subgroup( s4, [ (1,2,3,4), (1,2)(3,4), (1,3,4,2) ] )
    gap> last = s4;
    true </pre>
<P><A NAME="SECT026"><h2>7.26 NormalIntersection</h2></a>
<P><P><P>
<code>NormalIntersection( <var>N</var>, <var>U</var> )</code>
<P>
Let  <var>N</var>  and  <var>U</var>  be  two  subgroups   with  a  common   parent  group.
<code>NormalIntersection</code> returns the intersection in case <var>U</var> normalizes <var>N</var>.
<P>
Depending on the domain this may be faster  than the general intersection
algorithm     (see       <a href="chap004.htm#SECT012">Intersection</a>).    The     default     function
<code>GroupOps.NormalIntersection</code> however uses <code>Intersection</code>.
<P><A NAME="SECT027"><h2>7.27 Normalizer</h2></a>
<P><P><P>
<code>Normalizer( <var>S</var>, <var>U</var> )</code>
<P>
Let   <var>S</var> and <var>U</var>  be groups  with  a  common   parent  group  <I>G</I>.  Then
<code>Normalizer</code> returns the normalizer of <var>U</var> in <var>S</var>.
<P>
The <strong>normalizer</strong> <I>N<sub><var>S</var></sub>( <var>U</var> )</I>  of <var>U</var> in  <var>S</var> is the biggest subgroup
of <var>S</var> which leaves <var>U</var> invariant under conjugation.
<P>
If <var>S</var>  is  the parent group of   <var>U</var>  then <code>Normalizer</code>  sets and  tests
<code><var>U</var>.normalizer</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> c2 := Subgroup( s4, [ (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2) ] )
    gap> Normalizer( s4, c2 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (3,4), (1,2) ] )</pre>
<P>
The  default  function   <code>GroupOps.Normalizer</code>  uses    <code>Stabilizer</code> (see
<a href="chap008.htm#SECT024">Stabilizer</a>) in order to compute the stabilizer of <var>U</var> in  <var>S</var> acting by
conjugation (see <a href="chap007.htm#SECT020">ConjugateSubgroup</a>).
<P><A NAME="SECT028"><h2>7.28 PCore</h2></a>
<P><P><P>
<code>PCore( <var>G</var>, <var>p</var> )</code>
<P>
<code>PCore</code> returns the <var>p</var>-core of the finite group <var>G</var> for a prime <var>p</var>.
<P>
The <var>p</var>-core is the largest normal subgroup whose size is a power of <var>p</var>.
This   is  the  core   of  the  Sylow-<var>p</var>-subgroups   (see   <a href="chap007.htm#SECT021">Core</a>   and
<a href="chap007.htm#SECT031">SylowSubgroup</a>).
<P>
Note that <code>PCore</code> sets and tests <code><var>G</var>.pCores[ <var>p</var> ]</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> PCore( s4, 2 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,4)(2,3), (1,3)(2,4) ] )
    gap> PCore( s4, 3 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [  ] ) </pre>
<P>
The default function <code>GroupOps.PCore</code> computes  the <var>p</var>-core as  the core
of a Sylow-<var>p</var>-subgroup (see <a href="chap007.htm#SECT021">Core</a> and <a href="chap007.htm#SECT031">SylowSubgroup</a>).
<P><A NAME="SECT029"><h2>7.29 PrefrattiniSubgroup</h2></a>
<P><P><P>
<code>PrefrattiniSubgroup( <var>G</var> )</code> 
<P>
<code>PrefrattiniSubgroup</code> returns a Prefrattini subgroup of the group <var>G</var>.
<P>
A factor <I>M/N</I> of <I>G</I> is called a Frattini factor if <I>M/N  &le; &phi;(G/N)</I>
holds.  The group <I>P</I> is a Prefrattini subgroup of <I>G</I> if <I>P</I> covers each
Frattini chief factor  of <I>G</I>, and  if for each  maximal subgroup  of <I>G</I>
there exists a conjugate maximal subgroup, which contains <I>P</I>.
<P>
<pre>    gap> s4 := SymmetricGroup( AgWords, 4 );;
    gap> ss4 := SpecialAgGroup( s4 );;
    gap> PrefrattiniSubgroup( ss4 );
    Subgroup( Group( g1, g2, g3, g4 ), [  ] ) </pre>
<P>
Currently <code>PrefrattiniSubgroup</code> can only be applied to special Ag groups
(see <a href="chap026.htm">Special Ag Groups</a>).
<P><A NAME="SECT030"><h2>7.30 Radical</h2></a>
<P><P><P>
<code>Radical( <var>G</var> )</code>
<P>
<code>Radical</code> returns the radical of the finite group <var>G</var>.
<P>
The radical is the largest normal solvable subgroup of <var>G</var>.
<P>
<pre>    gap> g := Group( (1,5), (1,5,6,7,8)(2,3,4) );
    Group( (1,5), (1,5,6,7,8)(2,3,4) )
    gap> Radical( g );
    Subgroup( Group( (1,5), (1,5,6,7,8)(2,3,4) ), [ ( 2, 3, 4) ] )</pre>
<P>
The default function  <code>GroupOps.Radical</code>  tests if  <var>G</var>  is  solvable and
signals an error if not.
<P><A NAME="SECT031"><h2>7.31 SylowSubgroup</h2></a>
<P><P><P>
<code>SylowSubgroup( <var>G</var>, <var>p</var> )</code>
<P>
<code>SylowSubgroup</code> returns a Sylow-<var>p</var>-subgroup of the finite group  <var>G</var> for
a prime <var>p</var>.
<P>
Let <var>p</var> be a prime and <var>G</var> be a finite group of order <I>&lt;p&gt;<sup>n</sup> m</I> where <I>m</I>
is relative prime to <var>p</var>. Then by Sylow's theorem there  exists at least
one subgroup <I>S</I> of <var>G</var> of order <I>&lt;p&gt;<sup>n</sup></I>.
<P>
Note that <code>SylowSubgroup</code> sets and tests <code><var>G</var>.sylowSubgroups[ <var>p</var> ]</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> SylowSubgroup( s4, 2 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (3,4), (1,2), (1,3)(2,4) ] )
    gap> SylowSubgroup( s4, 3 );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (2,3,4) ] ) </pre>
<P>
The  default  function   <code>GroupOps.SylowSubgroup</code> computes  the   set  of
elements of  <var>p</var> power  order  of <var>G</var>,  starts  with such an element   of
maximal order and computes the  closure (see  <a href="chap007.htm#SECT018">Closure</a>) with normalizing
elements of <var>p</var> power order until a Sylow group is found.
<P><A NAME="SECT032"><h2>7.32 TrivialSubgroup</h2></a>
<P><P><P>
<code>TrivialSubgroup( <var>U</var> )</code>
<P>
Let <var>U</var> be a group with parent group <I>G</I>. Then  <code>TrivialSubgroup</code> returns
the trivial subgroup <I>T</I> of <var>U</var>. Note that the parent group of <I>T</I> is <I>G</I>
not <var>U</var> (see <a href="chap007.htm#SECT014">Subgroups</a>).
<P>
The default function <code>GroupOps.TrivialSubgroup</code> binds the set of elements
of <var>U</var>, namely <I>[ <var>U</var>.identity ]</I>, to <code><I>T</I>.elements</code>,
<P><A NAME="SECT033"><h2>7.33 FactorGroup</h2></a>
<P><P><P>
<code>FactorGroup( <var>G</var>, <var>N</var> )</code>
<P>
<code>FactorGroup</code> returns the factor group <I>&lt;G&gt; /  <var>N</var></I>  where <var>N</var> must  be a
normal subgroup of <var>G</var> (see <a href="chap007.htm#SECT058">IsNormal</a>).  This is the same as <code><var>G</var> / <var>N</var></code>
(see <a href="chap007.htm#SECT117">Operations for Groups</a>).
<P>
<code>NaturalHomomorphism</code> returns the  natural  homomorphism  from  <var>G</var> (or a
subgroup thereof) onto the factor group (see <a href="chap007.htm#SECT110">NaturalHomomorphism</a>).
<P>
It is not specified how the factor group <var>N</var> is represented.
<P>
<pre>    gap> a4 := Group( (1,2,3), (2,3,4) );;  a4.name := "a4";
    "a4"
    gap> v4 := Subgroup(a4,[(1,2)(3,4),(1,3)(2,4)]);;  v4.name := "v4";
    "v4"
    gap> f := FactorGroup( a4, v4 );
    (a4 / v4)
    gap> Size( f );
    3
    gap> Elements( f );
    [ FactorGroupElement( v4, () ), FactorGroupElement( v4, (2,3,4) ), 
      FactorGroupElement( v4, (2,4,3) ) ] </pre>
<P>
If <var>G</var> is the parent group of  <var>N</var>,  <code>FactorGroup</code>  first checks  for the
knowledge  component  <code><var>N</var>.factorGroup</code>.   If  this component  is  bound,
<code>FactorGroup</code>  returns  its   value.    Otherwise,   <code>FactorGroup</code>  calls
<code><var>G</var>.operations.FactorGroup( <var>G</var>, <var>N</var> )</code>, remembers the returned value in
<code><var>N</var>.factorGroup</code>,  and returns it.  If  <var>G</var>  is not  the parent group of
<var>N</var>,  <code>FactorGroup</code> calls  <code><var>G</var>.operations.FactorGroup(  <var>G</var>, <var>N</var> )</code>  and
returns this value.
<P>
The  default  function  called this way  is  <code>GroupOps.FactorGroup</code>.   It
returns the  factor  group  as a  group  of  factor group  elements  (see
<a href="chap007.htm#SECT034">FactorGroupElement</a>).  Look under <strong>FactorGroup</strong> in the index to see  for
which groups this function is overlaid.
<P><A NAME="SECT034"><h2>7.34 FactorGroupElement</h2></a>
<P><P><P>
<code>FactorGroupElement( <var>N</var>, <var>g</var> )</code>
<P>
<code>FactorGroupElement</code> returns the coset <code><var>N</var>  * <var>g</var></code> as a group element.
It is not tested  whether  <var>g</var> normalizes <var>N</var>, but <var>g</var> must be an element
of the parent group of <var>N</var>.
<P>
Factor group elements returned by <code>FactorGroupElement</code> are represented by
records.  Those records contain the following components.
<P>
<DL><DT><code>isGroupElement</code>:<DD> <BR> 
        contains <code>true</code>.
</DL><P>
<DL><DT><code>isFactorGroupElement</code>:<DD> <BR> 
        contains <code>true</code>.
</DL><P>
<DL><DT><code>element</code>:<DD> <BR> 
        contains a right coset of <var>N</var> (see <a href="chap007.htm#SECT086">RightCoset</a>).
</DL><P>
<DL><DT><code>domain</code>:<DD> <BR> 
        contains <code>FactorGroupElements</code> (see <a href="chap004.htm#SECT005">Domain</a>).
</DL><P>
<DL><DT><code>operations</code>:<DD> <BR> 
        contains the operations record <code>FactorGroupElementOps</code>.
</DL><P>
All operations for group elements (see  <a href="chap007.htm#SECT003">Operations for  Group Elements</a>)
are available for  factor group elements, e.g., two factor group elements
can be multiplied (provided that they have the same subgroup <var>N</var>).
<P>
<pre>    gap> a4 := Group( (1,2,3), (2,3,4) );;  a4.name := "a4";;
    gap> v4 := Subgroup(a4,[(1,2)(3,4),(1,3)(2,4)]);;  v4.name := "v4";;
    gap> x := FactorGroupElement( v4, (1,2,3) );
    FactorGroupElement( v4, (2,4,3) )
    gap> y := FactorGroupElement( v4, (2,3,4) );
    FactorGroupElement( v4, (2,3,4) )
    gap> x * y;
    FactorGroupElement( v4, () ) </pre>
<P><A NAME="SECT035"><h2>7.35 CommutatorFactorGroup</h2></a>
<P><P><P>
<code>CommutatorFactorGroup( <var>G</var> )</code>
<P>
<code>CommutatorFactorGroup</code> returns  a  group isomorphic  to <var>G</var>/<I>&lt;G&gt;'</I>
where     <I>&lt;G&gt;'</I>    is     the  derived    subgroup   of  <var>G</var>  (see
<a href="chap007.htm#SECT022">DerivedSubgroup</a>).
<P>
<pre>    gap> s4 := AgGroup( Group( (1,2,3,4), (1,2) ) );
    Group( g1, g2, g3, g4 )
    gap> CommutatorFactorGroup( s4 );
    Group( g1 ) </pre>
<P>
The   default   group function   <code>GroupOps.CommutatorFactorGroup</code>    uses
<code>DerivedSubgroup</code>    (see   <a href="chap007.htm#SECT022">DerivedSubgroup</a>)   and  <code>FactorGroup</code>  (see
<a href="chap007.htm#SECT033">FactorGroup</a>) in order to compute the commutator factor group.
<P><A NAME="SECT036"><h2>7.36 Series of Subgroups</h2></a>
<P><P><P>
The following sections describe functions that compute and  return series
of subgroups of a given group (see <a href="chap007.htm#SECT037">DerivedSeries</a>, <a href="chap007.htm#SECT041">LowerCentralSeries</a>,
<a href="chap007.htm#SECT043">SubnormalSeries</a>, and <a href="chap007.htm#SECT044">UpperCentralSeries</a>).  The series are returned as
lists of subgroups of the group (see <a href="chap007.htm#SECT006">More about Groups and Subgroups</a>).
<P>
These  functions  print warnings  if the argument  is an infinite  group,
because they may run forever.
<P><A NAME="SECT037"><h2>7.37 DerivedSeries</h2></a>
<P><P><P>
<code>DerivedSeries( <var>G</var> )</code>
<P>
<code>DerivedSeries</code> returns the derived series of <var>G</var>.
<P>
The <strong>derived series</strong>  is the series  of iterated derived  subgroups.  The
group <var>G</var> is solvable  if and only if this  series reaches  <I>{1}</I> after
finitely many steps.
<P>
Note that this function does  not terminate  if <var>G</var>  is an infinite group
with derived  series of  infinite  length. 
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> DerivedSeries( s4 );
    [ Group( (1,2,3,4), (1,2) ), Subgroup( Group( (1,2,3,4), (1,2) ), 
        [ (1,3,2), (1,4,3) ] ), Subgroup( Group( (1,2,3,4), (1,2) ), 
        [ (1,4)(2,3), (1,3)(2,4) ] ), 
      Subgroup( Group( (1,2,3,4), (1,2) ), [  ] ) ] </pre>
<P>
The default function <code>GroupOps.DerivedSeries</code> uses <code>DerivedSubgroup</code> (see
<a href="chap007.htm#SECT022">DerivedSubgroup</a>) in order to compute the derived series of <var>G</var>.
<P><A NAME="SECT038"><h2>7.38 CompositionSeries</h2></a>
<P><P><P>
<code>CompositionSeries( <var>G</var> )</code>
<P>
<code>CompositionSeries</code>  returns  a composition  series  of <var>G</var>  as  list  of
subgroups.
<P>
<pre>    gap> s4 := SymmetricGroup( 4 );
    Group( (1,4), (2,4), (3,4) )
    gap> s4.name := "s4";;
    gap> CompositionSeries( s4 );
    [ Subgroup( s4, [ (1,2), (1,3,2), (1,3)(2,4), (1,2)(3,4) ] ),
      Subgroup( s4, [ (1,3,2), (1,3)(2,4), (1,2)(3,4) ] ),
      Subgroup( s4, [ (1,3)(2,4), (1,2)(3,4) ] ),
      Subgroup( s4, [ (1,2)(3,4) ] ), Subgroup( s4, [  ] ) ]
    gap> d8 := SylowSubgroup( s4, 2 );
    Subgroup( s4, [ (1,2), (3,4), (1,3)(2,4) ] )
    gap> CompositionSeries( d8 );
    [ Subgroup( s4, [ (1,3)(2,4), (1,2), (3,4) ] ),
      Subgroup( s4, [ (1,2), (3,4) ] ), Subgroup( s4, [ (3,4) ] ),
      Subgroup( s4, [  ] ) ] </pre>
<P>
Note  that there  is no  default  function.  <code>GroupOps.CompositionSeries</code>
signals an error if called.
<P><A NAME="SECT039"><h2>7.39 ElementaryAbelianSeries</h2></a>
<P><P><P>
<code>ElementaryAbelianSeries( <var>G</var> )</code>
<P>
Let <var>G</var> be  a solvable  group  (see  <a href="chap007.htm#SECT061">IsSolvable</a>).   Then the  functions
returns a normal series <I>G = E<sub>0</sub>, E<sub>1</sub>, ..., E<sub>n</sub> = {1}</I> of <var>G</var> such that
the factor groups <I>E<sub>i</sub> / E<sub>i+1</sub></I> are elementary abelian groups.
<P>
<pre>    gap> s5 := SymmetricGroup( 5 );; s5.name := "s5";;
    gap> s4 := Subgroup( s5, [ (2,3,4,5), (2,3) ] );
    Subgroup( s5, [ (2,3,4,5), (2,3) ] )
    gap> ElementaryAbelianSeries( s4 );
    [ Subgroup( s5, [ (2,3), (2,4,3), (2,5)(3,4), (2,3)(4,5) ] ),
      Subgroup( s5, [ (2,4,3), (2,5)(3,4), (2,3)(4,5) ] ),
      Subgroup( s5, [ (2,5)(3,4), (2,3)(4,5) ] ), Subgroup( s5, [  ] ) ] </pre>
<P>
The  default  function <code>GroupOps.ElementaryAbelianSeries</code> uses  <code>AgGroup</code>
(see <a href="chap025.htm#SECT025">AgGroup</a>) in order to  convert <var>G</var> into  an isomorphic ag group and
computes   the  elementary   abelian   series   in   this   group.   (see
<a href="chap025.htm#SECT009">Group Functions for Ag Groups</a>).
<P><A NAME="SECT040"><h2>7.40 JenningsSeries</h2></a>
<P><P><P>
<code>JenningsSeries( <var>G</var>, <var>p</var> )</code>
<P>
<code>JenningsSeries</code> returns the Jennings series of a <I>p</I>-group <var>G</var>.
<P>
The <strong>Jennings series</strong> of  a <I>p</I>-group <var>G</var> is defined as follows.  <I>S<sub>1</sub>  =
G</I> and <I>S<sub>n</sub>  = [ S<sub>n-1</sub>, G ] S<sub>i</sub><sup>p</sup></I> where <I>i</I> is the  smallest integer
equal or greater than  <I>n / p</I>.  The length  <I>l</I> of  <I>S</I> is  the smallest
integer such  that  <I>S<sub>l</sub>  = {  1  }</I>.
<P>
Note that <I>S<sub>n</sub> = S<sub>n+1</sub></I> is possible.
<P>
<pre>    gap> G := CyclicGroup( AgWords, 27 );
    Group( c27_1, c27_2, c27_3 )
    gap> G.name := "G";;
    gap> JenningsSeries( G );
    [ G, Subgroup( G, [ c27_2, c27_3 ] ), Subgroup( G, [ c27_2, c27_3 ] ),
      Subgroup( G, [ c27_3 ] ), Subgroup( G, [ c27_3 ] ),
      Subgroup( G, [ c27_3 ] ), Subgroup( G, [ c27_3 ] ),
      Subgroup( G, [ c27_3 ] ), Subgroup( G, [ c27_3 ] ),
      Subgroup( G, [  ] ) ] </pre>
<P><A NAME="SECT041"><h2>7.41 LowerCentralSeries</h2></a>
<P><P><P>
<code>LowerCentralSeries( <var>G</var> )</code>
<P>
<code>LowerCentralSeries</code> returns the lower central series of <var>G</var> as a list of
group records.
<P>
The  <strong>lower central series</strong>  is  the series defined  by  <I>S<sub>1</sub> = <var>G</var></I>  and
<I>S<sub>i</sub> = [  <var>G</var>, S<sub>i-1</sub> ]</I>.   The group <var>G</var>  is  nilpotent  if this series
reaches <I>{1}</I> after finitely many steps.
<P>
Note that  this function may not terminate  if <var>G</var> is an  infinite group.
<code>LowerCentralSeries</code>     sets  and  tests    the     record     component
<code><var>G</var>.lowerCentralSeries</code> in the group record of <var>G</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> LowerCentralSeries( s4 );
    [ Group( (1,2,3,4), (1,2) ), Subgroup( Group( (1,2,3,4), (1,2) ), 
        [ (1,3,2), (2,4,3) ] ) ] </pre>
<P>
The   default    group   function     <code>GroupOps.LowerCentralSeries</code>  uses
<code>CommutatorSubgroup</code> (see <a href="chap007.htm#SECT019">CommutatorSubgroup</a>)  in  order to compute the
lower central series of <var>G</var>.
<P><A NAME="SECT042"><h2>7.42 PCentralSeries</h2></a>
<P><P><P>
<code>PCentralSeries( <var>G</var>, <var>p</var> )</code>
<P>
<code>PCentralSeries</code> returns the  <var>p</var>-central  series  of  a  group <var>G</var> for a
prime <var>p</var>.
<P>
The <strong>p-central series</strong> of a group  <var>G</var> is defined as  follows.  <I>S<sub>1</sub> = G</I>
and <I>S<sub>i+1</sub></I> is set to <I>[G,S<sub>i</sub>] * S<sub>i</sub><sup>p</sup></I>.  The length of this series is
<I>n</I>, where <I>n = max{ i ; S<sub>i</sub> &gt; S<sub>i+1</sub> }</I>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );; s4.name := "s4";;
    gap> PCentralSeries( s4, 3 );
    [ s4 ]
    gap> PCentralSeries( s4, 2 );
    [ s4, Subgroup( s4, [ (1,2,3), (1,3,4) ] ) ] </pre>
<P><A NAME="SECT043"><h2>7.43 SubnormalSeries</h2></a>
<P><P><P>
<code>SubnormalSeries( <var>G</var>, <var>U</var> )</code>
<P>
Let <var>U</var> be a subgroup of <var>G</var>, then <code>SubnormalSeries</code> returns  a subnormal
series <I>&lt;G&gt; = G<sub>1</sub>  &gt; ... &gt; G<sub>n</sub></I> of  groups such that  <var>U</var> is contained in
<I>G<sub>n</sub></I> and there exists no proper subgroup <I>V</I> between <I>G<sub>n</sub></I> and <var>U</var> which
is normal in <I>G<sub>n</sub></I>.
<P>
<I>G<sub>n</sub></I> is equal to <var>U</var> if and only if <var>U</var> is <strong>subnormal</strong> in <var>G</var>.
<P>
Note that this function  may not terminate if  <var>G</var>  is an infinite group.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> c2 := Subgroup( s4, [ (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2) ] )
    gap> SubnormalSeries( s4, c2 );
    [ Group( (1,2,3,4), (1,2) ) ]
    gap> IsSubnormal( s4, c2 );
    false
    gap> c2 := Subgroup( s4, [ (1,2)(3,4) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2)(3,4) ] )
    gap> SubnormalSeries( s4, c2 );
    [ Group( (1,2,3,4), (1,2) ), Subgroup( Group( (1,2,3,4), (1,2) ), 
        [ (1,2)(3,4), (1,3)(2,4) ] ),
      Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2)(3,4) ] ) ]
    gap> IsSubnormal( s4, c2 );
    true </pre>
<P>
The default function <code>GroupOps.SubnormalSeries</code> constructs  the subnormal
series as follows.  <I>G<sub>1</sub> = G</I> and <I>G<sub>i+1</sub></I> is  set to the normal closure
(see <a href="chap007.htm#SECT025">NormalClosure</a>) of <var>U</var> under  <I>G<sub>i</sub></I>.  The length of  the series  is
<I>n</I>, where <I>n = max{i; G<sub>i</sub> &gt; G<sub>i+1</sub>}</I>.
<P><A NAME="SECT044"><h2>7.44 UpperCentralSeries</h2></a>
<P><P><P>
<code>UpperCentralSeries( <var>G</var> )</code>
<P>
<code>UpperCentralSeries</code> returns the upper central series of <var>G</var> as a list of
subgroups.
<P>
The <strong>upper central series</strong> is the series <I>S<sub>n</sub>,  ..., S<sub>0</sub></I> defined by <I>S<sub>0</sub>
= {1} &lt; <var>G</var></I> and <I>S<sub>i</sub>/S<sub>i-1</sub> = Z( <var>G</var>/S<sub>i-1</sub> )</I> where <I>n = min{ i ;
S<sub>i</sub> = S<sub>i+1</sub> }</I>
<P>
Note that this function may  not  terminate  if <var>G</var> is an infinite group.
<code>UpperCentralSeries</code> sets and tests <code><var>G</var>.upperCentralSeries</code> in the group
record of <var>G</var>.
<P>
<pre>    gap> d8 := AgGroup( Group( (1,2,3,4), (1,2)(3,4) ) );
    Group( g1, g2, g3 )
    gap> UpperCentralSeries( d8 );
    [ Group( g1, g2, g3 ), Subgroup( Group( g1, g2, g3 ), [ g3 ] ), 
      Subgroup( Group( g1, g2, g3 ), [  ] ) ] </pre>
<P><A NAME="SECT045"><h2>7.45 Properties and Property Tests</h2></a>
<P><P><P>
The    following sections describe  the functions   that computes or test
properties  of groups (see <a href="chap007.htm#SECT046">AbelianInvariants</a>, <a href="chap007.htm#SECT047">DimensionsLoewyFactors</a>,
<a href="chap007.htm#SECT048">EulerianFunction</a>,   <a href="chap007.htm#SECT049">Exponent</a>,  <a href="chap007.htm#SECT050">Factorization</a>, <a href="chap007.htm#SECT051">Index</a>, <a href="chap007.htm#SECT052">IsAbelian</a>,
<a href="chap007.htm#SECT053">IsCentral</a>,       <a href="chap007.htm#SECT054">IsConjugate</a>,  <a href="chap007.htm#SECT055">IsCyclic</a>,     <a href="chap007.htm#SECT056">IsElementaryAbelian</a>,
<a href="chap007.htm#SECT057">IsNilpotent</a>, <a href="chap007.htm#SECT058">IsNormal</a>,    <a href="chap007.htm#SECT059">IsPerfect</a>,     <a href="chap007.htm#SECT060">IsSimple</a>,  <a href="chap007.htm#SECT061">IsSolvable</a>,
<a href="chap007.htm#SECT062">IsSubgroup</a>,      <a href="chap007.htm#SECT063">IsSubnormal</a>,  <a href="chap007.htm#SECT064">IsTrivial    for Groups</a>,  <a href="chap007.htm#SECT065">GroupId</a>,
<a href="chap007.htm#SECT066">PermutationCharacter</a>).
<P>
All tests expect  a  parent group or  subgroup and  return  <code>true</code> if the
group has the property  and <code>false</code>  otherwise.   Some functions may  not
terminate if the given group has an infinite set of elements.   A warning
may be printed in such cases.
<P>
In   addition  the  set   theoretic  functions  <code>Elements</code>,   <code>Size</code>  and
<code>IsFinite</code>, which are described in  chapter <a href="chap004.htm">Domains</a>,  can be  used  for
groups.  <code>Size</code> (see <a href="chap004.htm#SECT010">Size</a>) returns the order of a group, this is either
a  positive  integer  or the  string ``infinity''.   <code>IsFinite</code>  (see
<a href="chap004.htm#SECT009">IsFinite</a>) returns <code>true</code> if a group is finite and <code>false</code> otherwise.
<P><A NAME="SECT046"><h2>7.46 AbelianInvariants</h2></a>
<P><P><P>
<code>AbelianInvariants( <var>G</var> )</code>
<P>
Let <var>G</var>  be  an  abelian  group.   Then  <code>AbelianInvariants</code> returns  the
abelian invariants of <var>G</var>  as a list of integers.   If <var>G</var> is not abelian
then  the abelian invariants  of the  commutator factor  group of <var>G</var> are
returned.
<P>
Let  <var>G</var>  be  a finitely generated abelian  group.  Then there  exist <I>n</I>
nontrivial subgroups  <I>A<sub>i</sub></I>  of prime  power  order <I>p<sub>i</sub><sup>e<sub>i</sub></sup></I>  and  <I>m</I>
infinite cyclic  subgroups <I>Z<sub>j</sub></I> such that <I>&lt;G&gt;  = A<sub>1</sub> &times; ...  &times;
A<sub>n</sub> &times;  Z<sub>1</sub>  ...   &times;  Z<sub>m</sub></I>.   The  <strong>invariants</strong> of  <var>G</var> are  the
integers <I>p<sub>1</sub><sup>e<sub>1</sub></sup>, ..., p<sub>n</sub><sup>e<sub>n</sub></sup></I> together with <I>m</I> zeros.
<P>
Note that <code>AbelianInvariants</code> tests and sets <code><var>G</var>.abelianInvariants</code>.
<P>
<pre>    gap> AbelianInvariants( AbelianGroup( AgWords, [2,3,4,5,6,9] ) );
    [ 2, 2, 3, 3, 4, 5, 9 ] </pre>
<P>
The  default  function <code>GroupOps.AbelianInvariants</code> requires that  <var>G</var> is
finite.
<P>
Let <var>G</var> be a finite abelian group of  order <I>p<sub>1</sub><sup>e<sub>1</sub></sup>...p<sub>n</sub><sup>e<sub>n</sub></sup></I> where
<I>p<sub>i</sub></I> are distinct  primes.   The default  function constructs  for every
prime <I>p<sub>i</sub></I> the series  <I>&lt;G&gt;, <var>G</var><sup>p<sub>i</sub></sup>,  <var>G</var><sup>p<sub>i</sub><sup>2</sup></sup>, ...</I> and  computes
the abelian invariants using the indices of these groups.
<P><A NAME="SECT047"><h2>7.47 DimensionsLoewyFactors</h2></a>
<P><P><P>
<code>DimensionsLoewyFactors( <var>G</var> )</code>
<P>
Let  <var>G</var>  be  <I>p</I>-group.    Then   <code>DimensionsLoewyFactors</code>  returns  the
dimensions <I>c<sub>i</sub></I> of the Loewy factors of <I>F<sub>p</sub><var>G</var></I>.
<P>
The <strong>Loewy series</strong> of  <I>F<sub>p</sub><var>G</var></I>  is defined as  follows.   Let <I>R</I> be the
Jacobson radical of  the group ring <I>F<sub>p</sub><var>G</var></I>.  The series <I>R<sup>0</sup> = F<sub>p</sub><var>G</var> &gt;
R<sup>1</sup>  &gt; ... &gt; R<sup>l+1</sup> = {1}</I> is  the Loewy series. The  dimensions <I>c<sub>i</sub></I>
are the dimensions of <I>R<sup>i</sup> / R<sup>i+1</sup></I>.
<P>
<pre>    gap> f6 := FreeGroup( 6, "f6" );;
    gap> g := f6 / [ f6.1^3, f6.2^3, f6.3^3, f6.4^3, f6.5^3, f6.6^3,
    >          Comm(f6.3,f6.2)/f6.6^2,  Comm(f6.3,f6.1)/(f6.6*f6.5),
    >          Comm(f6.2,f6.1)/(f6.5*f6.4^2) ];;
    gap> a := AgGroupFpGroup(g);
    Group( f6.1, f6.2, f6.3, f6.4, f6.5, f6.6 )
    gap> DimensionsLoewyFactors(a);      
    [ 1, 3, 9, 16, 30, 42, 62, 72, 87, 85, 87, 72, 62, 42, 30, 16, 9, 3,
      1 ] </pre>
<P>
The  default  function  <code>GroupOps.DimensionsLoewyFactors</code>  computes   the
Jennings series  of  <var>G</var> and uses Jennings thereom in order to  calculate
the dimensions of the Loewy factors.
<P>
Let <I>G = X<sub>1</sub>  &ge;  X<sub>2</sub>  &ge; ...  &ge; X<sub>l</sub> &gt; X<sub>l+1</sub>={1}</I> be the Jennings
series of <I>G</I> (see <a href="chap007.htm#SECT040">JenningsSeries</a>) and  let <I>d<sub>i</sub></I> be  the dimensions of
<I>X<sub>i</sub> / X<sub>i+1</sub></I>.  Then the Jennings polynomial is
<center><table><tr><td><I>
&sum;<sub>i=0</sub><sup>l</sup> c<sub>i</sub> x<sup>i</sup> = &prod;<sub>k=1</sub><sup>l</sup> (1+x<sup>k</sup>+x<sup>2k</sup>+...+x<sup>(p-1)k</sup>)<sup>d<sub>k</sub></sup>.
</I></td></tr></table></center>
<P><A NAME="SECT048"><h2>7.48 EulerianFunction</h2></a>
<P><P><P>
<code>EulerianFunction( <var>G</var>, <var>n</var> )</code> 
<P>
<code>EulerianFunction</code> returns the  number  of <var>n</var>-tuples <I>(g<sub>1</sub>, g<sub>2</sub>,  ...
g<sub>n</sub>)</I> of elements  of the group <var>G</var>  that  generate the  whole group <var>G</var>.
The elements of a tuple need not be different.
<P>
<pre>    gap> s4 := SymmetricGroup( AgWords, 4 );;
    gap> ss4 := SpecialAgGroup( s4 );;
    gap> EulerianFunction( ss4, 1 );
    0
    gap> EulerianFunction( ss4, 2 );
    216
    gap> EulerianFunction( ss4, 3 );
    10080 </pre>
<P>
Currently   <code>EulerianFunction</code> can only  be applied  to special Ag groups
(see <a href="chap026.htm">Special Ag Groups</a>).
<P><A NAME="SECT049"><h2>7.49 Exponent</h2></a>
<P><P><P>
<code>Exponent( <var>G</var> )</code>
<P>
Let <var>G</var> be a finite group.  Then <code>Exponent</code> returns the exponent of <var>G</var>.
<P>
Note that <code>Exponent</code> tests and sets <code><var>G</var>.exponent</code>.
<P>
<pre>    gap> Exponent( Group( (1,2,3,4), (1,2) ) );
    12 </pre>
<P>
The default function <code>GroupOps.Exponent</code> computes all elements of <var>G</var> and
their orders.
<P><A NAME="SECT050"><h2>7.50 Factorization</h2></a>
<P><P><P>
<code>Factorization( <var>G</var>, <var>g</var> )</code>
<P>
Let <var>G</var>  be a group  with generators <I>g<sub>1</sub>, ...,  g<sub>n</sub></I> and let  <var>g</var>  be an
element of <var>G</var>.  <code>Factorization</code> returns a  representation of <var>g</var> as word
in the generators of <var>G</var>.
<P>
The group record  of  <var>G</var> must have a component  <code><var>G</var>.abstractGenerators</code>
which contains a list of <I>n</I> abstract words <I>h<sub>1</sub>, ..., h<sub>n</sub></I>.  Otherwise a
list of <I>n</I> abstract generators is bound to <code><var>G</var>.abstractGenerators</code>. The
function  returns  an  abstract  word   <I>h  = h<sub>i<sub>1</sub></sub><sup>e<sub>1</sub></sup>   *  ...  *
h<sub>i<sub>m</sub></sub><sup>e<sub>m</sub></sup></I> such that <I>g<sub>i<sub>1</sub></sub><sup>e<sub>1</sub></sup> * ... * g<sub>i<sub>m</sub></sub><sup>e<sub>m</sub></sup> = <var>g</var></I>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> Factorization( s4, (1,2,3) );
    x1^3*x2*x1*x2
    gap> (1,2,3,4)^3 * (1,2) * (1,2,3,4) * (1,2);
    (1,2,3) </pre>
<P>
The default group function  <code>GroupOps.Factorization</code> needs a finite group
<var>G</var>.  It computes  the set of  elements of  <var>G</var> using a Dimino algorithm,
together  with  a  representation of   these elements as   words   in the
generators of <var>G</var>.
<P><A NAME="SECT051"><h2>7.51 Index</h2></a>
<P><P><P>
<code>Index( <var>G</var>, <var>U</var> )</code>
<P>
Let <var>U</var> be a subgroup of  <var>G</var>.  Then <code>Index</code> returns the  index of <var>U</var> in
<var>G</var> as an integer.
<P>
Note that <code>Index</code> sets and checks <code><var>U</var>.index</code> if <var>G</var>  is the parent group
of <var>U</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> Index( s4, DerivedSubgroup( s4 ) );
    2 </pre>
<P>
The  default  function  <code>GroupOps.Index</code> needs   a finite  group <var>G</var>.  It
returns the quotient of <code>Size( <var>G</var> )</code> and <code>Size( <var>U</var> )</code>.
<P><A NAME="SECT052"><h2>7.52 IsAbelian</h2></a>
<P><P><P>
<code>IsAbelian( <var>G</var> )</code>
<P>
<code>IsAbelian</code>  returns <code>true</code> if  the  group   <var>G</var> is   abelian and <code>false</code>
otherwise.
<P>
A  group  <var>G</var>  is <strong>abelian</strong> if  and only if  for every  <I>g, h&isin; <var>G</var></I> the
equation <I>g* h = h* g</I> holds.
<P>
Note   that  <code>IsAbelian</code>  sets    and   tests    the   record   component
<code><var>G</var>.isAbelian</code>.  If <var>G</var> is abelian it also  sets <code><var>G</var>.centre</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> IsAbelian( s4 );
    false
    gap> IsAbelian( Subgroup( s4, [ (1,2) ] ) );
    true </pre>
<P>
The default  group   function <code>GroupOps.IsAbelian</code> returns <code>true</code> for   a
group <var>G</var> generated by <I>g<sub>1</sub>,  ..., g<sub>n</sub></I> if <I>g<sub>i</sub></I>  commutes with <I>g<sub>j</sub></I> for
<I>i &gt; j</I>.
<P><A NAME="SECT053"><h2>7.53 IsCentral</h2></a>
<P><P><P>
<code>IsCentral( <var>G</var>, <var>U</var> )</code>
<P>
<code>IsCentral</code> returns <code>true</code> if the group <var>G</var> centralizes the group <var>U</var> and
<code>false</code> otherwise.
<P>
A group <var>G</var>  <strong>centralizes</strong>  a group <var>U</var> if and only if for all <I>g&isin; <var>G</var></I>
and for all <I>u&isin; <var>U</var></I> the equation <I>g* u = u* g</I> holds.  Note that <var>U</var>
need not  to  be a subgroup  of  <var>G</var> but they  must have a  common parent
group.
<P>
Note that <code>IsCentral</code> sets and tests <code><var>U</var>.isCentral</code> if <var>G</var> is the parent
group of <var>U</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> d8 := Subgroup( s4, [ (1,2,3,4), (1,2)(3,4) ] );;
    gap> c2 := Subgroup( s4, [ (1,3)(2,4) ] );;
    gap> IsCentral( s4, c2 );
    false
    gap> IsCentral( d8, c2 );
    true </pre>
<P>
The  default function <code>GroupOps.IsCentral</code>  tests whether <var>G</var> centralizes
<var>U</var> by testing whether the generators of <var>G</var> commutes with the generators
of <var>U</var>.
<P><A NAME="SECT054"><h2>7.54 IsConjugate</h2></a>
<P><P><P>
<code>IsConjugate( <var>G</var>, <var>x</var>, <var>y</var> )</code>
<P>
Let   <var>x</var>  and <var>y</var>   be  elements  of the  parent   group of    <var>G</var>. Then
<code>IsConjugate</code> returns <code>true</code> if <var>x</var> is conjugate  to <var>y</var> under an element
<I>g</I> of <var>G</var> and <code>false</code> otherwise.
<P>
<pre>    gap> s5 := Group( (1,2,3,4,5), (1,2) );
    Group( (1,2,3,4,5), (1,2) )
    gap> a5 := Subgroup( s5, [ (1,2,3), (2,3,4), (3,4,5) ] );
    Subgroup( Group( (1,2,3,4,5), (1,2) ), [ (1,2,3), (2,3,4), (3,4,5) ] )
    gap> IsConjugate( a5, (1,2,3,4,5), (1,2,3,4,5)^2 );
    false
    gap> IsConjugate( s5, (1,2,3,4,5), (1,2,3,4,5)^2 );
    true </pre>
<P>
The  default  function  <code>GroupOps.IsConjugate</code> uses <code>Representative</code> (see
<a href="chap004.htm#SECT015">Representative</a>) in order to check whether <var>x</var> is conjugate to <var>y</var> under
<var>G</var>.
<P><A NAME="SECT055"><h2>7.55 IsCyclic</h2></a>
<P><P><P>
<code>IsCyclic( <var>G</var> )</code>
<P>
<code>IsCyclic</code> returns <code>true</code> if <var>G</var> is cyclic and <code>false</code> otherwise.
<P>
A group <var>G</var> is <strong>cyclic</strong> if and only if there exists an element <I>g&isin; <var>G</var></I>
such that <var>G</var> is generated by <I>g</I>.
<P>
Note that <code>IsCyclic</code> sets and tests the record  component <code><var>G</var>.isCyclic</code>.
<P>
<pre>    gap> z6 := Group( (1,2,3), (4,5) );;
    gap> IsCyclic( z6 );
    true
    gap> z36 := AbelianGroup( AgWords, [ 9, 4 ] );;
    gap> IsCyclic( z36 );
    true </pre>
<P>
The default function <code>GroupOps.IsCyclic</code> returns <code>false</code> if <var>G</var> is not an
abelian  group.   Otherwise   it computes  the   abelian  invariants (see
<a href="chap007.htm#SECT046">AbelianInvariants</a>) if <var>G</var>  is infinite.   If   <var>G</var> is  finite of  order
<I>p<sub>1</sub><sup>e<sub>1</sub></sup> ... p<sub>n</sub><sup>e<sub>n</sub></sup></I>, where <I>p<sub>i</sub></I>  are distinct primes, then  <var>G</var> is
cyclic if and only if each <I>&lt;G&gt;<sup>p<sub>i</sub></sup></I> has index <I>p<sub>i</sub></I> in <var>G</var>.
<P><A NAME="SECT056"><h2>7.56 IsElementaryAbelian</h2></a>
<P><P><P>
<code>IsElementaryAbelian( <var>G</var> )</code>
<P>
<code>IsElementaryAbelian</code> returns  <code>true</code> if  the group  <var>G</var> is an elementary
abelian <I>p</I>-group for a prime <I>p</I> and <code>false</code> otherwise.
<P>
A <I>p</I>-group <var>G</var> is <strong>elementary abelian</strong> if and only if for every <I>g, h&isin;
<var>G</var></I> the equations <I>g* h = h* g</I> and <I>g<sup>p</sup> = 1</I> hold.
<P>
Note       that    the     <code>IsElementaryAbelian</code>     sets   and     tests
<code><var>G</var>.isElementaryAbelian</code>.
<P>
<pre>    gap> z4 := Group( (1,2,3,4) );;
    gap> IsElementaryAbelian( z4 );
    false
    gap> v4 := Group( (1,2)(3,4), (1,3)(2,4) );;
    gap> IsElementaryAbelian( v4 );
    true </pre>
<P>
The default function <code>GroupOps.IsElementaryAbelian</code> returns <code>true</code> if <var>G</var>
is abelian and for some prime <I>p</I> each generator is of order <I>p</I>.
<P><A NAME="SECT057"><h2>7.57 IsNilpotent</h2></a>
<P><P><P>
<code>IsNilpotent( <var>G</var> )</code>
<P>
<code>IsNilpotent</code> returns  <code>true</code> if the  group <var>G</var> is  nilpotent and <code>false</code>
otherwise.
<P>
A group <I>G</I> is <strong>nilpotent</strong> if and only if the lower central series of <I>G</I>
is of finite length and reaches <I>{1}</I>.
<P>
Note   that <code>IsNilpotent</code>   sets   and   tests   the   record   component
<code><var>G</var>.isNilpotent</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> IsNilpotent( s4 );
    false
    gap> v4 := Group( (1,2)(3,4), (1,3)(2,4) );;
    gap> IsNilpotent( v4 );
    true </pre>
<P>
The default   group function  <code>GroupOps.IsNilpotent</code> computes  the  lower
central series  using <code>LowerCentralSeries</code> (see  <a href="chap007.htm#SECT041">LowerCentralSeries</a>) in
order to check whether <var>G</var> is nilpotent.
<P>
If <I>G</I>  has an  infinite set  of  elements  a warning is given,   as this
function does  not stop if  <I>G</I> has  a lower   central series of infinite
length.
<P><A NAME="SECT058"><h2>7.58 IsNormal</h2></a>
<P><P><P>
<code>IsNormal( <var>G</var>, <var>U</var> )</code>
<P>
<code>IsNormal</code> returns <code>true</code> if  the group  <var>G</var> normalizes the group <var>U</var> and
<code>false</code> otherwise.
<P>
A group <var>G</var> <strong>normalizes</strong> a group <var>U</var> if and  only if for every <I>g&isin; <var>G</var></I>
and <I>u&isin; <var>U</var></I> the element <I>u<sup>g</sup></I> is a member of <var>U</var>.  Note  that <var>U</var> need
not be a subgroup of <var>G</var> but they must have a common parent group.
<P>
Note that <code>IsNormal</code> tests and  sets <code><var>U</var>.isNormal</code>  if <var>G</var> is the parent
group of <var>U</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> d8 := Subgroup( s4, [ (1,2,3,4), (1,2)(3,4) ] );;
    gap> c2 := Subgroup( s4, [ (1,3)(2,4) ] );;
    gap> IsNormal( s4, c2 );
    false
    gap> IsNormal( d8, c2 );
    true </pre>
<P>
Let <var>G</var> be a finite group.  Then the default function <code>GroupOps.IsNormal</code>
checks  whether the  conjugate  of  each  generator  of  <var>U</var>  under  each
generator of <var>G</var> is an element of <var>U</var>.
<P>
If   <var>G</var>   is   an    infinite   group,   then   the   default   function
<code>GroupOps.IsNormal</code> checks whether the conjugate of each generator of <var>U</var>
under each generator of <var>G</var> and its inverse is an element of <var>U</var>.
<P><A NAME="SECT059"><h2>7.59 IsPerfect</h2></a>
<P><P><P>
<code>IsPerfect( <var>G</var> )</code>
<P>
<code>IsPerfect</code> returns  <code>true</code>  if  <var>G</var>    is  a perfect group  and  <code>false</code>
otherwise.
<P>
A  group <var>G</var> is <strong>perfect</strong> if  <var>G</var> is equal to  its derived subgroup.  See
<a href="chap007.htm#SECT022">DerivedSubgroup</a>.
<P>
Note that <code>IsPerfect</code> sets and tests <code><var>G</var>.isPerfect</code>.
<P>
<pre>    gap> a4 := Group( (1,2,3), (2,3,4) );
    Group( (1,2,3), (2,3,4) )
    gap> IsPerfect( a4 );
    false
    gap> a5 := Group( (1,2,3), (2,3,4), (3,4,5) );
    Group( (1,2,3), (2,3,4), (3,4,5) )
    gap> IsPerfect( a5 );
    true </pre>
<P>
The default group function <code>GroupOps.IsPerfect</code> checks for a finite group
<var>G</var> the  index of <I>&lt;G&gt;'</I>  (see  <a href="chap007.htm#SECT022">DerivedSubgroup</a>)  in <var>G</var>.  For an
infinite  group it  computes  the  abelian  invariants  of the commutator
factor group (see <a href="chap007.htm#SECT046">AbelianInvariants</a> and <a href="chap007.htm#SECT035">CommutatorFactorGroup</a>).
<P><A NAME="SECT060"><h2>7.60 IsSimple</h2></a>
<P><P><P>
<code>IsSimple( <var>G</var> )</code>
<P>
<code>IsSimple</code> returns <code>true</code> if <var>G</var> is simple and <code>false</code> otherwise.
<P>
A group <var>G</var> is <strong>simple</strong> if and only if <var>G</var>  and  the trivial subgroup are
the only normal subgroups of <var>G</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> IsSimple( DerivedSubgroup( s4 ) );
    false
    gap> s5 := Group( (1,2,3,4,5), (1,2) );
    Group( (1,2,3,4,5), (1,2) )
    gap> IsSimple( DerivedSubgroup( s5 ) );
    true </pre>
<P><A NAME="SECT061"><h2>7.61 IsSolvable</h2></a>
<P><P><P>
<code>IsSolvable( <var>G</var> )</code>
<P>
<code>IsSolvable</code> returns <code>true</code> if  the group  <var>G</var>   is solvable  and <code>false</code>
otherwise.
<P>
A group <I>G</I> is <strong>solvable</strong> if and only if the derived series of  <I>G</I> is of
finite length and reaches <I>{1}</I>.
<P>
Note that <code>IsSolvable</code> sets and tests <code><var>G</var>.isSolvable</code>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> IsSolvable( s4 );
    true </pre>
<P>
The default  function <code>GroupOps.IsSolvable</code> computes  the  derived series
using the function <code>DerivedSeries</code> (see <a href="chap007.htm#SECT037">DerivedSeries</a>)  in order to see
whether <var>G</var> is solvable.
<P>
If  <I>G</I> has  an infinite set   of elements a   warning is given,  as this
function does not stop if <I>G</I> has a derived series of infinite length.
<P><A NAME="SECT062"><h2>7.62 IsSubgroup</h2></a>
<P><P><P>
<code>IsSubgroup( <var>G</var>, <var>U</var> )</code>
<P>
<code>IsSubgroup</code>  returns <code>true</code> if   <var>U</var> is a  subgroup of  <var>G</var> and  <code>false</code>
otherwise.
<P>
Note  that <var>G</var> and  <var>U</var>  must have a common   parent group. This function
returns <code>true</code> if and only if the set of elements of <var>U</var>  is  a subset of
the set of  elements  of <var>G</var>, it  is not the  inverse of <code>IsParent</code>  (see
<a href="chap007.htm#SECT007">IsParent</a>).
<P>
<pre>    gap> s6  := Group( (1,2,3,4,5,6), (1,2) );;
    gap> s4 := Subgroup( s6, [ (1,2,3,4), (1,2) ] );;
    gap> z2 := Subgroup( s6, [ (5,6) ] );;
    gap> IsSubgroup( s4, z2 );
    false
    gap> v4 := Subgroup( s6, [ (1,2)(3,4), (1,3)(2,4) ] );;
    gap> IsSubgroup( s4, v4 );
    true </pre>
<P>
If  the   elements  of  <var>G</var>  are   known,  then   the   default  function
<code>GroupOps.IsSubgroup</code> checks  whether  the set of generators of <var>U</var> is  a
subset of the set of  elements  of  <var>G</var>.   Otherwise the  function checks
whether each generator of <var>U</var> is an element of <var>G</var> using <code>in</code>.
<P><A NAME="SECT063"><h2>7.63 IsSubnormal</h2></a>
<P><P><P>
<code>IsSubnormal( <var>G</var>, <var>U</var> )</code>
<P>
<code>IsSubnormal</code> returns <code>true</code> if the subgroup <var>U</var> of <var>G</var> is subnormal in
<var>G</var> and <code>false</code> otherwise.
<P>
A subgroup <var>U</var> of <var>G</var> is subnormal if and  only  if there exists a series
of subgroups <I>&lt;G&gt; =  G<sub>0</sub> &gt; G<sub>1</sub> &gt;  ...  &gt;  G<sub>n</sub>  = <var>U</var></I> such  that <I>G<sub>i</sub></I> is
normal in <I>G<sub>i-1</sub></I> for all <I>i&isin;{1, ..., n}</I>.
<P>
Note that <var>U</var> must be  a  subgroup of  <var>G</var>. The function  sets and checks
<code><var>U</var>.isSubnormal</code> if <var>G</var> is the parent group of <var>G</var>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> c2 := Subgroup( s4, [ (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2) ] )
    gap> IsSubnormal( s4, c2 );
    false
    gap> c2 := Subgroup( s4, [ (1,2)(3,4) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2)(3,4) ] )
    gap> IsSubnormal( s4, c2 );
    true </pre>
<P>
The default  function  <code>GroupOps.IsSubnormal</code> uses <code>SubnormalSeries</code> (see
<a href="chap007.htm#SECT043">SubnormalSeries</a>) in order to check if <var>U</var> is subnormal in <var>G</var>.
<P><A NAME="SECT064"><h2>7.64 IsTrivial for Groups</h2></a>
<P><P>
<A name = "I14"></a>

<P>
<code>GroupOps.IsTrivial( <var>G</var> )</code>
<P>
<code>GroupOps.IsTrivial</code>  returns <code>true</code>  if  <var>G</var> is the   trivial  group and
<code>false</code> otherwise.
<P>
Note that <var>G</var> is trivial if and only if the component <code>generators</code> of the
group record of <var>G</var> is the empty list.  It is  faster  to check this than
to call <code>IsTrivial</code>.
<P><A NAME="SECT065"><h2>7.65 GroupId</h2></a>
<P><P><P>
<code>GroupId( <var>G</var> )</code>
<P>
For certain   small  groups the function  returns   a  record  which will
identify   the  isomorphism  type    of   <var>G</var>  with  respect  to  certain
classifications.  This record contains the components described below.
<P>
The function will work for all groups of order at most 100 or whose order
is a  product of  at  most  three primes.   Moreover   if the ANU  pq  is
installed and loaded (see <a href="chap057.htm#SECT001">RequirePackage</a> and <a href="chap057.htm#SECT002">ANU  pq Package</a>) you can
also use <code>GroupId</code> to identify groups of order 128, 256, 243 and 729.  In
this  case   a standard    presentation    for  <var>G</var>  is  computed    (see
<a href="chap058.htm#SECT006">StandardPresentation</a>) and the returned record   will only contain   the
components <code>size</code>, <code>pGroupId</code>,  and possibly <code>abelianInvariants</code>.  For 2-
or 3-groups  of order at  most 100 <code>GroupId</code>  will  return the <code>pGroupId</code>
identifier even if the ANU pq is not installed.
<P>
<DL><DT><code>catalogue</code>:<DD> <BR> 
    a pair <I>[o,n]</I> where <I>o</I> is the size of <var>G</var> and  <I>n</I> is the catalogue
    number of <var>G</var> following  the catalogue of groups of order at most 100.
    See   <a href="chap038.htm#SECT007">The  Solvable  Groups Library</a>  for   further  details.   This
    catalogue  uses the Neubueser  list  for groups of  order at most 100,
    excluding groups of orders 64 and 96 (see <A href="biblio.htm#Neu67"><cite>Neu67</cite></a>).  It uses the
    lists developed by <A href="biblio.htm#HS64"><cite>HS64</cite></a> and <A href="biblio.htm#Lau82"><cite>Lau82</cite></a> for  orders 64 and 96
    respectively.<P><BR> 
</DL><P>
    Note that there are minor discrepancies between <I>n</I> and the number in
    <A href="biblio.htm#Neu67"><cite>Neu67</cite></a>  for   abelian groups and   groups   of type <code>D(p,q)xr</code>.
    However, a solvable group <var>G</var> is isomorphic to <code>SolvableGroup(o, n)</code>,
    i.e.,   <code>GroupId(SolvableGroup(o,n)).catalogue</code>        will        be
    <code>[o,n]</code>.<P><BR> 
<P>
    If  <var>G</var> is a 2-  or 3-group of  order at most 100,  its number in the
    appropriate  p-group library is  also  returned.  Note that, for such
    groups, the number <I>n</I>  usually  differs from the p-group  identifier
    returned in <code>pGroupId</code> (see below).
<P>
<DL><DT><code>3primes</code>:<DD> <BR> 
    if <var>G</var> is  non-abelian and its  size  is a  product of at  most three
    primes then <code>3primes</code> holds    an identifier for <var>G</var>.  The  following
    isomorphisms are returned in <code>3primes</code>:<BR> 
        <code>["A",p]</code> = <code>A(p^3)</code>,	      <code>["B",p]</code> = <code>B(p^3)</code>,
        <code>["D",p,q,r]</code> = <code>D(p,q)xr</code>, <BR><code>["D",p,q]</code> = <code>D(p,q)</code>,
        <code>["G",p,q]</code> = <code>G(p^2,q)</code>,    <code>["G",p,q,r,s]</code> = <code>G(p,q,r,s)</code>,<BR> 
        <code>["H",p,q]</code> = <code>H(p^2,q)</code>,    <code>["H",p,q,r]</code> = <code>H(p,q,r)</code>,
        <code>["K",p,q]</code> = <code>K(p,q^2)</code>,  <BR><code>["L",p,q,s]</code> = <code>L(p,q^2,s)</code>,
        <code>["M",p,q]</code> = <code>M(p,q^2)</code>,    <code>["N",p,q]</code> = <code>N(p,q^2)</code><BR> 
    (see <code>names</code> below for a definition of <code>A</code> ... <code>N</code>).
</DL><P>
<DL><DT><code>pGroupId</code>:<DD> <BR> 
    if <var>G</var> is a 2- or 3-group, this will be the number of <var>G</var> in the list
    of 2-groups of order at most 256, prepared by Newman and O'Brien, or
    3-groups of order at most  729, prepared by  O'Brien and Rhodes.  In
    particular, for an integer <I>n</I> and for <I>o</I> a power of  2 at most 256,
    <code>GroupId(TwoGroup(o,n)).pGroupId</code>  is always  <I>n</I> (and similarly  for
    3-groups).  See <a href="chap038.htm#SECT008">The 2-Groups Library</a> and <a href="chap038.htm#SECT009">The 3-Groups Library</a> for
    details about the libraries of 2- and 3-groups.  Note  that if <I>G</I> is
    a 2- or 3-group of order at most 100 its <code>pGroupId</code> usually <strong>differs</strong>
    from its GAP solvable library number returned in <code>catalogue</code>.
</DL><P>
<DL><DT><code>abelianInvariants</code>:<DD> <BR> 
    if <var>G</var> is abelian,  this is a list of abelian invariants.
</DL><P>
<DL><DT><code>names</code>:<DD> <BR> 
    a list of names of <var>G</var>.  For non-abelian groups of order 96 this name
    is that used in the Laue catalogue (see <A href="biblio.htm#Lau82"><cite>Lau82</cite></a>).  For the other
    groups the following symbols  are used. Note that  this list of names
    is neither complete, i.e., most of the groups of order 64 do not have
    a name even if they are of one of the types described below, nor does
    it uniquely determine the group up to isomorphism in some cases.
    <P><BR> 
</DL><P>
    <code>m</code> is the cyclic group of order <I>m</I>, <BR> 
    <code>Dm</code> is the dihedral group of order <I>m</I>, <BR> 
    <code>Qm</code> is the quaternion group of order <I>m</I>, <BR> 
    <code>QDm</code> is the quasi-dihedral group of order <I>m</I>, <BR> 
    <code>Sm</code> is the symmetric group on <I>m</I> points, <BR> 
    <code>Am</code> is the alternating group on <I>m</I> points, <BR> 
    <code>SL(d,q)</code> is the special linear group, <BR> 
    <code>GL(d,q)</code> is the general linear group, <BR> 
    <code>PSL(d,q)</code> is the projective special linear group, <BR> 
    <code>K^n</code> is the direct power of <I>m</I> copies of <I>K</I>, <BR> 
    <code>K\$H</code> is a wreath product of <I>K</I> and <I>H</I>, <BR> 
    <code>K:H</code> is a split extension of <I>K</I> by <I>H</I>, <BR> 
    <code>K.H</code> is a non-split extension of <I>K</I> and <I>H</I>, <BR> 
    <code>K+H</code> is a subdirect product with identified factor groups of <I>K</I> 
          and <I>H</I>, <BR> 
    <code>KYH</code> is a central amalgamated product of the groups <I>K</I> and <I>H</I>, <BR> 
    <code>KxH</code> is the direct product of <I>K</I> and <I>H</I>, <P><BR> 
    <code>A(p^3)</code> is <I>&lang; A, B, C ; A<sup>p</sup> = B<sup>p</sup> = C<sup>p</sup> = [A,B] = [A,C] = 1,
    [B,C] = A &rang;</I>, <P><BR> 
    <code>B(p^3)</code> is <I>&lang; A, B, C ; B<sup>p</sup> = C<sup>p</sup> = A, A<sup>p</sup> = [A,B] = [A,C] =
    1, [B,C] = A &rang;</I>, <P><BR> 
    <code>D(p,q)</code> is <I>&lang; A, B ; A<sup>q</sup> = B<sup>p</sup> = 1, A<sup>B</sup> = A<sup>x</sup> &rang;</I> such
    that <I>p|q-1</I>, <I>x  &ne; 1</I> mod <I>q</I>, and <I>x<sup>p</sup> = 1</I> mod <I>q</I>,
    <P><BR> 
    <code>G(p^2,q)</code> is <I>&lang; A, B, C ; A<sup>p</sup> = B<sup>q</sup> = 1, C<sup>p</sup> = A, [A,B] =
    [A,C] = 1, B<sup>C</sup> = B<sup>x</sup> &rang;</I> such that <I>p|q-1</I>, <I>x  &ne; 1</I> mod
    <I>q</I>, and <I>x<sup>p</sup> = 1</I> mod <I>q</I>, <P><BR> 
    <code>G(p,q,r,s)</code> is <I>&lang; A, B, C ; A<sup>r</sup> = B<sup>q</sup> = C<sup>p</sup> = [A,B] = 1, A<sup>C</sup> =
    A<sup>x</sup>, B<sup>C</sup> = B<sup>(y<sup>s</sup>)</sup> &rang;</I> such that <I>p|q-1</I>, <I>p|r-1</I>, <I>x</I>
    minimal with <I>x  &ne; 1</I> mod <I>r</I> and <I>x<sup>p</sup> = 1</I> mod <I>r</I>, <I>y</I> minimal
    with <I>y  &ne; 1</I> mod <I>q</I> and <I>y<sup>p</sup> = 1</I> mod <I>q</I>, and <I>0 &lt; s &lt;
    p</I>,<P><BR> 
    <code>H(p^2,q)</code> is <I>&lang; A, B ; A<sup>q</sup> = B<sup>(p<sup>2</sup>)</sup> = 1, A<sup>B</sup> = A<sup>x</sup>
    &rang;</I> such that <I>p<sup>2</sup>|q-1</I>, <I>x<sup>p</sup>  &ne; 1</I> mod <I>q</I>, and <I>x<sup>(p<sup>2</sup>)</sup> =
    1</I> mod <I>q</I>, <P><BR> 
    <code>H(p,q,r)</code> is <I>&lang; A, B ; A<sup>r</sup> = B<sup>pq</sup> = 1, A<sup>B</sup> = A<sup>x</sup> &rang;</I>
    such that <I>pq|r-1</I>, <I>x<sup>p</sup>  &ne; 1</I> mod <I>r</I>, <I>x<sup>q</sup>  &ne; 1</I> mod <I>r</I>, and
    <I>x<sup>pq</sup> = 1</I> mod <I>r</I>, <P><BR> 
    <code>K(p,q^2)</code> is <I>&lang; A, B, C ; A<sup>q</sup> = B<sup>q</sup> = C<sup>p</sup> = [A,B] = 1, A<sup>C</sup> =
    A<sup>x</sup>, B<sup>C</sup> = B<sup>x</sup> &rang;</I> such that <I>p|q-1</I>, <I>x  &ne; 1</I> mod <I>q</I>, and
    <I>x<sup>p</sup> = 1</I> mod <I>q</I>, <P><BR> 
    <code>L(p,q^2,s)</code> is <I>&lang; A, B, C ; A<sup>q</sup> = B<sup>q</sup> = C<sup>p</sup> = [A,B] = 1, A<sup>C</sup>
    = A<sup>x</sup>, B<sup>C</sup> = B<sup>(x<sup>s</sup>)</sup> &rang;</I> such that <I>p|q-1</I>, <I>x  &ne; 1</I> mod
    <I>q</I>, <I>x<sup>p</sup> = 1</I> mod <I>q</I>, and <I>1 &lt; s &lt; p</I>, note that
    <code>L(q,p^2,s)</code> <I>&cong;</I> <code>L(q,p^2,t)</code> iff <I>s t = 1</I> mod <I>p</I>, <P><BR> 
    <code>M(p,q^2)</code> is <I>&lang; A, B ; A<sup>(q<sup>2</sup>)</sup> = B<sup>p</sup> = 1, A<sup>B</sup> = A<sup>x</sup>
    &rang;</I> such that <I>p|q-1</I>, <I>x  &ne; 1</I> mod <I>q<sup>2</sup></I>, and <I>x<sup>p</sup> = 1</I> mod
    <I>q<sup>2</sup></I>, <P><BR> 
    <code>N(p,q^2)</code> is <I>&lang; A, B, C ; A<sup>q</sup> = B<sup>q</sup> = C<sup>p</sup> = [A,B] = 1, A<sup>C</sup> =
    A<sup>-1</sup>B, B<sup>C</sup> = A<sup>-1</sup>B<sup>x<sup>q</sup>+x-1</sup> &rang;</I> such that <I>2 &lt; p</I>,
    <I>p|q+1</I>, <I>x</I> is an element of order <I>p</I> mod <I>q<sup>2</sup></I>, <P><BR> 
    <code>^</code> has the strongest,  <code>x</code>  the weakest binding.
<P>
<pre>    gap> q8 := SolvableGroup( 8, 5 );;
    gap> s4 := SymmetricGroup(4);;
    gap> d8 := SylowSubgroup( s4, 2 );;
    gap> GroupId(q8);
    rec(
      catalogue := [ 8, 5 ],
      names := [ "Q8" ],
      3primes := [ "B", 2 ],
      size := 8, 
      pGroupId := 4 )
    gap> GroupId(d8);
    rec(
      catalogue := [ 8, 4 ],
      names := [ "D8" ],
      3primes := [ "A", 2 ],
      size := 8,
      pGroupId := 3 )
    gap> GroupId(s4);
    rec(
      catalogue := [ 24, 15 ],
      names := [ "S4" ],
      size := 24 )
    gap> GroupId(DirectProduct(d8,d8));
    rec(
      catalogue := [ 64, 154 ],
      names := [ "D8xD8" ],
      size := 64,
      pGroupId := 226 )
    gap> GroupId(DirectProduct(q8,d8));
    rec(
      catalogue := [ 64, 155 ],
      names := [ "D8xQ8" ],
      size := 64,
      pGroupId := 230 )
    gap> GroupId( WreathProduct( CyclicGroup(2), CyclicGroup(4) ) );
    rec(
      catalogue := [ 64, 250 ],
      names := [  ],
      size := 64,
      pGroupId := 32 )
    gap> f := FreeGroup("c","b","a");; a:=f.3;;b:=f.2;;c:=f.1;;
    gap> r := [ c^5, b^31, a^31, Comm(b,c)/b^7, Comm(a,c)/a, Comm(a,b) ];;
    gap> g := AgGroupFpGroup( f / r );
    Group( c, b, a )
    gap> GroupId(g);
    rec(
      3primes := [ "L", 5, 31, 2 ],
      names := [ "L(5,31^2,2)" ],
      size := 4805 )
    gap> RequirePackage("anupq");
    gap> g := TwoGroup(256,4);
    Group( a1, a2, a3, a4, a5, a6, a7, a8 )
    gap> GroupId(g);
    rec(
      size := 256,
      pGroupId := 4 )
    gap> g := TwoGroup(256,232);
    Group( a1, a2, a3, a4, a5, a6, a7, a8 )
    gap> GroupId(g);
    rec(
      size := 256,
      pGroupId := 232 ) </pre>
<P><A NAME="SECT066"><h2>7.66 PermutationCharacter</h2></a>
<P><P>
<A name = "I15"></a>

<P>
<code>PermutationCharacter( <var>G</var>, <var>U</var> )</code>
<P>
computes the permutation character  of the operation of <var>G</var> on the cosets
of <var>U</var>.  The permutation character is returned  as list of  integers such
that the <I>i</I>.th position contains the  value of the permutation character
on the <I>i</I>.th conjugacy class of <var>G</var> (see <a href="chap007.htm#SECT068">ConjugacyClasses</a>).
<P>
The value of the <strong>permutation character</strong> of <var>U</var>  in <var>G</var> on a class <I>c</I> of
<var>G</var>  is the number of  right  cosets  invariant  under  the action  of an
element of <I>c</I>.
<P>
<pre>    gap> G := SymmetricPermGroup(5);;
    gap> PermutationCharacter( G, SylowSubgroup(G,2) );
    [ 15, 3, 3, 0, 0, 1, 0 ] </pre>
<P>
For  small  groups the default  function  <code>GroupOps.PermutationCharacter</code>
calculates the permutation character by inducing the trivial character of
<var>U</var>.  For  large  groups  it counts the  fixed points by examining double
cosets of <var>U</var> and the subgroup generated by a class element.
<P><A NAME="SECT067"><h2>7.67 Conjugacy Classes</h2></a>
<P><P><P>
The following sections describe how  one can compute conjugacy classes of
elements   and   subgroups  in a    group    (see <a href="chap007.htm#SECT068">ConjugacyClasses</a>  and
<a href="chap007.htm#SECT074">ConjugacyClassesSubgroups</a>).  Further sections   describe how  conjugacy
classes    of    elements are     created   (see  <a href="chap007.htm#SECT069">ConjugacyClass</a>    and
<a href="chap007.htm#SECT071">IsConjugacyClass</a>), and how they are implemented (see <a href="chap007.htm#SECT072">Set Functions for
Conjugacy  Classes</a> and   <a href="chap007.htm#SECT073">Conjugacy  Class Records</a>).  Further  sections
describe  how      classes     of    subgroups   are     created     (see
<a href="chap007.htm#SECT076">ConjugacyClassSubgroups</a> and <a href="chap007.htm#SECT077">IsConjugacyClassSubgroups</a>), and how  they
are implemented (see <a href="chap007.htm#SECT078">Set Functions  for Subgroup Conjugacy Classes</a>  and
<a href="chap007.htm#SECT079">Subgroup  Conjugacy  Class  Records</a>).   Another  section describes  the
function that  returns   a conjugacy  class   of subgroups as  a list  of
subgroups (see <a href="chap007.htm#SECT083">ConjugateSubgroups</a>).
<P><A NAME="SECT068"><h2>7.68 ConjugacyClasses</h2></a>
<P><P><P>
<code>ConjugacyClasses( <var>G</var> )</code>
<P>
<code>ConjugacyClasses</code> returns a list of the conjugacy classes of elements of
the group  <var>G</var>.   The elements in the list returned  are conjugacy  class
domains  as created  by <code>ConjugacyClass</code> (see <a href="chap007.htm#SECT069">ConjugacyClass</a>).  Because
conjugacy classes are domains, all set theoretic functions can be applied
to them (see <a href="chap004.htm">Domains</a>).
<P>
<pre>    gap> a5 := Group( (1,2,3), (3,4,5) );;  a5.name := "a5";;
    gap> ConjugacyClasses( a5 );
    [ ConjugacyClass( a5, () ), ConjugacyClass( a5, (3,4,5) ), 
      ConjugacyClass( a5, (2,3)(4,5) ), ConjugacyClass( a5, (1,2,3,4,5) ), 
      ConjugacyClass( a5, (1,2,3,5,4) ) ] </pre>
<P>
<code>ConjugacyClasses</code> first checks  if <code><var>G</var>.conjugacyClasses</code> is  bound.  If
the component  is  bound,  it  returns  that value.   Otherwise it  calls
<code><var>G</var>.operations.ConjugacyClasses( <var>G</var> )</code>, remembers the returned value in
<code><var>G</var>.conjugacyClasses</code>, and returns it.
<P>
The  default  function  called this  way  is <code>GroupOps.ConjugacyClasses</code>.
This  function takes  random  elements in  <var>G</var> and tests whether  such  a
random element <var>g</var> lies in one of the already known classes.   If it does
not  it  adds   the   new  class   <code>ConjugacyClass(  <var>G</var>,  <var>g</var>   )</code>  (see
<a href="chap007.htm#SECT069">ConjugacyClass</a>).  Also after adding  a new  class it tests  whether any
power  of  the representative gives rise  to a new class.  It returns the
list of classes when the sum of the sizes is equal to the size of <var>G</var>.
<P><A NAME="SECT069"><h2>7.69 ConjugacyClass</h2></a>
<P><P><P>
<code>ConjugacyClass( <var>G</var>, <var>g</var> )</code>
<P>
<code>ConjugacyClass</code> returns the conjugacy class of the  element  <var>g</var> in  the
group  <var>G</var>.  Signals  an  error  if <var>g</var> is not an  element in  <var>G</var>.   The
conjugacy class  is returned as a  domain,  so  that  all  set  theoretic
functions are applicable (see <a href="chap004.htm">Domains</a>).
<P>
<pre>    gap> a5 := Group( (1,2,3), (3,4,5) );;  a5.name := "a5";;
    gap> c := ConjugacyClass( a5, (1,2,3,4,5) );
    ConjugacyClass( a5, (1,2,3,4,5) )
    gap> Size( c );
    12
    gap> Representative( c );
    (1,2,3,4,5)
    gap> Elements( c );
    [ (1,2,3,4,5), (1,2,4,5,3), (1,2,5,3,4), (1,3,5,4,2), (1,3,2,5,4), 
      (1,3,4,2,5), (1,4,3,5,2), (1,4,5,2,3), (1,4,2,3,5), (1,5,4,3,2), 
      (1,5,2,4,3), (1,5,3,2,4) ] </pre>
<P>
<code>ConjugacyClass</code>  calls <code><var>G</var>.operations.ConjugacyClass(  <var>G</var>, <var>g</var> )</code>  and
returns that value.
<P>
The default function called this  way is <code>GroupOps.ConjugacyClass</code>, which
creates a conjugacy class record (see <a href="chap007.htm#SECT073">Conjugacy Class Records</a>) with the
operations record <code>ConjugacyClassOps</code> (see  <a href="chap007.htm#SECT072">Set Functions  for Conjugacy
Classes</a>).   Look  in  the index  under <strong>ConjugacyClass</strong> to see for which
groups this function is overlaid.
<P><A NAME="SECT070"><h2>7.70 PositionClass</h2></a>
<P><P><P>
<code>PositionClass( <var>G</var>, <var>g</var> )</code>
<P>
<var>G</var> must be a domain for which <code>ConjugacyClasses</code> is defined and <var>g</var> must
be an element of <var>G</var>. This functions returns  a positive integer <code>i</code> such
that <code>g in ConjugacyClasses( G )[i]</code>.
<P><P>
<pre>    gap> G := Group( (1,2)(3,4), (1,2,3,4,5) );;
    gap> ConjugacyClasses( G );
    [ ConjugacyClass( Group( (1,2)(3,4), (1,2,3,4,5) ), () ),
      ConjugacyClass( Group( (1,2)(3,4), (1,2,3,4,5) ), (3,4,5) ),
      ConjugacyClass( Group( (1,2)(3,4), (1,2,3,4,5) ), (2,3)(4,5) ),
      ConjugacyClass( Group( (1,2)(3,4), (1,2,3,4,5) ), (1,2,3,4,5) ),
      ConjugacyClass( Group( (1,2)(3,4), (1,2,3,4,5) ), (1,2,3,5,4) ) ]
    gap>  g := Random( G );
    (1,2,5,4,3)
    gap> PositionClass( G, g );
    5 </pre>
<P><A NAME="SECT071"><h2>7.71 IsConjugacyClass</h2></a>
<P><P><P>
<code>IsConjugacyClass( <var>obj</var> )</code>
<P>
<code>IsConjugacyClass</code> returns  <code>true</code> if  <var>obj</var>  is  a  conjugacy  class  as
created by <code>ConjugacyClass</code> (see <a href="chap007.htm#SECT069">ConjugacyClass</a>) and <code>false</code> otherwise.
<P>
<pre>    gap> a5 := Group( (1,2,3), (3,4,5) );;  a5.name := "a5";;
    gap> c := ConjugacyClass( a5, (1,2,3,4,5) );
    ConjugacyClass( a5, (1,2,3,4,5) )
    gap> IsConjugacyClass( c );
    true
    gap> IsConjugacyClass(
    >       [ (1,2,3,4,5), (1,2,4,5,3), (1,2,5,3,4), (1,3,5,4,2),
    >         (1,3,2,5,4), (1,3,4,2,5), (1,4,3,5,2), (1,4,5,2,3),
    >         (1,4,2,3,5), (1,5,4,3,2), (1,5,2,4,3), (1,5,3,2,4) ] );
    false    # even though this is as a set equal to <code>c</code> </pre>
<P><A NAME="SECT072"><h2>7.72 Set Functions for Conjugacy Classes</h2></a>
<P><P><P>
As  mentioned  above,  conjugacy  classes  are  domains,  so  all  domain
functions  are applicable  to  conjugacy  classes (see  <a href="chap004.htm">Domains</a>).  This
section  describes  the functions  that  are  implemented  especially for
conjugacy  classes.   Functions  not  mentioned here  inherit the default
functions mentioned in the respective sections.
<P>
In the following let <var>C</var> be the conjugacy class of the element <var>g</var> in the
group <var>G</var>.
<P>
<P>
<code>Elements( <var>C</var> )</code>
<A name = "I16"></a>

<P>
The elements of the conjugacy class <var>C</var> are computed as  the orbit of <var>g</var>
under <var>G</var>, where <var>G</var> operates by conjugation.
<P>
<P>
<code>Size( <var>C</var> )</code>
<A name = "I17"></a>

<P>
The  size of  the  conjugacy  class <var>C</var>  is computed as the  index of the
centralizer of <var>g</var> in <var>G</var>.
<P>
<P>
<code><var>h</var> in <var>C</var></code>
<A name = "I18"></a>

<P>
To test whether an element <var>h</var> lies in <var>C</var>,  <code>in</code> tests whether there  is
an element of  <var>G</var> that  takes  <var>h</var>  to <var>g</var>.   This  is  done by  calling
<code>RepresentativeOperation(<var>G</var>,<var>h</var>,<var>g</var>)</code> (see <a href="chap008.htm#SECT025">RepresentativeOperation</a>).
<P>
<P>
<code>Random( <var>C</var> )</code>
<A name = "I19"></a>

<P>
A random element of the  conjugacy  class <var>C</var> is  computed by conjugating
<var>g</var> with a random element of <var>G</var>.
<P><A NAME="SECT073"><h2>7.73 Conjugacy Class Records</h2></a>
<P><P><P>
A conjugacy class <var>C</var> of an element <var>g</var> in a group <var>G</var> is represented  by
a record with the following components.
<P>
<DL><DT><code>isDomain</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
<DL><DT><code>isConjugacyClass</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
<DL><DT><code>group</code>:<DD> <BR> 
        holds the group <var>G</var>.
</DL><P>
<DL><DT><code>representative</code>:<DD> <BR> 
        holds the representative <var>g</var>.
</DL><P>
The  following component  is optional.  It is computed and assigned  when
the size of a conjugacy class is computed.
<P>
<DL><DT><code>centralizer</code>:<DD> <BR> 
        holds the centralizer of <var>g</var> in <var>G</var>.
</DL><P><A NAME="SECT074"><h2>7.74 ConjugacyClassesSubgroups</h2></a>
<P><P><P>
<code>ConjugacyClassesSubgroups( <var>G</var> )</code>
<P>
<code>ConjugacyClassesSubgroups</code>  returns a list of  all  conjugacy classes of
subgroups  of the group  <var>G</var>.   The  elements in   the list returned  are
conjugacy class   domains  as created  by <code>ConjugacyClassSubgroups</code>  (see
<a href="chap007.htm#SECT076">ConjugacyClassSubgroups</a>).   Because conjugacy  classes are domains, all
set theoretic functions can be applied to them (see <a href="chap004.htm">Domains</a>).
<P>
In fact, <code>ConjugacyClassesSubgroups</code> computes much  more than it returns,
for      it     calls       (indirectly       via        the     function
<code><var>G</var>.operations.ConjugacyClassesSubgroups( <var>G</var>  )</code>) the <code>Lattice</code> command
(see <a href="chap007.htm#SECT075">Lattice</a>), constructs the whole subgroup lattice  of <var>G</var>, stores it
in the  record component <code><var>G</var>.lattice</code>,   and  finally returns the   list
<code><var>G</var>.lattice.classes</code>. This means, in particular,   that it will fail  if
<var>G</var>  is non-solvable  and  its maximal  perfect  subgroup  is not in  the
built-in catalogue    of  perfect groups (see   the   description  of the
<code>Lattice</code> command <a href="chap007.htm#SECT075">Lattice</a> for details).
<P>
<pre>    gap> # Conjugacy classes of subgroups of S4
    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> s4.name := "s4";;
    gap> cl := ConjugacyClassesSubgroups( s4 );
    [ ConjugacyClassSubgroups( s4, Subgroup( s4, [  ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4, [ (1,2)(3,4) ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4, [ (3,4) ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4, [ (2,3,4) ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4, [ (1,2)(3,4), (1,3)(2,4)
         ] ) ), ConjugacyClassSubgroups( s4, Subgroup( s4,
        [ (3,4), (1,2) ] ) ), ConjugacyClassSubgroups( s4, Subgroup( s4,
        [ (1,2)(3,4), (1,4,2,3) ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4, [ (2,3,4), (3,4) ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4,
        [ (3,4), (1,2), (1,3)(2,4) ] ) ),
      ConjugacyClassSubgroups( s4, Subgroup( s4,
        [ (1,2)(3,4), (1,3)(2,4), (2,3,4) ] ) ),
      ConjugacyClassSubgroups( s4, s4 ) ] </pre>
<P>
Each entry of the resulting list is a domain. As an example, let us take
the seventh class in the above list of conjugacy classes of <I>S<sub>4</sub></I>.
<P>
<pre>    gap> # Conjugacy classes of subgroups of S4 (continued)
    gap> class7 := cl[7];;
    gap> # Print the class representative subgroup.
    gap> rep7 := Representative( class7 );
    Subgroup( s4, [ (1,2)(3,4), (1,4,2,3) ] )
    gap> # Print the order of the class representative subgroup.
    gap> Size( rep7 );
    4
    gap> # Print the number of conjugates.
    gap> Size( class7 );
    3 </pre>
<P><A NAME="SECT075"><h2>7.75 Lattice</h2></a>
<P><P><P>
<code>Lattice( <var>G</var> )</code>
<P>
<code>Lattice</code> returns the lattice of  subgroups of the group <var>G</var> in  the form
of  a record <var>L</var>, say, which contains certain lists with some appropriate
information  on  the  subgroups  of <var>G</var>  and  their conjugacy classes. In
particular, in its component <code><var>L</var>.classes</code>, <var>L</var> provides the same list of
all  conjugacy classes of all  subgroups  of <var>G</var>  as is returned  by  the
<code>ConjugacyClassesSubgroups</code> command (see <a href="chap007.htm#SECT074">ConjugacyClassesSubgroups</a>).
<P>
The construction of the subgroup lattice record <var>L</var> of a group <var>G</var> may be
very time consuming. Therefore, as soon  as <var>L</var> has been computed for the
first  time, it will be  saved as a component <code><var>G</var>.lattice</code> in the  group
record <var>G</var> to avoid any duplication of that effort.
<P>
The  underlying routines are a reimplementation  of the  subgroup lattice
routines which have been developed since 1958 by several  people  in Kiel
and Aachen under the supervision of Joachim  Neub&uuml;ser. Their
final  version, written  by Volkmar Felsch in  1984, has  been  available
since  then in Cayley (see  <A href="biblio.htm#BC92"><cite>BC92</cite></a>) and  has also been used in SOGOS
(see <A href="biblio.htm#Sog89"><cite>Sog89</cite></a>). The current implementation in <strong>GAP3</strong> by  J&uuml;rgen Mnich is  described in <A href="biblio.htm#Mni92"><cite>Mni92</cite></a>, a summary  of  the method and
references to all predecessors can be found in <A href="biblio.htm#FS84"><cite>FS84</cite></a>.
<P>
The <code>Lattice</code>  command invokes the following procedure. In a  first step,
the solvable residuum <var>P</var>, say, of <var>G</var> is computed and looked up in
a  built-in  catalogue  of perfect  groups  which  is  given in the  file
<code>LIBNAME/"lattperf.g"</code>.  A list of  subgroups is  read  off  from  that
catalogue which contains just one representative of  each conjugacy class
of perfect subgroups of <var>P</var> and hence at least one representative of each
conjugacy  class  of perfect  subgroups of  <var>G</var>. Then, starting from  the
identity subgroup and the conjugacy  classes of perfect subgroups, the so
called  <strong>cyclic extension  method</strong> is used  to  compute  the  non-perfect
subgroups of <var>G</var> by forming for each class representative all its not yet
involved  cyclic  extensions  of  prime  number  index and  adding  their
conjugacy classes to the list.
<P>
It is clear that this procedure cannot work  if the  catalogue of perfect
groups  does  not  contain  a  group  isomorphic to  <var>P</var>. At  present, it
contains  only all  perfect  groups  of  order less  than  5000  and,  in
addition, the  groups <I>PSL(3,3)</I>,  <I>M<sub>11</sub></I>, and <I>A<sub>8</sub></I>. If  the <code>Lattice</code>
command is called for a group <var>G</var> with a solvable residuum <var>P</var> not in the
catalogue, it will provide an  error message. As an example we handle the
group <I>SL(2,19)</I> of order 6840.
<P>
<pre>    gap> s := [ [4,0], [0,5] ] * Z( 19 )^0;;
    gap> t := [ [4,4], [-9,-4] ] * Z(19)^0;;
    gap> G := Group( s, t );;
    gap> Size( G );
    6840
    gap> Lattice( G );
    Error, sorry, can' t identify the group's solvable residuum </pre>
<P>
However, if you know  the perfect  subgroups of  <var>G</var>,  you  can  use  the
<code>Lattice</code>  command to compute the whole  subgroup lattice  of <var>G</var> even if
the  solvable residuum of <var>G</var> is not in the catalogue. All you have to do
in  such a case is to create a list of subgroups of <var>G</var> which contains at
least one  representative  of  each  conjugacy class  of  proper  perfect
subgroups of <var>G</var>, attach this list to the group record as a new component
<code><var>G</var>.perfectSubgroups</code>,   and  then  call  the  <code>Lattice</code>  command.   The
existence of  that  record component  will prevent <strong>GAP3</strong> from looking up
the  solvable residuum of  <var>G</var> in  the catalogue. Instead, it will insert
the given subgroups into the lattice, leaving it to you to guarantee that
in fact all conjugacy classes of proper perfect subgroups are involved.
<P>
If you miss  classes, the resulting lattice will  be incomplete,  but you
will not get any warning. As long as you are  aware of this fact, you may
use  this  possibility to compute a sublattice of the subgroup lattice of
<var>G</var>  without  getting  the  above  mentioned  error message  even if  the
solvable residuum of <var>G</var> is not in the catalogue. In particular, you will
get at least  the classes of all proper solvable subgroups of <var>G</var>  if you
define <code><var>G</var>.perfectSubgroups</code> to be an empty list.
<P>
As an example for the computation of the complete lattice of subgroups of
a group which is not covered by the  catalogue,  we  handle  the  Mathieu
group <I>M<sub>12</sub></I>.
<P>
<pre>    gap> # Define the Mathieu group M12.
    gap> a := (2,3,5,7,11,9,8,12,10,6,4);;
    gap> b := (3,6)(5,8)(9,11)(10,12);;
    gap> c := (1,2)(3,4)(5,9)(6,8)(7,12)(10,11);;
    gap> M12 := Group( a, b, c );;
    gap> Print( "#I  M12 has order ", Size( M12 ), "\n" );
    #I  M12 has order 95040
    gap> # Define a list of proper perfect subgroups of M_12 and attach
    gap> # it to the group record M12 as component M12.perfectSubgroups.
    gap> L2_11a := Subgroup( M12, [ a, b ] );;
    gap> M11a   := Subgroup( M12, [ a, b, c*a^-1*b*a*c ] );;
    gap> M11b   := Subgroup( M12, [ a, b, c*a*b*a^-1*c ] );;
    gap> x      := a*b*a^2;;
    gap> y      := a*c*a^-1*b*a*c*a^6;;
    gap> A6a    := Subgroup( M12, [ x, y ] );;
    gap> A5c    := Subgroup( M12, [ x*y, x^3*y^2*x^2*y ] );;
    gap> x      := a^2*b*a;;
    gap> y      := a^6*c*a*b*a^-1*c*a;;
    gap> A6b    := Subgroup( M12, [ x, y ] );;
    gap> A5d    := Subgroup( M12, [ x*y, x^3*y^2*x^2*y ] );;
    gap> x      := a;;
    gap> y      := b*c*b;;
    gap> z      := c;;
    gap> L2_11b := Subgroup( M12, [ x, y, z ] );;
    gap> A5b    := Subgroup( M12, [ y, x*z ] );;
    gap> x      := c;;
    gap> y      := b*a^-1*c*a*b;;
    gap> z      := a^2*b*a^-1*c*a*b*a^-2;;
    gap> A5a    := Subgroup( M12, [ (x*z)^2, (y*z)^2 ] );;
    gap> M12.perfectSubgroups := [
    >   L2_11a, L2_11b, M11a, M11b, A6a, A6b, A5a, A5b, A5c, A5d ];;
    gap> # Now compute the subgroup lattice of M12.
    gap> lat := Lattice( M12 );
    LatticeSubgroups( Group( ( 2, 3, 5, 7,11, 9, 8,12,10, 6, 4), ( 3, 6)
    ( 5, 8)( 9,11)(10,12), ( 1, 2)( 3, 4)( 5, 9)( 6, 8)( 7,12)(10,11) ) )</pre>
<P>
The  <code>Lattice</code>  command  returns  a  record  which   represents  a   very
complicated structure.
<P>
<pre>    gap> # Subgroup lattice of M12 (continued)
    gap> RecFields( lat );
    [ "isLattice", "classes", "group", "printLevel", "operations" ] </pre>
<P>
Probably the  most important component of the lattice  record is the list
<code><var>lat</var>.classes</code>. Its elements are domains.  They are described in section
<a href="chap007.htm#SECT074">ConjugacyClassesSubgroups</a>. We can use this list, for instance, to print
the number of conjugacy  classes of subgroups and the number of subgroups
of <I>M<sub>12</sub></I>.
<P>
<pre>    gap> # Subgroup lattice of M12 (continued)
    gap> n1 := Length( lat.classes );;
    gap> n2 := Sum( [ 1 .. n1 ], i -> Size( lat.classes[i] ) );;
    gap> Print( "#I  M12 has ", n1, " classes of altogether ", n2,
    >   " subgroups\n" );
    #I  M12 has 147 classes of altogether 214871 subgroups </pre>
<P>
It  would not make  sense to  get  all components  of a subgroup  lattice
record   printed  in full detail   whenever we  ask  <strong>GAP3</strong>  to print the
lattice.  Therefore, as  you can see in  the  above example, the  default
printout is just an  expression  of the form  "<code>Lattice(\,<var>group</var>\,)</code>".
However, you can ask <strong>GAP3</strong> to display some additional information in any
subsequent printout  of  the lattice by  increasing  its individual print
level.  This  print level is stored  (in the  form of  a  list of several
print flags) in  the lattice record and can  be changed by an appropriate
call  of the    <code>SetPrintLevel</code>  <A name = "I20"></a>
 command  described
below.
<P>
The  following  example demonstrates the effect  of  the subgroup lattice
print level.
<P>
<pre>    gap> # Subgroup lattice of S4
    gap> s4 := Group( (1,2,3,4), (1,2) );;
    gap> lat := Lattice( s4 );
    LatticeSubgroups( Group( (1,2,3,4), (1,2) ) ) </pre>
<P>
The default subgroup lattice print level is 0. In this case, the
print command provides just the expression mentioned above.
<P>
<pre>    gap> # Subgroup lattice of S4 (continued)
    gap> SetPrintLevel( lat, 1 );
    gap> lat;
    #I  class 1, size 1, length 1
    #I  class 2, size 2, length 3
    #I  class 3, size 2, length 6
    #I  class 4, size 3, length 4
    #I  class 5, size 4, length 1
    #I  class 6, size 4, length 3
    #I  class 7, size 4, length 3
    #I  class 8, size 6, length 4
    #I  class 9, size 8, length 3
    #I  class 10, size 12, length 1
    #I  class 11, size 24, length 1
    LatticeSubgroups( Group( (1,2,3,4), (1,2) ) ) </pre>
<P>
If the  print  level  is  set  to  a  value greater than 0,  you get,  in
addition, for  each class a kind of heading line.  This line contains the
position number  and the length of the respective  class  as well as  the
order of the subgroups in the class.
<P>
<pre>    gap> # Subgroup lattice of S4 (continued)
    gap> SetPrintLevel( lat, 2 );
    gap> lat;
    #I  class 1, size 1, length 1
    #I    representative [  ]
    #I      maximals
    #I  class 2, size 2, length 3
    #I    representative [ (1,2)(3,4) ]
    #I      maximals [ 1, 1 ]
    #I  class 3, size 2, length 6
    #I    representative [ (3,4) ]
    #I      maximals [ 1, 1 ]
    #I  class 4, size 3, length 4
    #I    representative [ (2,3,4) ]
    #I      maximals [ 1, 1 ]
    #I  class 5, size 4, length 1
    #I    representative [ (1,2)(3,4), (1,3)(2,4) ]
    #I      maximals [ 2, 1 ] [ 2, 2 ] [ 2, 3 ]
    #I  class 6, size 4, length 3
    #I    representative [ (3,4), (1,2) ]
    #I      maximals [ 3, 1 ] [ 3, 4 ] [ 2, 1 ]
    #I  class 7, size 4, length 3
    #I    representative [ (1,2)(3,4), (1,4,2,3) ]
    #I      maximals [ 2, 1 ]
    #I  class 8, size 6, length 4
    #I    representative [ (2,3,4), (3,4) ]
    #I      maximals [ 4, 1 ] [ 3, 1 ] [ 3, 2 ] [ 3, 3 ]
    #I  class 9, size 8, length 3
    #I    representative [ (3,4), (1,2), (1,3)(2,4) ]
    #I      maximals [ 7, 1 ] [ 6, 1 ] [ 5, 1 ]
    #I  class 10, size 12, length 1
    #I    representative [ (1,2)(3,4), (1,3)(2,4), (2,3,4) ]
    #I      maximals [ 5, 1 ] [ 4, 1 ] [ 4, 2 ] [ 4, 3 ] [ 4, 4 ]
    #I  class 11, size 24, length 1
    #I    representative [ (1,2,3,4), (1,2) ]
    #I      maximals [ 10, 1 ] [ 9, 1 ] [ 9, 2 ] [ 9, 3 ] [ 8, 1 ]
    [ 8, 2 ] [ 8, 3 ] [ 8, 4 ]
    LatticeSubgroups( Group( (1,2,3,4), (1,2) ) )
    gap> PrintClassSubgroupLattice( lat, 8 );
    #I  class 8, size 6, length 4
    #I    representative [ (2,3,4), (3,4) ]
    #I      maximals [ 4, 1 ] [ 3, 1 ] [ 3, 2 ] [ 3, 3 ] </pre>
<P>
If the subgroup  lattice  print level is   at least 2, <strong>GAP3</strong> prints,  in
addition, for each class representative subgroup a  set of generators and
a  list  of  its maximal  subgroups,  where  each   maximal  subgroup  is
represented by a pair of integers consisting of its  class number and its
position number in that  class. As this  information blows up the output,
it may be convenient to restrict it to a particular class. We can do this
by           calling             the          <code>PrintClassSubgroupLattice</code>
<A name = "I21"></a>
 command described below.
<P>
<pre>    gap> # Subgroup lattice of S4 (continued)
    gap> SetPrintLevel( lat, 3 );
    gap> PrintClassSubgroupLattice( lat, 8 );
    #I  class 8, size 6, length 4
    #I    representative [ (2,3,4), (3,4) ]
    #I      maximals [ 4, 1 ] [ 3, 1 ] [ 3, 2 ] [ 3, 3 ]
    #I    conjugate 2 by (1,4,3,2) is [ (1,2,3), (2,3) ]
    #I    conjugate 3 by (1,2) is [ (1,3,4), (3,4) ]
    #I    conjugate 4 by (1,3)(2,4) is [ (1,2,4), (1,2) ] </pre>
<P>
If the subgroup lattice  print level  has been set to  at least 3, <strong>GAP3</strong>
displays,  in addition, for  each non-representative subgroup of  a class
its   number  in  the  class,  an  element  which  transforms  the  class
representative subgroup into that subgroup, and a set of generators.
<P>
<pre>    gap> # Subgroup lattice of S4 (continued)
    gap> SetPrintLevel( lat, 4 );
    gap> PrintClassSubgroupLattice( lat, 8 );
    #I  class 8, size 6, length 4
    #I    representative [ (2,3,4), (3,4) ]
    #I      maximals [ 4, 1 ] [ 3, 1 ] [ 3, 2 ] [ 3, 3 ]
    #I    conjugate 2 by (1,4,3,2) is [ (1,2,3), (2,3) ]
    #I      maximals [ 4, 2 ] [ 3, 2 ] [ 3, 4 ] [ 3, 5 ]
    #I    conjugate 3 by (1,2) is [ (1,3,4), (3,4) ]
    #I      maximals [ 4, 3 ] [ 3, 1 ] [ 3, 5 ] [ 3, 6 ]
    #I    conjugate 4 by (1,3)(2,4) is [ (1,2,4), (1,2) ]
    #I      maximals [ 4, 4 ] [ 3, 4 ] [ 3, 6 ] [ 3, 3 ] </pre>
<P>
A subgroup lattice print level value of at least 4  causes <strong>GAP3</strong> to list
the maximal  subgroups not only for the  class representatives,  but also
for the other subgroups.
<P>
<pre>    gap> # Subgroup lattice of S4 (continued)
    gap> SetPrintLevel( lat, 5 );
    gap> PrintClassSubgroupLattice( lat, 8 );
    #I  class 8, size 6, length 4
    #I    representative [ (2,3,4), (3,4) ]
    #I      maximals [ 4, 1 ] [ 3, 1 ] [ 3, 2 ] [ 3, 3 ]
    #I      minimals [ 11, 1 ]
    #I    conjugate 2 by (1,4,3,2) is [ (1,2,3), (2,3) ]
    #I      maximals [ 4, 2 ] [ 3, 2 ] [ 3, 4 ] [ 3, 5 ]
    #I      minimals [ 11, 1 ]
    #I    conjugate 3 by (1,2) is [ (1,3,4), (3,4) ]
    #I      maximals [ 4, 3 ] [ 3, 1 ] [ 3, 5 ] [ 3, 6 ]
    #I      minimals [ 11, 1 ]
    #I    conjugate 4 by (1,3)(2,4) is [ (1,2,4), (1,2) ]
    #I      maximals [ 4, 4 ] [ 3, 4 ] [ 3, 6 ] [ 3, 3 ]
    #I      minimals [ 11, 1 ] </pre>
<P>
The  maximal valid value  of the subgroup lattice print level is 5. If it
is set,  <strong>GAP3</strong> displays  not only the  maximal  subgroups, but also  the
minimal supergroups of each subgroup. This is the  most extensive  output
of a subgroup lattice record which you can get with the  <code>Print</code> command,
but of course  you  can use  the <code>RecFields</code> command (see <a href="chap046.htm#SECT013">RecFields</a>) to
list all record components and then  print them out individually  in full
detail.
<P>
If the computation of some subgroup lattice is very time consuming (as in
the above example of the  Mathieu group <I>M<sub>12</sub></I>), you might wish to  see
some intermediate printout which informs you about the  progress  of  the
computation.  In fact, you  can get such messages  by activating a  print
mechanism which has been inserted  into the subgroup lattice routines for
diagnostic purposes. All you have to do is to replace the call
<P>
<code>    lat := Lattice( M12 ); </code>
<P>
by the three calls
<P>
<pre>    InfoLattice1 := Print;
    lat := Lattice( M12 );
    InfoLattice1 := Ignore; </pre>
<A name = "I22"></a>

<P>
Note,  however, that  the  final  numbering of  the  conjugacy classes of
subgroups will  differ  from  the  order  in  which  they  occur  in  the
intermediate  listing  because  they  will  be  reordered  by  increasing
subgroup orders at the end of the construction.
<P>
<P>
<code>PrintClassSubgroupLattice( <var>lattice</var>, <var>n</var> )</code>
<A name = "I23"></a>

<P>
<code>PrintClassSubgroupLattice</code> prints  information on  the  <var>n</var>th  conjugacy
class  of subgroups in the subgroup lattice <var>lattice</var>. The amount of this
information depends on  the  current value of the subgroup  lattice print
level of  <var>lattice</var>.  Note that the default of  that print  level is zero
which   means   that   you   will   not   get   any   output   from   the
<code>PrintClassSubgroupLattice</code>   command   without   increasing   it    (see
<code>SetPrintLevel</code>  below).  Examples are given in  the above description of
the <code>Lattice</code> command.
<P>
<P>
<code>SetPrintLevel( <var>lattice</var>, <var>level</var> )</code>
<A name = "I24"></a>

<P>
<code>SetPrintLevel</code> changes the subgroup  lattice print level of the subgroup
lattice  <var>lattice</var> to  the   specified value  <var>level</var> by   an appropriate
alteration    of   the  list  of   print    flags   which   is stored  in
<code><var>lattice</var>.printLevel</code>.    The  argument <var>level</var> is    expected  to be an
integer between 0 and 5.
<P>
Examples  of the effect of the  subgroup lattice print level are given in
the above description of the <code>Lattice</code> command.
<P><A NAME="SECT076"><h2>7.76 ConjugacyClassSubgroups</h2></a>
<P><P><P>
<code>ConjugacyClassSubgroups( <var>G</var>, <var>U</var> )</code>
<P>
<code>ConjugacyClassSubgroups</code> returns the conjugacy class of the subgroup <var>U</var>
in the group <var>G</var>.  Signals an error if <var>U</var> is not a subgroup of <var>G</var>.  The
conjugacy class is returned as  a domain, so all set  theoretic functions
are applicable (see <a href="chap004.htm">Domains</a>).
<P>
<pre>    gap> s5 := Group( (1,2), (1,2,3,4,5) );;  s5.name := "s5";;
    gap> a5 := DerivedSubgroup( s5 );
    Subgroup( s5, [ (1,2,3), (2,3,4), (3,4,5) ] )
    gap> C := ConjugacyClassSubgroups( s5, a5 );
    ConjugacyClassSubgroups( s5, Subgroup( s5, 
    [ (1,2,3), (2,3,4), (3,4,5) ] ) )
    gap> Size( C );
    1 </pre>
<P>
Another example of such domains is given in section
<a href="chap007.htm#SECT074">ConjugacyClassesSubgroups</a>.
<P>
<code>ConjugacyClassSubgroups</code> calls <BR> 
<code><var>G</var>.operations.ConjugacyClassSubgroups( <var>G</var>, <var>U</var> )</code>
and returns this value.
<P>
The default function called  is <code>GroupOps.ConjugacyClassSubgroups</code>, which
creates a conjugacy class record (see <a href="chap007.htm#SECT079">Subgroup Conjugacy Class Records</a>)
with   the   operations  record  <code>ConjugacyClassSubgroupsOps</code>  (see  <a href="chap007.htm#SECT078">Set
Functions for  Subgroup Conjugacy  Classes</a>).   Look  in the index  under
<strong>ConjugacyClassSubgroups</strong>  to see  for  which  groups  this  function  is
overlaid.
<P><A NAME="SECT077"><h2>7.77 IsConjugacyClassSubgroups</h2></a>
<P><P><P>
<code>IsConjugacyClassSubgroups( <var>obj</var> )</code>
<P>
<code>IsConjugacyClassSubgroups</code> returns <code>true</code> if <var>obj</var> is a  conjugacy class
of   subgroups    as    created    by    <code>ConjugacyClassSubgroups</code>   (see
<a href="chap007.htm#SECT076">ConjugacyClassSubgroups</a>) and <code>false</code> otherwise.
<P>
<pre>    gap> s5 := Group( (1,2), (1,2,3,4,5) );;  s5.name := "s5";;
    gap> a5 := DerivedSubgroup( s5 );
    Subgroup( s5, [ (1,2,3), (2,3,4), (2,4)(3,5) ] )
    gap> c := ConjugacyClassSubgroups( s5, a5 );
    ConjugacyClassSubgroups( s5, Subgroup( s5, 
    [ (1,2,3), (2,3,4), (2,4)(3,5) ] ) )
    gap> IsConjugacyClassSubgroups( c );
    true
    gap> IsConjugacyClassSubgroups( [ a5 ] );
    false    # even though this is as a set equal to <code>c</code> </pre>
<P><A NAME="SECT078"><h2>7.78 Set Functions for Subgroup Conjugacy Classes</h2></a>
<P><P><P>
As mentioned  above,  conjugacy classes of subgroups  are domains, so all
set theoretic functions are also are applicable to conjugacy classes (see
<a href="chap004.htm">Domains</a>).  This section  describes the  functions that  are implemented
especially  for conjugacy  classes.  Functions not mentioned here inherit
the default functions mentioned in the respective sections.
<P>
<P>
<code>Elements( <var>C</var> )</code>
<A name = "I25"></a>

<P>
The elements of  the conjugacy  class <var>C</var> with representative <var>U</var> in  the
group  <var>G</var> are  computed  by  first finding a  right transversal  of  the
normalizer of <var>U</var> in <var>G</var> and by computing the conjugates  of <var>U</var> with the
elements in the right transversal.
<P>
<P>
<code><var>V</var> in <var>C</var></code>
<A name = "I26"></a>

<P>
Membership of a  group <var>V</var> is tested  by comparing  the set  of contained
cyclic  subgroups of prime power order of <var>V</var> with those of the groups in
<var>C</var>.
<P>
<P>
<code>Size( <var>C</var> )</code>
<A name = "I27"></a>

<P>
The size of the  conjugacy class <var>C</var> with representative <var>U</var> in the group
<var>G</var> is computed as the index of the normalizer of <var>U</var> in <var>G</var>.
<P><A NAME="SECT079"><h2>7.79 Subgroup Conjugacy Class Records</h2></a>
<P><P><P>
Each conjugacy class of subgroups <var>C</var> is represented as a  record with at
least the following components.
<P>
<DL><DT><code>isDomain</code>:<DD> <BR> 
        always  <code>true</code>,  because  conjugacy   classes  of  subgroups  are
        domains.
</DL><P>
<DL><DT><code>isConjugacyClassSubgroups</code>:<DD> <BR> 
        as well, this entry is always set to <code>true</code>.
</DL><P>
<DL><DT><code>group</code>:<DD> <BR> 
        The group in which the members of this conjugacy class lie.  This
        is not necessarily a parent group; it may also be a subgroup.
</DL><P>
<DL><DT><code>representative</code>:<DD> <BR> 
        The representative of the conjugacy class of subgroups as domain.
</DL><P>
The following  components are optional and may be bound by some functions
which compute or make use of their value.
<P>
<DL><DT><code>normalizer</code>:<DD> <BR> 
        The normalizer of <code><var>C</var>.representative</code> in <code><var>C</var>.group</code>.
</DL><P>
<DL><DT><code>normalizerLattice</code>:<DD> <BR> 
        A  special  entry  that is  used when  the conjugacy  classes  of
        subgroups  are  computed   by  <code>ConjugacyClassesSubgroups</code>.    It
        determines the normalizer of the  subgroup  <code><var>C</var>.representative</code>.
        It is a list of length 2.  The first element is another conjugacy
        class <var>D</var>  (in the same group), the  second is an element  <var>g</var> in
        <code><var>C</var>.group</code>.   The normalizer  of  <code><var>C</var>.representative</code>  is  then
        <code><var>D</var>.representative ^ <var>g</var></code>.
</DL><P>
<DL><DT><code>conjugands</code>:<DD> <BR> 
        A right transversal of the normalizer  of <code><var>C</var>.representative</code> in
        <code><var>C</var>.group</code>.  Thus the elements of the class <var>C</var> can be  computed
        by conjugating <code><var>C</var>.representative</code> with those elements.
</DL><P><A NAME="SECT080"><h2>7.80 ConjugacyClassesMaximalSubgroups</h2></a>
<P><P><P>
<code>ConjugacyClassesMaximalSubgroups( <var>G</var> )</code> 
<P>
<code>ConjugacyClassesMaximalSubgroups</code> returns a list of conjugacy classes of
maximal subgroups of the group <var>G</var>.
<P>
A subgroup  <I>H</I> of <I>G</I> is  <strong>maximal</strong> if <I>H</I>  is a proper subgroup and for
all subgroups <I>I</I> of <I>G</I> with <I>H &lt; I  &le; G</I> the equality <I>I = G</I> holds.
<P>
<pre>    gap> s4 := SymmetricGroup( AgWords, 4 );;
    gap> ss4 := SpecialAgGroup( s4 );;
    gap> ConjugacyClassesMaximalSubgroups( ss4 );
    [ ConjugacyClassSubgroups( Group( g1, g2, g3, g4 ), Subgroup( Group(
        g1, g2, g3, g4 ), [ g2, g3, g4 ] ) ),
      ConjugacyClassSubgroups( Group( g1, g2, g3, g4 ), Subgroup( Group(
        g1, g2, g3, g4 ), [ g1, g3, g4 ] ) ),
      ConjugacyClassSubgroups( Group( g1, g2, g3, g4 ), Subgroup( Group(
        g1, g2, g3, g4 ), [ g1, g2 ] ) ) ]</pre>
<P>
The generic  method computes the entire lattice  of  conjugacy classes of
subgroups (see <a href="chap007.htm#SECT075">Lattice</a>) and returns the maximal ones.
<P>
<code>MaximalSubgroups</code>   (see <a href="chap007.htm#SECT081">MaximalSubgroups</a>)  computes the   list of all
maximal subgroups.
<P><A NAME="SECT081"><h2>7.81 MaximalSubgroups</h2></a>
<P><P><P>
<code>MaximalSubgroups( <var>G</var> )</code> 
<P>
MaximalSubgroups calculates all maximal  subroups of the special ag group
<var>G</var>.
<P>
<pre>    gap> s4 := SymmetricGroup( AgWords, 4 );;
    gap> ss4 := SpecialAgGroup( s4 );;
    gap> MaximalSubgroups( ss4 );
    [ Subgroup( Group( g1, g2, g3, g4 ), [ g2, g3, g4 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1, g3, g4 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1*g2^2, g3, g4 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1*g2, g3, g4 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1, g2 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1, g2*g3*g4 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1*g4, g2*g4 ] ), 
      Subgroup( Group( g1, g2, g3, g4 ), [ g1*g4, g2*g3 ] ) ]  </pre>
<P>
<code>ConjugacyClassesMaximalSubgroups</code> (see
<a href="chap007.htm#SECT080">ConjugacyClassesMaximalSubgroups</a>) computes the list of conjugacy
classes of maximal subgroups.
<P><A NAME="SECT082"><h2>7.82 NormalSubgroups</h2></a>
<P><P><P>
<code>NormalSubgroups( <var>G</var> )</code>
<P>
<code>NormalSubgroups</code>  returns  a list of all normal subgroups  of <var>G</var>.   The
subgroups are sorted according to their sizes.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );; s4.name := "s4";;
    gap> NormalSubgroups( s4 );
    [ Subgroup( s4, [  ] ), Subgroup( s4, [ (1,2)(3,4), (1,4)(2,3) ] ),
      Subgroup( s4, [ (2,3,4), (1,3,4) ] ), 
      Subgroup( s4, [ (3,4), (1,4), (1,2,4) ] ) ] </pre>
<P>
The  default   function  <code>GroupOps.NormalSubgroups</code>  uses  the  conjugacy
classes of  <var>G</var>  and  normal  closures in order  to  compute  the  normal
subgroups.
<P><A NAME="SECT083"><h2>7.83 ConjugateSubgroups</h2></a>
<P><P><P>
<code>ConjugateSubgroups( <var>G</var>, <var>U</var> )</code>
<P>
<code>ConjugateSubgroups</code> returns   the orbit   of <var>U</var>   under  <var>G</var> acting  by
conjugation (see <a href="chap007.htm#SECT020">ConjugateSubgroup</a>) as  list of subgroups.  <var>U</var> and <var>G</var>
must have a common parent group.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> s3 := Subgroup( s4, [ (1,2,3), (1,2) ] );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2,3), (1,2) ] )
    gap> ConjugateSubgroups( s4, s3 );
    [ Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2,3), (1,2) ] ), 
      Subgroup( Group( (1,2,3,4), (1,2) ), [ (2,3,4), (2,3) ] ), 
      Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,3,4), (3,4) ] ), 
      Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,2,4), (1,4) ] ) ] </pre>
<P><A NAME="SECT084"><h2>7.84 Cosets of Subgroups</h2></a>
<P><P><P>
The following sections  describe how one can compute the right, left, and
double   cosets   of   subgroups   (see    <a href="chap007.htm#SECT085">RightCosets</a>,   <a href="chap007.htm#SECT090">LeftCosets</a>,
<a href="chap007.htm#SECT093">DoubleCosets</a>).  Further sections  describe how cosets are created  (see
<a href="chap007.htm#SECT086">RightCoset</a>, <a href="chap007.htm#SECT087">IsRightCoset</a>, <a href="chap007.htm#SECT091">LeftCoset</a>, <a href="chap007.htm#SECT092">IsLeftCoset</a>,  <a href="chap007.htm#SECT094">DoubleCoset</a>,
and <a href="chap007.htm#SECT095">IsDoubleCoset</a>),  and their implementation   (see <a href="chap007.htm#SECT088">Set Functions for
Right Cosets</a>, <a href="chap007.htm#SECT089">Right Cosets Records</a>, <a href="chap007.htm#SECT096">Set Functions for Double Cosets</a>,
and <a href="chap007.htm#SECT097">Double Coset Records</a>).
<P>
A coset is a <strong>GAP3</strong> domain, which is different from a group.  Altough the
set  of elements of a group and  its trivial coset  are  equal, the group
functions do not take trivial cosets as arguments.  A  trivial coset must
be convert  into a  group using <code>AsGroup</code> (see <a href="chap007.htm#SECT010">AsGroup</a>)  in order to be
used as group.
<P><A NAME="SECT085"><h2>7.85 RightCosets</h2></a>
<P><P>
<A name = "I28"></a>

<P>
<code>Cosets( <var>G</var>, <var>U</var> )</code> <BR> 
<code>RightCosets( <var>G</var>, <var>U</var> )</code>
<P>
<code>Cosets</code> and  <code>RightCosets</code> return  a list of   the right  cosets  of the
subgroup <var>U</var> in the group <var>G</var>.  The  list is not  sorted, i.e., the right
cosets  may  appear in   any  order.  The  right   cosets are domains  as
constructed by <code>RightCoset</code> (see <a href="chap007.htm#SECT086">RightCoset</a>).
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> G.name := "G";;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;
    gap> RightCosets( G, U );
    [ (Subgroup( G, [ (1,2), (3,4) ] )*()), 
      (Subgroup( G, [ (1,2), (3,4) ] )*(2,4,3)), 
      (Subgroup( G, [ (1,2), (3,4) ] )*(2,3)), 
      (Subgroup( G, [ (1,2), (3,4) ] )*(1,2,4,3)), 
      (Subgroup( G, [ (1,2), (3,4) ] )*(1,2,3)), 
      (Subgroup( G, [ (1,2), (3,4) ] )*(1,3)(2,4)) ] </pre>
<P>
If <var>G</var> is  the parent of  <var>U</var>, the dispatcher  <code>RightCosets</code> first checks
whether <var>U</var> has a component <code>rightCosets</code>.  If <var>U</var> has this component, it
returns        that       value.         Otherwise        it        calls
<code><var>G</var>.operations.RightCosets(<var>G</var>,<var>U</var>)</code>,  remembers the  returned value  in
<code><var>U</var>.rightCosets</code> and returns  it.   If  <var>G</var>  is not the parent  of  <var>U</var>,
<code>RightCosets</code>         directly         calls         the         function
<code><var>G</var>.operations.RightCosets(<var>G</var>,<var>U</var>)</code> and returns that value.
<P>
The  default function called  this  way is <code>GroupOps.RightCosets</code>,  which
calls <code>Orbit( <var>G</var>, RightCoset( <var>U</var> ), OnRight  )</code>.  Look up <code>RightCosets</code>
in the index, to see for which groups this function is overlaid.
<P><A NAME="SECT086"><h2>7.86 RightCoset</h2></a>
<P><P>
<A name = "I29"></a>

<A name = "I30"></a>

<P>
<code><var>U</var> * <var>u</var></code> <BR> 
<code>Coset( <var>U</var>, <var>u</var> )</code> <BR> 
<code>RightCoset( <var>U</var>, <var>u</var> )</code> <BR> 
<code>Coset( <var>U</var> )</code> <BR> 
<code>RightCoset( <var>U</var> )</code>
<P>
The first three forms return the right coset of the subgroup <var>U</var> with the
representative <var>u</var>.  <var>u</var> must  lie in the parent  group of <var>U</var>, otherwise
an error is signalled.  In the last two forms the right coset of <var>U</var> with
the identity element of the parent of <var>U</var>  as representative is returned.
In  each case the   right coset is returned as   a domain, so all  domain
functions   are applicable to   right  cosets (see chapter  <a href="chap004.htm">Domains</a> and
<a href="chap007.htm#SECT088">Set Functions for Right Cosets</a>).
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;
    gap> U * (1,2,3);
    (Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2), (3,4) ] )*(1,2,3)) </pre>
<P>
<code>RightCosets</code> (see <a href="chap007.htm#SECT085">RightCosets</a>) computes the set of all right cosets of
a subgroup  in  a group.  <code>LeftCoset</code>   (see <a href="chap007.htm#SECT091">LeftCoset</a>) constructs left
cosets.
<P>
<code>RightCoset</code> calls <code><var>U</var>.operations.RightCoset(  <var>U</var>, <var>u</var>  )</code> and  returns
that value.
<P>
The default  function called this  way  is  <code>GroupOps.RightCoset</code>,  which
creates a  right  coset record  (see  <a href="chap007.htm#SECT089">Right  Cosets  Records</a>) with  the
operations  record  <code>RightCosetGroupOps</code> (see <a href="chap007.htm#SECT088">Set  Functions  for  Right
Cosets</a>).  Look  up the entries for <code>RightCoset</code> in the index  to see for
which groups this function is overlaid.
<P><A NAME="SECT087"><h2>7.87 IsRightCoset</h2></a>
<P><P>
<A name = "I31"></a>

<A name = "I32"></a>

<P>
<code>IsRightCoset( <var>obj</var> )</code> <BR> 
<code>IsCoset( <var>obj</var> )</code>
<P>
<code>IsRightCoset</code> and <code>IsCoset</code> return <code>true</code> if the object <var>obj</var> is a right
coset,  i.e., a  record  with the   component <code>isRightCoset</code> with   value
<code>true</code>, and <code>false</code> otherwise.   Will  signal  an error if  <var>obj</var>   is an
unbound variable.
<P>
<pre>    gap> C := Subgroup( Group( (1,2), (1,2,3) ), [ (1,2,3) ] ) * (1,2);;
    gap> IsRightCoset( C );
    true
    gap> D := (1,2) * Subgroup( Group( (1,2), (1,2,3) ), [ (1,2,3) ] );;
    gap> IsCoset( D );
    false    # note that <var>D</var> is a <strong>left coset</strong> record,
    gap> C = D;
    true     # though as a set, it is of course also a right coset
    gap> IsCoset( 17 );
    false </pre>
<P><A NAME="SECT088"><h2>7.88 Set Functions for Right Cosets</h2></a>
<P><P>
<A name = "I33"></a>

<P>
Right cosets are domains, thus all set theoretic functions are applicable
to cosets (see chapter <a href="chap004.htm">Domains</a>).  The following describes the functions
that  are  implemented  especially  for  right  cosets.    Functions  not
mentioned here inherit the default function  mentioned in the  respective
sections.
<P>
More technically speaking, all  right cosets of  generic groups  have the
operations record <code>RightCosetGroupOps</code>, which inherits its functions from
<code>DomainOps</code>  and overlays   the  components   mentioned below  with  more
efficient functions.
<P>
In the following let <var>C</var> be the coset <code><var>U</var> * <var>u</var></code>.
<P>
<P>
<code>Elements( <var>C</var> )</code>
<A name = "I34"></a>

<P>
To compute the proper set of elements of a right coset <var>C</var> the proper set
of elements of the subgroup  <var>U</var> is computed,  each element is multiplied
by <var>u</var>, and the result is sorted.
<P>
<P>
<code>IsFinite( <var>C</var> )</code>
<A name = "I35"></a>

<P>
This returns the result of applying <code>IsFinite</code> to the subgroup <var>U</var>.
<P>
<P>
<code>Size( <var>C</var> )</code>
<A name = "I36"></a>

<P>
This returns the result of applying <code>Size</code> to the subgroup <var>U</var>.
<P>
<P>
<code><var>C</var> = <var>D</var></code>
<A name = "I37"></a>

<P>
If  <var>C</var> and <var>D</var> are  both right cosets  of the same subgroup, <code>=</code> returns
<code>true</code> if the quotient  of the representatives lies  in the subgroup <var>U</var>,
otherwise the test is delegated to <code>DomainOps.=</code>.
<P>
<P>
<code><var>h</var> in <var>U</var></code>
<P>
If <var>h</var> is an element of  the parent group of <var>U</var>,  this returns <code>true</code> if
the quotient <code><var>h</var> / <var>u</var></code> lies in the subgroup <var>U</var>,  otherwise the test is
delegated to <code>DomainOps.in</code>.
<P>
<P>
<code>Intersection( <var>C</var>, <var>D</var> )</code>
<A name = "I38"></a>

<P>
If <var>C</var> and <var>D</var>  are both right cosets  of subgroups <var>U</var>  and <var>V</var> with the
same parent group the result is a right coset  of the intersection of <var>U</var>
and <var>V</var>.  The representative  is found by   a random search for  a common
element.  In other cases the computation of the intersection is delegated
to <code>DomainOps.Intersection</code>.
<P>
<P>
<code>Random( <var>C</var> )</code>
<A name = "I39"></a>

<P>
This takes a random element of  the subgroup <var>U</var>  and returns the product
of this element by the representative <var>u</var>.
<P>
<P>
<code>Print( <var>C</var> )</code>
<A name = "I40"></a>

<P>
A right coset <var>C</var> is printed as <code>(<var>U</var> * <var>u</var>)</code> (the parenthesis are used
to  avoid confusion about the precedence,  which could occur if the coset
is part of a larger object).
<P>
<P>
<code><var>C</var> * <var>v</var></code>
<A name = "I41"></a>

<P>
If <var>v</var> is an element of the parent group of the  subgroup <var>U</var>, the result
is a new right coset of <var>U</var> with representative <code><var>u</var> * <var>v</var></code>.  Otherwise
the result is obtained by multiplying  the proper set  of elements of <var>C</var>
with the element <var>v</var>, which may signal an error.
<P>
<P>
<code><var>v</var> * <var>C</var></code>
<P>
The result  is obtained by multiplying the  proper set of elements of the
coset <var>C</var> with the element <var>v</var>, which may signal an error.
<P><A NAME="SECT089"><h2>7.89 Right Cosets Records</h2></a>
<P><P>
<A name = "I42"></a>

<P>
A right   coset is represented  by   a domain record  with  the following
tag components.
<P>
<DL><DT><code>isDomain</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
<DL><DT><code>isRightCoset</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
The right coset is determined by the following identity components, which
every right coset record has.
<P>
<DL><DT><code>group</code>:<DD> <BR> 
        the subgroup <var>U</var> of which this right coset is a right coset.
</DL><P>
<DL><DT><code>representative</code>:<DD> <BR> 
        an element of the right coset.  It is unspecified which element.
</DL><P>
In   addition,  a right   coset record may    have the following optional
information components.
<P>
<DL><DT><code>elements</code>:<DD> <BR> 
        if present the proper set of elements of the coset.
</DL><P>
<DL><DT><code>isFinite</code>:<DD> <BR> 
        if present this is <code>true</code> if the coset  is  finite,  and  <code>false</code>
        if the coset is infinite.  If not present it is not known whether
        the coset is finite or infinite.
</DL><P>
<DL><DT><code>size</code>:<DD> <BR> 
        if present the size of the coset.  Is "infinity" if the  coset
        is infinite.  If not present the size of the coset is not known.
</DL><P><A NAME="SECT090"><h2>7.90 LeftCosets</h2></a>
<P><P>
<A name = "I43"></a>

<P>
<code>LeftCosets( <var>G</var>, <var>U</var> )</code>
<P>
<code>LeftCosets</code> returns a list of the left cosets of the subgroup <var>U</var> in the
group <var>G</var>.  The list is not  sorted, i.e., the left  cosets may appear in
any order.  The  left  cosets are domains as constructed  by <code>LeftCosets</code>
(see <a href="chap007.htm#SECT090">LeftCosets</a>).
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> G.name := "G";;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;
    gap> LeftCosets( G, U );
    [ (()*Subgroup( G, [ (1,2), (3,4) ] )),
      ((2,3,4)*Subgroup( G, [ (1,2), (3,4) ] )),
      ((2,3)*Subgroup( G, [ (1,2), (3,4) ] )),
      ((1,3,4,2)*Subgroup( G, [ (1,2), (3,4) ] )),
      ((1,3,2)*Subgroup( G, [ (1,2), (3,4) ] )),
      ((1,3)(2,4)*Subgroup( G, [ (1,2), (3,4) ] )) ] </pre>
<P>
If <var>G</var> is  the parent of  <var>U</var>,  the  dispatcher <code>LeftCosets</code> first checks
whether  <var>U</var> has a component <code>leftCosets</code>.  If <var>U</var> has this component, it
returns      that      value.       Otherwise      <code>LeftCosets</code>     calls
<code><var>G</var>.operations.LeftCosets(<var>G</var>,<var>U</var>)</code>,  remembers the  returned  value  in
<code><var>U</var>.leftCosets</code> and  returns  it.   If  <var>G</var>  is not  the parent  of <var>U</var>,
<code>LeftCosets</code>   calls <code><var>G</var>.operations.LeftCosets(<var>G</var>,<var>U</var>)</code>   directly  and
returns that value.
<P>
The default  function  called this  way is <code>GroupOps.LeftCosets</code>,   which
calls <code>RightCosets( <var>G</var>, <var>U</var> )</code> and turns each right coset  <code><var>U</var> * <var>u</var></code>
into  the  left  coset   <code><var>u</var>^-1 *  <var>U</var></code>.    Look up   the entries for
<code>LeftCosets</code> in the  index,  to  see for  which  groups this function  is
overlaid.
<P><A NAME="SECT091"><h2>7.91 LeftCoset</h2></a>
<P><P>
<A name = "I44"></a>

<P>
<code><var>u</var> * <var>U</var></code> <BR> 
<code>LeftCoset( <var>U</var>, <var>u</var> )</code> <BR> 
<code>LeftCoset( <var>U</var> )</code>
<P>
<code>LeftCoset</code> is exactly like  <code>RightCoset</code>, except that it constructs left
cosets  instead  of   right  cosets.   So  everything  that   applies  to
<code>RightCoset</code> applies also to <code>LeftCoset</code>, with <strong>right</strong> replaced by <strong>left</strong>
(see  <a href="chap007.htm#SECT086">RightCoset</a>,  <a href="chap007.htm#SECT088">Set  Functions  for  Right  Cosets</a>, <a href="chap007.htm#SECT089">Right  Cosets
Records</a>).
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;
    gap> (1,2,3) * U;
    ((1,2,3)*Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2), (3,4) ] )) </pre>
<P>
<code>LeftCosets</code> (see <a href="chap007.htm#SECT090">LeftCosets</a>) computes the set of all  left cosets of a
subgroup in a group.
<P><A NAME="SECT092"><h2>7.92 IsLeftCoset</h2></a>
<P><P>
<A name = "I45"></a>

<P>
<code>IsLeftCoset( <var>obj</var> )</code>
<P>
<code>IsLeftCoset</code> returns <code>true</code> if the object <var>obj</var> is a left coset, i.e., a
record  with the component <code>isLeftCoset</code> with  value <code>true</code>, and  <code>false</code>
otherwise.  Will signal an error if <var>obj</var> is an unbound variable.
<P>
<pre>    gap> C := (1,2) * Subgroup( Group( (1,2), (1,2,3) ), [ (1,2,3) ] );;
    gap> IsLeftCoset( C );
    true
    gap> D := Subgroup( Group( (1,2), (1,2,3) ), [ (1,2,3) ] ) * (1,2);;
    gap> IsLeftCoset( D );
    false    # note that <var>D</var> is a <strong>right coset</strong> record,
    gap> C = D;
    true     # though as a set, it is of course also a left coset
    gap> IsLeftCoset( 17 );
    false </pre>
<P>
<code>IsRightCoset</code> (see <a href="chap007.htm#SECT087">IsRightCoset</a>) tests if an object is a right coset.
<P><A NAME="SECT093"><h2>7.93 DoubleCosets</h2></a>
<P><P>
<A name = "I46"></a>

<P>
<code>DoubleCosets( <var>G</var>, <var>U</var>, <var>V</var> )</code>
<P>
<code>DoubleCosets</code> returns a list of the double cosets  of the  subgroups <var>U</var> and
<var>V</var> in the group  <var>G</var>. The three groups <var>G</var>, <var>U</var> and <var>V</var> must have a common
parent.  The list is  not sorted,  i.e.,  the  double cosets  may appear in
any  order.  The   double cosets  are  domains  as constructed by <code>DoubleCoset</code>
(see <a href="chap007.htm#SECT094">DoubleCoset</a>).
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;  U.name := "U";;
    gap> DoubleCosets( G, U, U );
    [ DoubleCoset( U, (), U ), DoubleCoset( U, (2,3), U ), 
      DoubleCoset( U, (1,3)(2,4), U ) ] </pre>
<P>
<code>DoubleCosets</code> calls   <code><var>G</var>.operations.DoubleCoset( <var>G</var>, <var>U</var>,  <var>V</var> )</code> and
returns that value.
<P>
The default  function called this  way is  <code>GroupOps.DoubleCosets</code>, which
takes random elements from <var>G</var>, tests if this element lies  in one of the
already found double cosets, adds  the double  coset if this is  not  the
case, and continues this until the sum of the  sizes of  the found double
cosets equals the size of  <var>G</var>.  Look up <code>DoubleCosets</code>  in the index, to
see for which groups this function is overlaid.
<P><A NAME="SECT094"><h2>7.94 DoubleCoset</h2></a>
<P><P>
<A name = "I47"></a>

<P>
<code>DoubleCoset( <var>U</var>, <var>u</var>, <var>V</var> )</code>
<P>
<code>DoubleCoset</code>  returns the double coset with  representative <var>u</var> and left
group <var>U</var> and right group <var>V</var>.  <var>U</var> and <var>V</var> must have a common parent and
<var>u</var> must lie  in this parent,  otherwise  an error  is signaled.   Double
cosets are domains,  so all  domain function  are  applicable  to  double
cosets (see chapter <a href="chap004.htm">Domains</a> and <a href="chap007.htm#SECT096">Set Functions for Double Cosets</a>).
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;
    gap> D := DoubleCoset( U, (1,2,3), U );
    DoubleCoset( Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2), (3,4) ] ),
    (1,2,3), Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2), (3,4) ] ) )
    gap> Size( D );
    16 </pre>
<P>
<code>DoubleCosets</code> (see <a href="chap007.htm#SECT093">DoubleCosets</a>) computes the set of all double cosets
of two subgroups in a group.
<P>
<code>DoubleCoset</code> calls <code><var>U</var>.operations.DoubleCoset(<var>U</var>,<var>u</var>,<var>V</var>)</code> and returns
that value.
<P>
The  default function called  this way  is <code>GroupOps.DoubleCoset</code>,  which
creates  a double  coset  record (see  <a href="chap007.htm#SECT097">Double  Coset  Records</a>) with the
operations record <code>DoubleCosetGroupOps</code> (see  <a href="chap007.htm#SECT096">Set  Functions  for Double
Cosets</a>).  Look up  <code>DoubleCosets</code> in  the index to see  for which groups
this function is overlaid.
<P><A NAME="SECT095"><h2>7.95 IsDoubleCoset</h2></a>
<P><P>
<A name = "I48"></a>

<P>
<code>IsDoubleCoset( <var>obj</var> )</code>
<P>
<code>IsDoubleCoset</code> returns <code>true</code>  if the object <var>obj</var>   is a double  coset,
i.e., a record with the component  <code>isDoubleCoset</code> with value <code>true</code>, and
<code>false</code> otherwise.  Will signal an error if <var>obj</var> is an unbound variable.
<P>
<pre>    gap> G := Group( (1,2), (1,2,3,4) );;
    gap> U := Subgroup( G, [ (1,2), (3,4) ] );;
    gap> D := DoubleCoset( U, (1,2,3), U );;
    gap> IsDoubleCoset( D );
    true </pre>
<P><A NAME="SECT096"><h2>7.96 Set Functions for Double Cosets</h2></a>
<P><P>
<A name = "I49"></a>

<P>
Double  cosets  are   domains,  thus  all  set  theoretic  functions  are
applicable to  double  cosets  (see  chapter  <a href="chap004.htm">Domains</a>).   The following
describes  the  functions  that  are  implemented  especially for  double
cosets.   Functions  not mentioned  here  inherit  the default  functions
mentioned in the respective sections.
<P>
More technically  speaking, double  cosets  of generic   groups  have the
operations  record <code>DoubleCosetGroupOps</code>,   which inherits its  functions
from <code>DomainOps</code>  and overlays  the components mentioned  below with more
efficient functions.
<P>
Most functions below use  the component <code><var>D</var>.rightCosets</code> that contains a
list of right cosets of the  left  group <var>U</var> whose  union is  this double
coset.  If this  component  is unbound they  will compute it by computing
the orbit of the right group <var>V</var> on the right coset  <code><var>U</var> * <var>u</var></code>, where
<var>u</var>  is the  representative  of  the  double   coset (see <a href="chap007.htm#SECT097">Double   Coset
Records</a>).
<P>
<P>
<code>Elements( <var>D</var> )</code>
<A name = "I50"></a>

<P>
To compute the  proper set of  elements the  union   of the right  cosets
<code><var>D</var>.rightCosets</code> is computed.
<P>
<P>
<code>IsFinite( <var>D</var> )</code>
<A name = "I51"></a>

<P>
This returns the result of <code>IsFinite( <var>U</var> ) and IsFinite( <var>V</var> )</code>.
<P>
<P>
<code>Size( <var>D</var> )</code>
<A name = "I52"></a>

<P>
This returns the size of the left group <var>U</var> times the number of cosets in
<code><var>D</var>.rightCosets</code>.
<P>
<P>
<code><var>C</var> = <var>D</var></code>
<A name = "I53"></a>

<P>
If <var>C</var> and <var>D</var> are both double cosets with the same left and right groups
this returns the result of testing whether the representative of <var>C</var> lies
in <var>D</var>.  In other cases the test is delegated to <code>DomainOps.=</code>.
<P>
<P>
<code><var>g</var> in <var>D</var></code>
<P>
If <var>g</var> is an element of the parent group  of the left  and right group of
<var>D</var>, this returns  <code>true</code> if <var>g</var>   lies  in one of  the  right  cosets in
<code><var>D</var>.rightCosets</code>.   In    other cases the  the    test is   delegated to
<code>DomainOps.in</code>.
<P>
<P>
<code>Intersection( <var>C</var>, <var>D</var> )</code>
<A name = "I54"></a>

<P>
If <var>C</var> and <var>D</var> are both double  cosets that are equal, this  returns <var>C</var>.
If <var>C</var> and <var>D</var> are both double cosets with the same left and right groups
that  are  not  equal,  this  returns  <code>[]</code>.   In  all  other  cases  the
computation is delegated to <code>DomainsOps.Intersection</code>.
<P>
<P>
<code>Random( <var>D</var> )</code>
<A name = "I55"></a>

<P>
This takes a  random right coset from <code><var>D</var>.rightCosets</code>  and returns  the
result of applying <code>Random</code> to this right coset.
<P>
<P>
<code>Print( <var>D</var> )</code>
<A name = "I56"></a>

<P>
This prints the double coset in the form <code>DoubleCoset( <var>U</var>, <var>u</var>, <var>V</var> )</code>.
<P>
<P>
<code><var>D</var> * <var>g</var></code>
<A name = "I57"></a>
<BR> 
<code><var>g</var> * <var>D</var></code>
<P>
Those returns the result of multiplying the proper  set of element of <var>D</var>
with the element <var>g</var>, which may signal an error.
<P><A NAME="SECT097"><h2>7.97 Double Coset Records</h2></a>
<P><P><P>
A double coset is  represented by a  domain record with the following tag
components.
<P>
<DL><DT><code>isDomain</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
<DL><DT><code>isDoubleCoset</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
The  double coset  is determined by  the following  identity  components,
which every double coset must have.
<P>
<DL><DT><code>leftGroup</code>:<DD> <BR> 
        the left subgroup <var>U</var>.
</DL><P>
<DL><DT><code>rightGroup</code>:<DD> <BR> 
        the right subgroup <var>V</var>.
</DL><P>
<DL><DT><code>representative</code>:<DD> <BR> 
        an element of the double coset.  It is unspecified which element.
</DL><P>
In  addition,  a double  coset  record  may have the   following optional
information components.
<P>
<DL><DT><code>rightCosets</code>:<DD> <BR> 
        a  list  of disjoint  right  cosets of the   left  subgroup  <var>U</var>,
        whose union is the double coset.
</DL><P>
<DL><DT><code>elements</code>:<DD> <BR> 
        if present the proper set of elements of the double coset.
</DL><P>
<DL><DT><code>isFinite</code>:<DD> <BR> 
        if present this  is <code>true</code> if  the  double coset   is finite  and
        <code>false</code> if the  double coset is  infinite.  If not present it  is
        not known whether the double coset is finite or infinite.
</DL><P>
<DL><DT><code>size</code>:<DD> <BR> 
        if present the size of the double coset.  Is "infinity" if the
        coset is infinite.  If not present the  size  of the double coset
        is not known.
</DL><P><A NAME="SECT098"><h2>7.98 Group Constructions</h2></a>
<P><P><P>
The  following  functions construct new  parent  groups from given groups
(see    <a href="chap007.htm#SECT099">DirectProduct</a>,  <a href="chap007.htm#SECT101">SemidirectProduct</a>,    <a href="chap007.htm#SECT103">SubdirectProduct</a>  and
<a href="chap007.htm#SECT104">WreathProduct</a>).
<P><A NAME="SECT099"><h2>7.99 DirectProduct</h2></a>
<P><P>
<A name = "I58"></a>

<P>
<code>DirectProduct( <var><I>G<sub>1</sub></I></var>, ..., <var><I>G<sub>n</sub></I></var> )</code>
<P>
<code>DirectProduct</code> returns a group record  of the direct  product <I>D</I> of the
groups <var><I>G<sub>1</sub></I></var>, ....,  <var><I>G<sub>n</sub></I></var> which need not  to have  a  common  parent
group, it is even possible to construct the direct product of an ag group
with a permutation group.
<P>
Note that the elements of the direct product  may be just  represented as
records.  But more complicate constructions, as for instance installing a
new collector, may be used.  The choice of method strongly depends on the
type of group arguments.
<P>
<P>
<code>Embedding( <var>U</var>, <var>D</var>, <var>i</var> )</code>
<P>
Let <var>U</var> be a subgroup of  <I>G<sub><var>i</var></sub> </I>. <code>Embedding</code> returns  a homomorphism of
<var>U</var> into <var>D</var> which describes the embedding of <var>U</var> in <var>D</var>.
<P>
<P>
<code>Projection( <var>D</var>, <var>U</var>, <var>i</var> )</code>
<A name = "I59"></a>

<P>
Let <var>U</var> be a supergroup of <I>G<sub><var>i</var></sub> </I>.  <code>Projection</code> returns a  homomorphism
of <var>D</var> into <var>U</var> which describes the projection of <var>D</var> onto <I>G<sub><var>i</var></sub> </I>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> S4 := AgGroup( s4 );
    Group( g1, g2, g3, g4 )
    gap> D := DirectProduct( s4, S4 );
    Group( DirectProductElement(
    (1,2,3,4), IdAgWord ), DirectProductElement(
    (1,2), IdAgWord ), DirectProductElement( (),
    g1 ), DirectProductElement( (), g2 ), DirectProductElement( (),
    g3 ), DirectProductElement( (), g4 ) )
    gap> pr := Projection( D, s4, 1 );;
    gap> Image( pr );
    Group( (1,2,3,4), (1,2) ) </pre>
<P><A NAME="SECT100"><h2>7.100 DirectProduct for Groups</h2></a>
<P><P>
<A name = "I60"></a>

<P>
<code>GroupOps.DirectProduct( <var>L</var> )</code>
<P>
Let <var>L</var> be a list of groups <I>G<sub>1</sub>, ..., G<sub>n</sub></I>. Then a group  element <I>g</I> of
the direct product <I>D</I> is represented as  record containing the following
components.
<P>
<DL><DT><code>element</code>:<DD> <BR> 
        a list <I>g<sub>1</sub>&isin; G<sub>1</sub>, ..., g<sub>n</sub>&isin; G<sub>n</sub></I> describing <I>g</I>.
</DL><P>
<DL><DT><code>domain</code>:<DD> <BR> 
        contains <code>GroupElements</code>.
</DL><P>
<DL><DT><code>isGroupElement</code>:<DD> <BR> 
        contains <code>true</code>.
</DL><P>
<DL><DT><code>isDirectProductElement</code>:<DD> <BR> 
        contains <code>true</code>.
</DL><P>
<DL><DT><code>operations</code>:<DD> <BR> 
        contains  the    operations   record    <code>DirectProductElementOps</code>
        (see <a href="chap004.htm#SECT005">Domain</a>).
</DL><P><A NAME="SECT101"><h2>7.101 SemidirectProduct</h2></a>
<P><P><P>
<code>SemidirectProduct( <var>G</var>, <var>a</var>, <var>H</var> )</code>
<P>
<code>SemidirectProduct</code> returns the semidirect  product of <var>G</var> with <var>H</var>.  <var>a</var>
must be  a homomorphism  that from  <var>G</var> onto a group <var>A</var> that operates on
<var>H</var> via the caret (<code>^</code>)  operator.  <var>A</var> may either  be a subgroup of the
parent  group  of   <var>H</var>  that  normalizes  <var>H</var>,  or  a  subgroup  of  the
automorphism  group  of <var>H</var>, i.e., a group  of automorphisms  (see <a href="chap007.htm#SECT106">Group
Homomorphisms</a>).
<P>
The semidirect product  of <I>G</I> and <I>H</I>  is a the  group of  pairs <I>(g,h)</I>
with <I>g &isin; G</I> and  <I>h &isin; H</I>, where the product of <I>(g<sub>1</sub>,h<sub>1</sub>) (g<sub>2</sub>,h<sub>2</sub>)</I>
is defined as  <I>(g<sub>1</sub> g<sub>2</sub>,  h<sub>1</sub><sup>g<sub>2</sub><sup>a</sup></sup>  h<sub>2</sub>)</I>.  Note  that  the  elements
<I>(1<sub>G</sub>,h)</I> form a normal subgroup in the semidirect product.
<P>
<P>
<code>Embedding( <var>U</var>, <var>S</var>, 1 )</code>
<P>
Let <var>U</var>  be  a subgroup of <var>G</var>.  <code>Embedding</code> returns  the homomorphism of
<var>U</var> into the semidirect product <var>S</var> where <var>u</var> is mapped to <code>(<var>u</var>,1)</code>.
<P>
<code>Embedding( <var>U</var>, <var>S</var>, 2 )</code>
<A name = "I61"></a>

<P>
Let <var>U</var> be a subgroup  of <var>H</var>.   <code>Embedding</code>  returns the homomorphism of
<var>U</var> into the semidirect product <var>S</var> where <var>u</var> is mapped to <code>(1,<var>u</var>)</code>.
<P>
<P>
<code>Projection( <var>S</var>, <var>G</var>, 1 )</code>
<A name = "I62"></a>

<P>
<code>Projection</code> returns  the homomorphism of <var>S</var> onto <var>G</var>, where <code>(<var>g</var>,<var>h</var>)</code>
is mapped to <var>g</var>.
<P>
<code>Projection( <var>S</var>, <var>H</var>, 2 )</code>
<P>
<code>Projection</code> returns the homomorphism of <var>S</var> onto <var>H</var>, where <code>(<var>g</var>,<var>h</var>)</code>
is mapped to <var>h</var>.
<P>
It is  not specified how  the  elements  of  the  semidirect product  are
represented.   Thus  <code>Embedding</code>  and <code>Projection</code>  are the  only general
possibility to relate <var>G</var> and <var>H</var> with the semidirect product.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );;  s4.name := "s4";;
    gap> s3 := Subgroup( s4, [ (1,2), (1,2,3) ] );; s3.name := "s3";;
    gap> a4 := Subgroup( s4, [ (1,2,3), (2,3,4) ] );;  a4.name := "a4";;
    gap> a := IdentityMapping( s3 );;
    gap> s := SemidirectProduct( s3, a, a4 );
    Group( SemidirectProductElement( (1,2),
    (1,2), () ), SemidirectProductElement( (1,2,3),
    (1,2,3), () ), SemidirectProductElement( (), (),
    (1,2,3) ), SemidirectProductElement( (), (), (2,3,4) ) )
    gap> Size( s );
    72 </pre>
<P>
Note  that  the three  arguments  of  <code>SemidirectProductElement</code>  are the
element <var>g</var>, its image under <var>a</var>, and the element <var>h</var>.
<P>
<code>SemidirectProduct</code> calls the function <code><var>G</var>.operations.SemidirectProduct</code>
with the arguments <var>G</var>, <var>a</var>, and <var>H</var>, and returns the result.
<P>
The  default  function called  this way is  <code>GroupOps.SemidirectProduct</code>.
This function constructs the semidirect  product as a group of semidirect
product elements (see <a href="chap007.htm#SECT102">SemidirectProduct for Groups</a>).  Look in the index
under  <strong>SemidirectProduct</strong>  to see  for  which groups  this  function  is
overlaid.
<P><A NAME="SECT102"><h2>7.102 SemidirectProduct for Groups</h2></a>
<P><P>
<A name = "I63"></a>

<P>
The  function   <code>GroupOps.SemidirectProduct</code>  constructs  the  semidirect
product as a group of semidirect product  elements.  In the following let
<var>G</var>, <var>a</var>, and <var>H</var> be the arguments of <code>SemidirectProduct</code>.
<P>
Each  such  element  <code>(<var>g</var>,<var>h</var>)</code>  is represented  by a  record  with  the
following components.
<P>
<DL><DT><code>element</code>:<DD> <BR> 
        the list <code>[ <var>g</var>, <var>h</var> ]</code>.
</DL><P>
<DL><DT><code>automorphism</code>:<DD> <BR> 
        contains the image of <var>g</var> under <var>a</var>.
</DL><P>
<DL><DT><code>isGroupElement</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
<DL><DT><code>isSemidirectProductElement</code>:<DD> <BR> 
        always <code>true</code>.
</DL><P>
<DL><DT><code>domain</code>:<DD> <BR> 
        contains <code>GroupElements</code>.
</DL><P>
<DL><DT><code>operations</code>:<DD> <BR> 
        contains the operations record <code>SemidirectProductOps</code>.
</DL><P>
The operations of semidirect product elements in done in the obvious way.
<P><A NAME="SECT103"><h2>7.103 SubdirectProduct</h2></a>
<P><P><P>
<code>SubdirectProduct( <var>G1</var>, <var>G2</var>, <var>h1</var>, <var>h2</var> )</code>
<P>
<code>SubdirectProduct</code> returns  the subdirect product of the  groups <var>G1</var> and
<var>G2</var>.   <var>h1</var> and <var>h2</var> must be homomorphisms from  <var>G1</var>  and  <var>G2</var> into  a
common group <var>H</var>.
<P>
The subdirect product of <I>G<sub>1</sub></I> and <I>G<sub>2</sub></I> is  the  subgroup of  the direct
product of <I>G<sub>1</sub></I> and <I>G<sub>2</sub></I> of those elements  <I>(g<sub>1</sub>,g<sub>2</sub>)</I> with <I>g<sub>1</sub><sup>h<sub>1</sub></sup>
=   g<sub>2</sub><sup>h<sub>2</sub></sup></I>.    This   subgroup   is   generated   by   the   elements
<I>(g<sub>1</sub>,x<sub>g<sub>1</sub></sub>)</I>,  where <I>g<sub>1</sub></I>  loops over  the  generators  of <I>G<sub>1</sub></I>  and
<I>x<sub>g<sub>1</sub></sub>  &isin;  G<sub>2</sub></I>  is  an  arbitrary  element  such  that <I>g<sub>1</sub><sup>h<sub>1</sub></sup>  =
x<sub>g<sub>1</sub></sub><sup>h<sub>2</sub></sup></I> together with  the  element <I>(1<sub>G</sub>,k<sub>2</sub>)</I>  where <I>k<sub>2</sub></I> loops
over the generators of the kernel of <I>h<sub>2</sub></I>.
<P>
<P>
<code>Projection( <var>S</var>, <var>G1</var>, 1 )</code>
<A name = "I64"></a>

<P>
<code>Projection</code> returns the projection of <var>S</var> onto <var>G1</var>, where <code>(<var>g1</var>,<var>g2</var>)</code>
is mapped to <var>g1</var>.
<P>
<code>Projection( <var>S</var>, <var>G2</var>, 2 )</code>
<P>
<code>Projection</code> returns the projection of <var>S</var> onto <var>G2</var>, where <code>(<var>g1</var>,<var>g2</var>)</code>
is mapped to <var>g2</var>.
<P>
It  is  not  specified  how  the  elements of the subdirect  product  are
represented.   Therefor  <code>Projection</code> is the only general possibility  to
relate <var>G1</var> and <var>G2</var> with the subdirect product.
<P>
<pre>    gap> s3 := Group( (1,2,3), (1,2) );;
    gap> c3 := Subgroup( s3, [ (1,2,3) ] );;
    gap> x1 := Operation( s3, Cosets( s3, c3 ), OnRight );;
    gap> h1 := OperationHomomorphism( s3, x1 );;
    gap> d8 := Group( (1,2,3,4), (2,4) );;
    gap> c4 := Subgroup( d8, [ (1,2,3,4) ] );;
    gap> x2 := Operation( d8, Cosets( d8, c4 ), OnRight );;
    gap> h2 := OperationHomomorphism( d8, x2 );;
    gap> s := SubdirectProduct( s3, d8, h1, h2 );
    Group( (1,2,3), (1,2)(5,7), (4,5,6,7) )
    gap> Size( s );
    24 </pre>
<P>
<code>SubdirectProduct</code> calls the  function <code><var>G1</var>.operations.SubdirectProduct</code>
with the arguments <var>G1</var>, <var>G2</var>, <var>h1</var>, and <var>h2</var>.
<P>
The  default  function  called  this way  is <code>GroupOps.SubdirectProduct</code>.
This  function  constructs the subdirect product as  a  subgroup  of  the
direct  product.   The  generators for  this  subgroup  are  computed  as
described above.
<P><A NAME="SECT104"><h2>7.104 WreathProduct</h2></a>
<P><P><P>
<code>WreathProduct( <var>G</var>, <var>H</var> )</code> <BR> 
<code>WreathProduct( <var>G</var>, <var>H</var>, <var><I>&alpha;</I></var> )</code>
<P>
In  the   first form of <code>WreathProduct</code>   the  right  regular permutation
representation   of <var>H</var> on  its  elements  is  used as  the  homomorphism
<var><I>&alpha;</I></var>.  In the second form <var><I>&alpha;</I></var> must be a homomorphism  of <var>H</var>
into  a  permutation  group.  Let   <I>d</I> be the  degree  of the range   of
<var><I>&alpha;</I></var>.  Then  <code>WreathProduct</code>  returns the wreath product  of <var>G</var> by
<var>H</var> with  respect to <var><I>&alpha;</I></var>,  that is the semi-direct product  of the
direct product of <I>d</I>  copies of <var>G</var> which  are  permuted by  <var>H</var> through
application of <var><I>&alpha;</I></var> to <var>H</var>.
<P>
<pre>    gap> s3 := Group( (1,2,3), (1,2) );
    Group( (1,2,3), (1,2) )
    gap> z2 := CyclicGroup( AgWords, 2 );
    Group( c2 )
    gap> f := IdentityMapping( s3 );
    IdentityMapping( Group( (1,2,3), (1,2) ) )
    gap> w := WreathProduct( z2, s3, f );
    Group( WreathProductElement(
    c2, IdAgWord, IdAgWord, (), () ), WreathProductElement( IdAgWord,
    c2, IdAgWord, (), () ), WreathProductElement( IdAgWord, IdAgWord,
    c2, (), () ), WreathProductElement( IdAgWord, IdAgWord, IdAgWord,
    (1,2,3),
    (1,2,3) ), WreathProductElement( IdAgWord, IdAgWord, IdAgWord, (1,2),
    (1,2) ) )
    gap> Factors( Size( w ) );
    [ 2, 2, 2, 2, 3 ] </pre>
<P><A NAME="SECT105"><h2>7.105 WreathProduct for Groups</h2></a>
<P><P><P>
<code>GroupOps.WreathProduct( <var>G</var>, <var>H</var>, <var><I>&alpha;</I></var> )</code>
<P>
Let  <I>d</I> be the  degree of <code><var><I>&alpha;</I></var>.range</code>.    A group element  of the
wreath  product <I>W</I> is represented  as  a record containing the following
components.
<P>
<DL><DT><code>element</code>:<DD> <BR> 
        a list of <I>d</I> elements of <var>G</var> followed by an element <I>h</I> of <var>H</var>.
</DL><P>
<DL><DT><code>permutation</code>:<DD> <BR> 
        the image of <I>h</I> under <var><I>&alpha;</I></var>.
</DL><P>
<DL><DT><code>domain</code>:<DD> <BR> 
        contains <code>GroupElements</code>.
</DL><P>
<DL><DT><code>isGroupElement</code>:<DD> <BR> 
        contains <code>true</code>.
</DL><P>
<DL><DT><code>isWreathProductElement</code>:<DD> <BR> 
        contains <code>true</code>.
</DL><P>
<DL><DT><code>operations</code>:<DD> <BR> 
        contains         the              operations             record
        <code>WreathProductElementOps</code> (see <a href="chap004.htm#SECT005">Domain</a>).
</DL><P><A NAME="SECT106"><h2>7.106 Group Homomorphisms</h2></a>
<P><P>
<A name = "I65"></a>

<P>
Since groups is probably the most important category of domains in <strong>GAP3</strong>
group homomorphisms  are  probably the most  important homomorphisms (see
chapter <a href="chap044.htm">Homomorphisms</a>)
<P>
A <strong>group homomorphism</strong> <I>&phi;</I>  is a  mapping  that maps each element of a
group <I>G</I>,  called  the  source of <I>&phi;</I>, to an element of another group
<I>H</I>, called the range of <I>&phi;</I>, such that for each pair <I>x, y &isin;  G</I> we
have <I>(xy)<sup>&phi;</sup> = x<sup>&phi;</sup> y<sup>&phi;</sup></I>.
<P>
Examples of group homomorphisms are the natural homomorphism  of  a group
into a factor group (see <a href="chap007.htm#SECT110">NaturalHomomorphism</a>) and the homomorphism of a
group    into  a symmetric    group    defined  by   an   operation  (see
<a href="chap008.htm#SECT021">OperationHomomorphism</a>).  Look under  <strong>group homomorphisms</strong> in the index
for a list of all available group homomorphisms.
<P>
Since group homomorphisms are just a special  case of  homomorphisms, all
functions  described in  chapter <a href="chap044.htm">Homomorphisms</a>  are  applicable to  all
group homomorphisms, e.g., the  function  to test if a homomorphism is an
automorphism  (see   <a href="chap044.htm#SECT006">IsAutomorphism</a>).   More   general,   since   group
homomorphisms are just a special case of mappings all functions described
in chapter <a href="chap043.htm">Mappings</a> are also applicable, e.g., the  function to compute
the image of an element under a group homomorphism (see <a href="chap043.htm#SECT008">Image</a>).
<P>
The following sections describe the functions that test whether a mapping
is a group homomorphism (see  <a href="chap007.htm#SECT107">IsGroupHomomorphism</a>), compute the  kernel
of a group homomorphism (see <a href="chap007.htm#SECT108">KernelGroupHomomorphism</a>), how the  general
mapping  functions are implemented for group homomorphisms (see  <a href="chap007.htm#SECT109">Mapping
Functions for Group  Homomorphisms</a>), the natural homomorphism of a group
onto  a  factor  group  (see   <a href="chap007.htm#SECT110">NaturalHomomorphism</a>),  homomorphisms  by
conjugation  (see  <a href="chap007.htm#SECT111">ConjugationGroupHomomorphism</a>,  <a href="chap007.htm#SECT112">InnerAutomorphism</a>),
and the  most  general group  homomorphism,  which  is  defined by simply
specifying    the    images    of    a    set    of    generators    (see
<a href="chap007.htm#SECT113">GroupHomomorphismByImages</a>).
<P><A NAME="SECT107"><h2>7.107 IsGroupHomomorphism</h2></a>
<P><P>
<A name = "I66"></a>

<P>
<code>IsGroupHomomorphism( <var>map</var> )</code>
<P>
<code>IsGroupHomomorphism</code> returns  <code>true</code>  if the function <var>map</var>  is  a group
homomorphism and <code>false</code> otherwise.  Signals an error if <var>map</var> is a multi
value mapping.
<P>
A mapping <I>map</I> is a group homomorphism  if its source <I>G</I>  and range <I>H</I>
are both groups and if  for every pair of elements <I>x, y &isin;  G</I> it holds
that <I>(x y)<sup>map</sup> = x<sup>map</sup> y<sup>map</sup></I>.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );;
    gap> v4 := Subgroup( s4, [ (1,2)(3,4), (1,3)(2,4) ] );;
    gap> phi := NaturalHomomorphism( s4, s4/v4 );;
    gap> IsGroupHomomorphism( phi );
    true
    gap> IsHomomorphism( phi );
    true    # since the source is a group this is equivalent to the above
    gap> IsGroupHomomorphism( FrobeniusAutomorphism( GF(16) ) );
    false   # it is a field automorphism </pre>
<P>
<code>IsGroupHomomorphism</code> first tests if the flag <code><var>map</var>.isGroupHomomorphism</code>
is bound.  If the flag is bound, <code>IsGroupHomomorphism</code> returns its value.
Otherwise it calls <BR> 
<code><var>map</var>.source.operations.IsGroupHomomorphism(  <var>map</var>  )</code>,  remembers  the
returned value in <code><var>map</var>.isGroupHomomorphism</code>, and returns it.  Note that
of  course  all functions  that create group  homomorphisms set the  flag
<code><var>map</var>.isGroupHomomorphism</code> to <code>true</code>,  so that no function is called for
those group homomorphisms.
<P>
The default function called this way is <code>MappingOps.IsGroupHomomorphism</code>.
It  computes all  the elements  of  the source of <var>map</var> and for each such
element <I>x</I> and  each generator <I>y</I> tests whether <I>(xy)<sup>map</sup>  =  x<sup>map</sup>
y<sup>map</sup></I>.   Look under  <strong>IsHomomorphism</strong> in  the  index to see  for which
mappings this function is overlaid.
<P><A NAME="SECT108"><h2>7.108 KernelGroupHomomorphism</h2></a>
<P><P>
<A name = "I67"></a>

<P>
<code>KernelGroupHomomorphism( <var>hom</var> )</code>
<P>
<code>KernelGroupHomomorphism</code>  returns the  kernel of the group  homomorphism
<var>hom</var> as a subgroup of the group <code><var>hom</var>.source</code>.
<P>
The <strong>kernel</strong> of a group homomorphism <I>hom</I> is the  subset of elements <I>x</I>
of the source <I>G</I> that are mapped to the identity of the range <I>H</I>, i.e.,
<I>x<sup>hom</sup> = H.identity</I>.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );;
    gap> v4 := Subgroup( s4, [ (1,2)(3,4), (1,3)(2,4) ] );;
    gap> phi := NaturalHomomorphism( s4, s4/v4 );;
    gap> KernelGroupHomomorphism( phi );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2)(3,4), (1,3)(2,4) ] )
    gap> Kernel( phi );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (1,2)(3,4), (1,3)(2,4) ] )
        # since the source is a group this is equivalent to the above
    gap> rho := GroupHomomorphismByImages( s4, Group( (1,2) ),
    >                          [ (1,2), (1,2,3,4) ], [ (1,2), (1,2) ] );;
    gap> Kernel( rho );
    Subgroup( Group( (1,2), (1,2,3,4) ), [ (2,4,3), (1,4,3) ] ) </pre>
<P>
<code>KernelGroupHomomorphism</code> first  tests if <code><var>hom</var>.kernelGroupHomomorphism</code>
is bound.  If it is bound, <code>KernelGroupHomomorphisms</code> returns that value.
Otherwise it calls <BR> 
<code><var>hom</var>.operations.KernelGroupHomomorphism(   <var>hom</var>   )</code>,   remembers  the
returned value in <code><var>hom</var>.kernelGroupHomomorphism</code>, and returns it.
<P>
The default  function for  this  is <code>MappingOps.KernelGroupHomomorphism</code>,
which  simply tries random elements  of the  source of  <var>hom</var>,  until the
subgroup  generated  by those that map  to  the identity has the  correct
size,  i.e.,  <code>Size( <var>hom</var>.source ) / Size(  Image( hom )  )</code>.  Note that
this implies  that the  image  of <var>hom</var> and  its size are computed.  Look
under <strong>Kernel</strong> in the  index to see for  which  group  homomorphisms this
function is overlaid.
<P><A NAME="SECT109"><h2>7.109 Mapping Functions for Group Homomorphisms</h2></a>
<P><P><P>
This  section describes  how the  mapping functions  defined  in  chapter
<a href="chap043.htm">Mappings</a> are implemented  for group homomorphisms.  Those functions not
mentioned here  are implemented by the default functions described in the
respective sections.
<P>
<P>
<code>IsInjective( <var>hom</var> )</code>
<A name = "I68"></a>

<P>
The  group   homomorphism <var>hom</var>  is injective  if  the  kernel  of  <var>hom</var>
<code>KernelGroupHomomorphism( <var>hom</var>   )</code> (see  <a href="chap007.htm#SECT108">KernelGroupHomomorphism</a>)  is
trivial.
<P>
<P>
<code>IsSurjective( <var>hom</var> )</code>
<A name = "I69"></a>

<P>
The group homomorphism  <var>hom</var> is  surjective  if the size  of  the  image
<code>Size( Image( <var>hom</var> ) )</code>  (see <a href="chap043.htm#SECT008">Image</a> and below) is equal to the size of
the range <code>Size( <var>hom</var>.range )</code>.
<P>
<P>
<code><var>hom1</var> = <var>hom2</var></code>
<A name = "I70"></a>

<P>
The two group  homomorphisms <var>hom1</var>  and <var>hom2</var> are equal if the have the
same source and range and if the images  of the generators of  the source
under <var>hom1</var> and <var>hom2</var> are equal.
<P>
<P>
<code><var>hom1</var> < <var>hom2</var></code>
<A name = "I71"></a>

<P>
By definition <var>hom1</var> is smaller  than  <var>hom2</var> if  either  the  source  of
<var>hom1</var> is  smaller  than  the source of <var>hom2</var>,  or, if  the sources  are
equal, if the range of <var>hom1</var> is smaller than the range of <var>hom2</var>, or, if
sources and ranges are  equal, the  image  of the smallest element <var>x</var> of
the source for that the images are not equal under <var>hom1</var> is smaller than
the  image  under   <var>hom2</var>.   Therefor   <code>GroupHomomorphismOps.<</code>  first
compares the sources and the  ranges.  For group homomorphisms with equal
sources and ranges only the images of the smallest irredundant generating
system are compared.  A generating system <I>g<sub>1</sub>, g<sub>2</sub>, ..., g<sub>n</sub></I> is  called
irredundant if no <I>g<sub>i</sub></I> lies  in the subgroup  generated  by  <I>g<sub>1</sub>,  ...,
g<sub>i-1</sub></I>.   The  smallest  irredundant generating  system  is simply  the
smallest  such generating system  with  respect  to  the  lexicographical
ordering.
<P>
<P>
<code>Image( <var>hom</var> )</code>
<A name = "I72"></a>
<BR> 
<code>Image( <var>hom</var>, <var>H</var> )</code> <BR> 
<code>Images( <var>hom</var>, <var>H</var> )</code>
<A name = "I73"></a>

<P>
The  image  of a  subgroup  under a  group   homomorphism is  computed by
computing the images  of a set  of  generators  of the subgroup, and  the
result is the subgroup generated by those images.
<P>
<P>
<code>PreImages( <var>hom</var>, <var>elm</var> )</code>
<A name = "I74"></a>

<P>
The preimages of an  element under a group  homomorphism are  computed by
computing a representative with <code>PreImagesRepresentative( <var>hom</var>, <var>elm</var> )</code>
and   the result  is the  coset   of  <code>Kernel(  <var>hom</var> )</code>  containing this
representative.
<P>
<P>
<code>PreImage( <var>hom</var> )</code>
<A name = "I75"></a>
<BR> 
<code>PreImage( <var>hom</var>, <var>H</var> )</code> <BR> 
<code>PreImages( <var>hom</var>, <var>H</var> )</code>
<P>
The preimages of a subgroup  under a group  homomorphism  are computed by
computing representatives of the preimages of  all the generators  of the
subgroup, adding the generators of the kernel of <var>hom</var>, and the result is
the subgroup generated by those elements.
<P>
Look   under  <strong>IsInjective</strong>,   <strong>IsSurjective</strong>,  <strong>equality</strong>,   <strong>ordering</strong>,
<strong>Image</strong>, <strong>Images</strong>, <strong>PreImage</strong>,  and <strong>PreImages</strong>  in the index  to see for
which group homomorphisms these functions are overlaid.
<P><A NAME="SECT110"><h2>7.110 NaturalHomomorphism</h2></a>
<P><P>
<A name = "I76"></a>

<A name = "I77"></a>

<P>
<code>NaturalHomomorphism( <var>G</var>, <var>F</var> )</code>
<P>
<code>NaturalHomomorphism</code> returns  the natural  homomorphism of the group <var>G</var>
into the factor group <var>F</var>.  <var>F</var> must be a factor group, i.e.,  the result
of   <code>FactorGroup(<var>H</var>,<var>N</var>)</code> (see   <a href="chap007.htm#SECT033">FactorGroup</a>)   or   <code><var>H</var>/<var>N</var></code>   (see
<a href="chap007.htm#SECT117">Operations for Groups</a>), and <var>G</var> must be a subgroup of <var>H</var>.
<P>
Mathematically the  factor group <I>H/N</I> consists of the cosets of <I>N</I>, and
the natural homomorphism <I>&phi;</I> maps each element <I>h</I> of <I>H</I> to the coset
<I>N h</I>.  Note  that in <strong>GAP3</strong> the  representation of factor group elements
is unspecified, but they are <strong>never</strong> cosets (see <a href="chap007.htm#SECT087">IsRightCoset</a>), because
cosets are domains and not  group elements in  <strong>GAP3</strong>.   Thus the natural
homomorphism  is the  only  connection between  a group  and  one of  its
factorgroups.
<P>
<I>G</I> is the source  of the natural  homomorphism <I>&phi;</I>, <I>F</I> is its range.
Note that because <I>G</I> may be a proper subgroup  of the group <I>H</I> of which
<I>F</I> is a factor group <I>&phi;</I> need not  be  surjective, i.e., the image of
<I>&phi;</I> may be  a proper  subgroup of  <I>F</I>.  The  kernel  of <I>&phi;</I> is  of
course the intersection of <I>N</I> and <I>G</I>.
<P>
<pre>    gap> s4 := Group( (1,2), (1,2,3,4) );;
    gap> v4 := Subgroup( s4, [ (1,2)(3,4), (1,3)(2,4) ] );;
    gap> v4.name := "v4";;
    gap> phi := NaturalHomomorphism( s4, s4/v4 );;
    gap> (1,2,3) ^ phi;
    FactorGroupElement( v4, (2,4,3) )
    gap> PreImages( phi, last );
    (v4*(2,4,3))
    gap> (1,2,3) in last;
    true
    gap> rho :=
    >  NaturalHomomorphism( Subgroup( s4, [ (1,2), (1,2,3) ] ), s4/v4 );;
    gap> Kernel( rho );
    Subgroup( Group( (1,2), (1,2,3,4) ), [  ] )
    gap> IsIsomorphism( rho );
    true </pre>
<P>
<code>NaturalHomomorphism</code> calls <BR> 
<code><var>F</var>.operations.NaturalHomomorphism( <var>G</var>, <var>F</var> )</code>
and returns that value.
<P>
The default function  called this  way is <code>GroupOps.NaturalHomomorphism</code>.
The  homomorphism   constructed  this  way has the     operations  record
<code>NaturalHomomorphismOps</code>.  It computes the image of an element <var>g</var> of <var>G</var>
by calling <code>FactorGroupElement( <var>N</var>,  <var>g</var> )</code>, the preimages of  an factor
group element  <var>f</var>  as <code>Coset(  Kernel(<var>phi</var>), <var>f</var>.element.representative
)</code>, and the kernel by  computing <code>Intersection( <var>G</var>,  <var>N</var> )</code>.  Look under
<strong>NaturalHomomorphism</strong> in the index to see for which groups this function
is overlaid.
<P><A NAME="SECT111"><h2>7.111 ConjugationGroupHomomorphism</h2></a>
<P><P>
<A name = "I78"></a>

<A name = "I79"></a>

<P>
<code>ConjugationGroupHomomorphism( <var>G</var>, <var>H</var>, <var>x</var> )</code>
<P>
<code>ConjugationGroupHomomorphism</code> returns the homomorphism from <var>G</var> into <var>H</var>
that takes each element <var>g</var> in <var>G</var> to the element <code><var>g</var> ^ <var>x</var></code>.  <var>G</var> and
<var>H</var> must have a common parent  group <var>P</var> and <var>x</var> must lie in  this parent
group.  Of course <code><var>G</var> ^ <var>x</var></code> must be a subgroup of <var>H</var>.
<P>
<pre>    gap> d12 := Group( (1,2,3,4,5,6), (2,6)(3,5) );; d12.name := "d12";;
    gap> c2 := Subgroup( d12, [ (2,6)(3,5) ] );
    Subgroup( d12, [ (2,6)(3,5) ] )
    gap> v4 := Subgroup( d12, [ (1,2)(3,6)(4,5), (1,4)(2,5)(3,6) ] );
    Subgroup( d12, [ (1,2)(3,6)(4,5), (1,4)(2,5)(3,6) ] )
    gap> x := ConjugationGroupHomomorphism( c2, v4, (1,3,5)(2,4,6) );
    ConjugationGroupHomomorphism( Subgroup( d12, 
    [ (2,6)(3,5) ] ), Subgroup( d12, [ (1,2)(3,6)(4,5), (1,4)(2,5)(3,6) 
     ] ), (1,3,5)(2,4,6) )
    gap> IsSurjective( x );
    false
    gap> Image( x );
    Subgroup( d12, [ (1,5)(2,4) ] ) </pre>
<P>
<code>ConjugationGroupHomomorphism</code> calls <BR> 
<code><var>G</var>.operations.ConjugationGroupHomomorphism( <var>G</var>, <var>H</var>, <var>x</var> )</code>
and returns that value.
<P>
The default  function  called is <code>GroupOps.ConjugationGroupHomomorphism</code>.
It just creates a homomorphism record with range <var>G</var>, source <var>H</var>, and the
component <code>element</code> with  the value <var>x</var>.   It  computes the  image of  an
element <var>g</var> of <var>G</var> as  <code><var>g</var> ^ <var>x</var></code>.  If the sizes  of the range and the
source are  equal  the inverse  of such  a homomorphism is computed  as a
conjugation homomorphism from <var>H</var> to <var>G</var> by  <code><var>x</var>^-1</code>.   To multiply two
such   homomorphisms  their   elements   are   multiplied.   Look   under
<strong>ConjugationGroupHomomorphism</strong> in the index to  see for which groups this
default function is overlaid.
<P><A NAME="SECT112"><h2>7.112 InnerAutomorphism</h2></a>
<P><P>
<A name = "I80"></a>

<A name = "I81"></a>

<P>
<code>InnerAutomorphism( <var>G</var>, <var>g</var> )</code>
<P>
<code>InnerAutomorphism</code> returns the automorphism on the  group <var>G</var> that takes
each element <var>h</var> to <code><var>h</var> ^ <var>g</var></code>.  <var>g</var> must be an element  in the parent
group of <var>G</var> (but need not actually be in <var>G</var>) that normalizes <var>G</var>.
<P>
<pre>    gap> s5 := Group( (1,2), (1,2,3,4,5) );;  s5.name := "s5";;
    gap> i := InnerAutomorphism( s5, (1,2) );
    InnerAutomorphism( s5, (1,2) )
    gap> (1,2,3,4,5) ^ i;
    (1,3,4,5,2) </pre>
<P>
<code>InnerAutomorphism( <var>G</var>, <var>g</var> )</code> calls <code>ConjugationGroupHomomorphism( <var>G</var>,
<var>G</var>, <var>g</var> )</code> (see <a href="chap007.htm#SECT111">ConjugationGroupHomomorphism</a>).
<P><A NAME="SECT113"><h2>7.113 GroupHomomorphismByImages</h2></a>
<P><P>
<A name = "I82"></a>

<A name = "I83"></a>

<P>
<code>GroupHomomorphismByImages( <var>G</var>, <var>H</var>, <var>gens</var>, <var>imgs</var> )</code>
<P>
<code>GroupHomomorphismByImages</code> returns   the group homomorphism  with source
<var>G</var>  and  range  <var>H</var> that  is  defined by mapping    the  list <var>gens</var>  of
generators of <var>G</var> to the list <var>imgs</var> of images in <var>H</var>.
<P>
<pre>    gap> g := Group( (1,2,3,4), (1,2) );;
    gap> h := Group( (2,3), (1,2) );;
    gap> m := GroupHomomorphismByImages(g,h,g.generators,h.generators);
    GroupHomomorphismByImages( Group( (1,2,3,4), (1,2) ), Group( (2,3), 
    (1,2) ), [ (1,2,3,4), (1,2) ], [ (2,3), (1,2) ] )
    gap> Image( m, (1,3,4) );
    (1,3,2)
    gap> Kernel( m );
    Subgroup( Group( (1,2,3,4), (1,2) ), [ (1,4)(2,3), (1,2)(3,4) ] ) </pre>
<P>
Note that  the result need not  always be a <strong>single value</strong>  mapping, even
though the name seems to imply this.  Namely if the elements in <var>imgs</var> do
not satisfy all relations that hold for the generators <var>gens</var>, no element
of <var>G</var> has a unique image under the mapping.  This is demonstrated in the
following example.
<P>
<pre>    gap> g := Group( (1,2,3,4,5,6,7,8,9,10) );;
    gap> h := Group( (1,2,3,4,5,6) );;
    gap> m := GroupHomomorphismByImages(g,h,g.generators,h.generators);
    GroupHomomorphismByImages( Group( ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10
     ) ), Group( (1,2,3,4,5,6) ), [ ( 1, 2, 3, 4, 5, 6, 7, 8, 9,10) ],
    [ (1,2,3,4,5,6) ] )
    gap> IsMapping( m );
    false
    gap> Images( m, () );
    (Subgroup( Group( (1,2,3,4,5,6) ), [ ( 1, 3, 5)( 2, 4, 6) ] )*())
    gap> g.1^10;
    ()    # the generator of <var>g</var> satisfies this relation
    gap> h.1^10;
    (1,5,3)(2,6,4)    # but its image does not </pre>
<P>
The set  of images of the identity  returned  by <code>Images</code>  is the set  of
elements <code>h.1^<var>n</var></code> such that <code>g.1^<var>n</var></code> is the identity in <code>g</code>.
<P>
The test whether  a mapping constructed by <code>GroupHomomorphismByImages</code> is
a single valued mapping, is usually quite expensive.  Note that this test
is  automatically performed the first time that you apply a function that
expects a single valued mapping, e.g., <code>Image</code>  or  <code>Images</code>.  There  are
two possibilities to  avoid this  test.   When  you know that the mapping
constructed is really  a  single  valued  mapping,  you can  set the flag
<code><var>map</var>.isMapping</code>  to <code>true</code>.   Then  the functions  assume that <var>map</var> is
indeed a mapping and do not test it again.  On the other hand  if you are
not  certain  whether  the   mapping  is  single  valued,  you   can  use
<code>ImagesRepresentative</code>  instead of <code>Image</code>  (see <a href="chap043.htm#SECT010">ImagesRepresentative</a>).
<code>ImagesRepresentative</code> returns  just one possible image,  without testing
whether there might actually be more than one possible image.
<P>
<code>GroupHomomorphismByImages</code> calls <BR> 
<code><var>G</var>.operations.GroupHomomorphismByImages( <var>G</var>, <var>H</var>, <var>gens</var>, <var>imgs</var> )</code> <BR> 
and returns this value.
<P>
The      default      function       called       this       way       is
<code>GroupOps.GroupHomomorphismByImages</code>.  Below we describe how the  mapping
functions  are  implemented  for  such  a  mapping.   The  functions  not
mentioned below  are implemented by  the  default functions described  in
<a href="chap007.htm#SECT109">Mapping Functions for Group Homomorphisms</a>.
<P>
All the function below first compute the list of elements  of <var>G</var> with an
orbit   algorithm,   sorts   this  list,   and   stores   this   list  in
<code><var>hom</var>.elements</code>.  In  parallel they computes and  sort a list of images,
and store this list in <code><var>hom</var>.images</code>.
<P>
<P>
<code>IsMapping( <var>map</var> )</code>
<A name = "I84"></a>

<P>
The mapping constructed by <code>GroupHomomorphismByImages</code> is a single valued
mapping if for each  <var>i</var>  and for each  <var>k</var> the following equation  holds <BR> 
<code><var>map</var>.images[Position(<var>map</var>.elements,<var>map</var>.elements[<var>i</var>]*<var>gens</var>[<var>k</var>])]  <BR> 
= <var>map</var>.images[<var>i</var>] * <var>imgs</var>[<var>k</var>]</code>.
<P>
<P>
<code>Image( <var>map</var>, <var>elm</var> )</code>
<A name = "I85"></a>

<P>
If the mapping <var>map</var> is a single valued mapping, the image of  an element
<var>elm</var> is computed as <code><var>map</var>.images[ Position(<var>map</var>.elements,<var>elm</var>) ]</code>.
<P>
<P>
<code>ImagesRepresentative( <var>map</var>, <var>elm</var> )</code>
<A name = "I86"></a>

<P>
The representative of the  images of  an  element <var>elm</var> under the mapping
<var>map</var> is computed as <code><var>map</var>.images[ Position(<var>map</var>.elements,<var>elm</var>) ]</code>.
<P>
<P>
<code>InverseMapping( <var>map</var> )</code>
<A name = "I87"></a>

<P>
The    inverse    of    the    mapping   <var>map</var>    is    constructed    as
<code>GroupHomomorphismByImages( <var>H</var>, <var>G</var>, <var>imgs</var>, <var>gens</var> )</code>.
<P>
<P>
<code>CompositionMapping( <var>map1</var>, <var>map2</var> )</code>
<A name = "I88"></a>

<P>
If <var>map2</var> is  a  mapping  constructed by <code>GroupHomomorphismByImages</code>  the
composition is constructed by making a copy of <var>map2</var> and replacing every
element in <code><var>map2</var>.images</code> with its image under <var>map1</var>.
<P>
Look  under <strong>GroupHomomorphismByImages</strong> in  the index  to  see  for which
groups this function is overlaid.
<P><A NAME="SECT114"><h2>7.114 Set Functions for Groups</h2></a>
<P><P><P>
As already mentioned  in the  introduction  of  the  chapter,  groups are
domains.  Thus all  set  theoretic functions, for example  <code>Intersection</code>
and  <code>Size</code> can be applied  to groups.  This and the  following  sections
give  further comments on the  definition and  implementations  of  those
functions for groups.  All set theoretic functions not mentioned here not
treated specially for groups.  The last section describes the  format  of
the records that describe groups (see <a href="chap007.htm#SECT118">Group Records</a>).
<P>
<P>
<code>Elements( <var>G</var> )</code>
<A name = "I89"></a>

<P>
The  elements of a  group  <var>G</var> are constructed  using a Dimino algorithm.
See <a href="chap007.htm#SECT115">Elements for Groups</a>.
<P>
<P>
<code>IsSubset( <var>G</var>, <var>H</var> )</code>
<A name = "I90"></a>

<P>
If <var>G</var> and <var>H</var> are groups then <code>IsSubset</code> tests whether the generators of
<var>H</var> are elements of <var>G</var>.  Otherwise <code>DomainOps.IsSubset</code> is used.
<P>
<P>
<code>Intersection( <var>G</var>, <var>H</var> )</code>
<A name = "I91"></a>

<P>
The intersection  of  groups  <var>G</var>  and  <var>H</var>  is  computed  using an orbit
algorithm.  See <a href="chap007.htm#SECT116">Intersection for Groups</a>.
<P><A NAME="SECT115"><h2>7.115 Elements for Groups</h2></a>
<P><P><P>
<code>GroupOps.Elements( <var>G</var> )</code>
<P>
<code>GroupOps.Elements</code> returns the sets of elements of <var>G</var> (see <a href="chap004.htm#SECT006">Elements</a>).
The function starts  with the trivial subgroup of <var>G</var>,  for which the set
of elements  is  known and constructs the  successive  closures with  the
generators of <var>G</var> using <code>GroupOps.Closure</code> (see <a href="chap007.htm#SECT018">Closure</a>).
<P>
Note that  this  function  neither checks nor  sets  the record component
<code><var>G</var>.elements</code>.  It recomputes the  set of elements  even it is  bound to
<code><var>G</var>.elements</code>.
<P><A NAME="SECT116"><h2>7.116 Intersection for Groups</h2></a>
<P><P><P>
<code>GroupOps.Intersection( <var>G</var>, <var>H</var> )</code>
<P>
<code>GroupOps.Intersection</code> returns the intersection of <var>G</var> and <var>H</var> either as
set of elements or as a group record (see <a href="chap004.htm#SECT012">Intersection</a>).
<P>
If one argument, say <var>G</var>, is a set and the  other a  group, say <var>H</var>, then
<code>GroupOps.Intersection</code> returns the subset  of elements of <var>G</var> which  lie
in <var>H</var>.
<P>
If <var>G</var> and <var>H</var> have  different parent groups then <code>GroupOps.Intersection</code>
uses the function  <code>DomainOps.Intersection</code>  in   order to  compute   the
intersection.
<P>
Otherwise <code>GroupOps.Intersection</code> computes the  stabilizer of the trivial
coset  of  the bigger group in  the  smaller group using <code>Stabilizer</code> and
<code>Coset</code>.
<P><A NAME="SECT117"><h2>7.117 Operations for Groups</h2></a>
<P><P>
<A name = "I92"></a>

<P>
<code><var>G</var> ^ <var>s</var></code>
<A name = "I93"></a>

<P>
The operator <code>^</code> evaluates  to  the subgroup   conjugate to <var>G</var>  under a
group element <var>s</var> of the parent group of <var>G</var>.  See <a href="chap007.htm#SECT020">ConjugateSubgroup</a>.
<P>
<pre>    gap> s4 := Group( (1,2,3,4), (1,2) );
    Group( (1,2,3,4), (1,2) )
    gap> s4.name := "s4";;
    gap> v4 := Subgroup( s4, [ (1,2), (1,2)(3,4) ] );
    Subgroup( s4, [ (1,2), (1,2)(3,4) ] )
    gap> v4 ^ (2,3);
    Subgroup( s4, [ (1,3), (1,3)(2,4) ] )
    gap> v4 ^ (2,5);
    Error, &lt;g> must be an element of the parent group of &lt;G> </pre>
<P>
<P>
<code><var>s</var> in <var>G</var></code>
<A name = "I94"></a>

<P>
The operator <code>in</code>  evaluates to  <code>true</code> if <var>s</var> is an  element of  <var>G</var> and
<code>false</code> otherwise. <var>s</var> must be an element of the parent group of <var>G</var>.
<P>
<pre>    gap> (1,2,3,4) in v4;
    false
    gap> (2,4) in v4^(2,3);
    true </pre>
<P>
<P>
<code><var>G</var> * <var>s</var></code>
<A name = "I95"></a>

<P>
The operator <code>*</code> evaluates to the right coset of <var>G</var> with representative
<var>s</var>.   <var>s</var>  must  be  an  element  of  the  parent  group  of  <var>G</var>.   See
<a href="chap007.htm#SECT086">RightCoset</a> for details about right cosets.
<P>
<P>
<code><var>s</var> * <var>G</var></code>
<P>
The operator <code>*</code> evaluates to the left coset of <var>G</var>  with representative
<var>s</var>.  <var>s</var> must be an element of the parent group of <var>G</var>.  See <a href="chap007.htm#SECT091">LeftCoset</a>
for details about left cosets.
<P>
<pre>    gap> v4 * (1,2,3,4);
    (Subgroup( s4, [ (1,2), (1,2)(3,4) ] )*(1,2,3))
    gap> (1,2,3,4) * v4;
    ((1,2,3,4)*Subgroup( s4, [ (1,2), (1,2)(3,4) ] )) </pre>
<P>
<P>
<code><var>G</var> / <var>N</var></code>
<A name = "I96"></a>

<P>
The operator <code>/</code> evaluates to the factor group <I>&lt;G&gt; / <var>N</var></I> where <var>N</var> must
be a normal subgroup of <var>G</var>.   This is the same as <code>FactorGroup(<var>G</var>,<var>N</var>)</code>
(see <a href="chap007.htm#SECT033">FactorGroup</a>).
<P><A NAME="SECT118"><h2>7.118 Group Records</h2></a>
<P><P><P>
As  for all domains (see <a href="chap004.htm">Domains</a> and <a href="chap004.htm#SECT001">Domain Records</a>) groups and their
subgroups are represented by  records that contain important  information
about groups.  Most of the following functions return  such  records.  Of
course it  is  possible to create  a  group record by hand but  generally
<code>Group</code> (see <a href="chap007.htm#SECT009">Group</a>) and <code>Subgroup</code> (see <a href="chap007.htm#SECT012">Subgroup</a>)  should be used for
such tasks.
<P>
Once  a group record is created you may add  record  components to it but
you   must   not  alter  informations  already  present, especially   not
<code>generators</code> and <code>identity</code>.
<P>
Group   records   must   always  contain  the    components <code>generators</code>,
<code>identity</code>,  <code>isDomain</code> and  <code>isGroup</code>.  Subgroups contain  an additional
component <code>parent</code>.  The contents of  all components of  a group <I>G</I>  are
described below.
<P>
The following two components are the so-called <strong>category components</strong> used
to identify the category this domain belongs to.
<P>
<DL><DT><code>isDomain</code>:<DD> <BR> 
        is always <code>true</code> as a group is a domain.
</DL><P>
<DL><DT><code>isGroup</code>:<DD> <BR> 
        is of course <code>true</code> as <I>G</I> is a group.
</DL><P>
The following three  components determine a group domain. These  are  the
so-called <strong>identification components</strong>.
<P>
<DL><DT><code>generators</code>:<DD> <BR> 
        is a list group generators.  Duplicate generators are allowed but
        none of the generators may be the group identity.   The group <I>G</I>
        is the trivial group  if and only  if <code>generators</code> is   the empty
        list. Note that once created this entry must never be changed, as
        most of the other entries depend on <code>generators</code>.
</DL><P>
<DL><DT><code>identity</code>:<DD> <BR> 
        is the group identity of <I>G</I>.
</DL><P>
<DL><DT><code>parent</code>:<DD> <BR> 
        if present  this contains the group record of the parent group of
        a subgroup <I>G</I>, otherwise <I>G</I> itself is a parent group.
</DL><P>
The following components  are optional and  contain <strong>knowledge</strong> about the
group <I>G</I>.
<P>
<DL><DT><code>abelianInvariants</code>:<DD> <BR> 
        a  list  of  integers  containing  the  abelian  invariants of an
        abelian group <I>G</I>.
</DL><P>
<DL><DT><code>centralizer</code>:<DD> <BR> 
        contains the centralizer of <I>G</I> in its parent group.
</DL><P>
<DL><DT><code>centre</code>:<DD> <BR> 
        contains the centre of <I>G</I>. See <a href="chap007.htm#SECT017">Centre</a>.
</DL><P>
<DL><DT><code>commutatorFactorGroup</code>:<DD> <BR> 
        contains     the commutator   factor   group   of     <I>G</I>.    See
        <a href="chap007.htm#SECT035">CommutatorFactorGroup</a> for details.
</DL><P>
<DL><DT><code>conjugacyClasses</code>:<DD> <BR> 
        contains   a  list  of   the conjugacy   classes   of  <I>G</I>.   See
        <a href="chap007.htm#SECT068">ConjugacyClasses</a> for details.
</DL><P>
<DL><DT><code>core</code>:<DD> <BR> 
        contains the core of <I>G</I> under the action of  its  parent  group.
        See <a href="chap007.htm#SECT021">Core</a> for details.
</DL><P>
<DL><DT><code>derivedSubgroup</code>:<DD>  <BR>   
        contains the derived subgroup of <I>G</I>. See <a href="chap007.htm#SECT022">DerivedSubgroup</a>.
</DL><P>
<DL><DT><code>elements</code>:<DD> <BR> 
        is the set of all elements of <I>G</I>. See <a href="chap004.htm#SECT006">Elements</a>.
</DL><P>
<DL><DT><code>fittingSubgroup</code>:<DD> <BR> 
        contains the Fitting subgroup of <I>G</I>. See <a href="chap007.htm#SECT023">FittingSubgroup</a>.
</DL><P>
<DL><DT><code>frattiniSubgroup</code>:<DD> <BR> 
        contains the Frattini subgroup of <I>G</I>.  See <a href="chap007.htm#SECT024">FrattiniSubgroup</a>.
</DL><P>
<DL><DT><code>index</code>:<DD> <BR> 
        contains the index of <I>G</I> in its parent group. See <a href="chap007.htm#SECT051">Index</a>.
</DL><P>
<DL><DT><code>lowerCentralSeries</code>:<DD> <BR> 
        contains the lower  central series of  <I>G</I>  as list of subgroups.
        See <a href="chap007.htm#SECT041">LowerCentralSeries</a>.
</DL><P>
<DL><DT><code>normalizer</code>:<DD> <BR> 
        contains  the   normalizer  of  <I>G</I>  in  its  parent  group.  See
        <a href="chap007.htm#SECT027">Normalizer</a> for details.
</DL><P>
<DL><DT><code>normalClosure</code>:<DD> <BR> 
        contains the normal closure of  <I>G</I>  in  its  parent  group.  See
        <a href="chap007.htm#SECT025">NormalClosure</a> for details.
</DL><P>
<DL><DT><code>upperCentralSeries</code>:<DD> <BR> 
        contains the  upper central series  of <I>G</I> as  list of subgroups.
        See <a href="chap007.htm#SECT044">UpperCentralSeries</a>.
</DL><P>
<DL><DT><code>subnormalSeries</code>:<DD> <BR> 
        contains  a  subnormal series  from  the   parent of  <I>G</I> down to
        <I>G</I>.  See <a href="chap007.htm#SECT043">SubnormalSeries</a> for details.
</DL><P>
<DL><DT><code>sylowSubgroups</code>:<DD> <BR> 
        contains a list of  Sylow subgroups  of <I>G</I>.  See <a href="chap007.htm#SECT031">SylowSubgroup</a>
        for details.
</DL><P>
<DL><DT><code>size</code>:<DD> <BR> 
        is either an integer containing the size of a finite group or the
        string ``infinity'' if the group is infinite. See <a href="chap004.htm#SECT010">Size</a>.
</DL><P>
<DL><DT><code>perfectSubgroups</code>:<DD> <BR> 
        contains  the a  list of  subgroups  which includes at  least one
        representative   of  each  class   of  conjugate  proper  perfect
        subgroups of <I>G</I>. See <a href="chap007.htm#SECT075">Lattice</a>.
</DL><P>
<DL><DT><code>lattice</code>:<DD> <BR> 
        contains the subgroup lattice of <I>G</I>. See <a href="chap007.htm#SECT075">Lattice</a>.
</DL><P>
<DL><DT><code>conjugacyClassesSubgroups</code>:<DD> <BR> 
        identical  to   the  list  <code><I>G</I>.lattice.classes</code>,   contains  the
        conjugacy    classes     of     subgroups     of     <I>G</I>.     See
        <a href="chap007.htm#SECT074">ConjugacyClassesSubgroups</a>.
</DL><P>
<DL><DT><code>tableOfMarks</code>:<DD> <BR> 
        contains the table of narks of <I>G</I>. See <a href="chap048.htm#SECT004">TableOfMarks</a>.
</DL><P>
The following components are  <code>true</code> if  the group  <I>G</I> has the property,
<code>false</code> if  not, and are not present  if it is unknown whether  the group
has the property or not.
<P>
<DL><DT><code>isAbelian</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is abelian. See <a href="chap007.htm#SECT052">IsAbelian</a>.
</DL><P>
<DL><DT><code>isCentral</code>:<DD> <BR> 
        is  <code>true</code>  if  the  group   <I>G</I>    is  central in   its   parent
        group.  See <a href="chap007.htm#SECT053">IsCentral</a>.
</DL><P>
<DL><DT><code>isCyclic</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is cyclic. See <a href="chap007.htm#SECT055">IsCyclic</a>.
</DL><P>
<DL><DT><code>isElementaryAbelian</code>:<DD> <BR> 
        is  <code>true</code>  if   the  group  <I>G</I>    is   elementary  abelian. See
        <a href="chap007.htm#SECT056">IsElementaryAbelian</a>.
</DL><P>
<DL><DT><code>isFinite</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is  finite.  If you  know that a group
        for which you want to use the generic low  level  group functions
        is  infinite, you  should   set  this component to <code>false</code>.  This
        will avoid attempts to compute the set of elements.
</DL><P>
<DL><DT><code>isNilpotent</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is nilpotent. See <a href="chap007.htm#SECT057">IsNilpotent</a>.
</DL><P>
<DL><DT><code>isNormal</code>:<DD> <BR> 
        is  <code>true</code> if the group  <I>G</I> is normal in its parent group.   See
        <a href="chap007.htm#SECT058">IsNormal</a>.
</DL><P>
<DL><DT><code>isPerfect</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is perfect. See <a href="chap007.htm#SECT059">IsPerfect</a>.
</DL><P>
<DL><DT><code>isSimple</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is simple. See <a href="chap007.htm#SECT060">IsSimple</a>.
</DL><P>
<DL><DT><code>isSolvable</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is solvable. See <a href="chap007.htm#SECT061">IsSolvable</a>.
</DL><P>
<DL><DT><code>isSubnormal</code>:<DD> <BR> 
        is <code>true</code> if the group <I>G</I> is subnormal in its  parent group. See
        <a href="chap007.htm#SECT063">IsSubnormal</a>.
</DL><P>
The component <code>operations</code> contains  the <strong>operations record</strong> (see <a href="chap004.htm#SECT001">Domain
Records</a> and <a href="chap004.htm#SECT002">Dispatchers</a>).
<P><a href ="chap006.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap008.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
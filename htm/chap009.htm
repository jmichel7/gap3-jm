<html><head><title>GAP3 Manual: 9 Vector Spaces</title></head>
<body bgcolor="ffffff">
<h1>9 Vector Spaces</h1>
<P><P><P>
<strong>The material described in this chapter is subject to change.</strong>
<P>
Vector spaces form another important domain in  <strong>GAP3</strong>. They may be given
in  any representation whenever  the  underlying  set of elements forms a
vector  space in  terms of  linear  algebra. Thus, for  example, one  may
construct  a vector space by defining generating matrices over a field or
by using  the base  of a  field  extension  as  generators. More  complex
constructions may  fake elements of a vector space  by specifying records
with  appropriate operations.   A  special type of vector space,  that is
implemented in  the <strong>GAP3</strong> library,  handles the case where  the elements
are  lists over a field. This type is  the so called <code>RowSpace</code> (see <a href="chap033.htm">Row
Spaces</a> for details).
<P>
General  vector spaces  are created using the function <code>VectorSpace</code> (see
<a href="chap009.htm#SECT001">VectorSpace</a>)  and  they are  represented as  records  that contain  all
necessary information to deal  with  the  vector  space.  The  components
listed  in <a href="chap009.htm#SECT003">Vector Space Records</a> are common for  all vector spaces,  but
special  types  of  vector  spaces,  such  as  the  row  spaces, may  use
additional entries to store specific data.
<P>
The following sections contain descriptions  of  functions and operations
defined for vector spaces.
<P>
The next sections  describe functions to compute a base  (see <a href="chap009.htm#SECT006">Base</a>) and
the dimension (see <a href="chap009.htm#SECT008">Dimension</a>) of a vector space over its field.
<P>
The  next sections describe  how to calculate linear combinations  of the
elements  of  a  base  (see  <a href="chap009.htm#SECT009">LinearCombination</a>)  and how  to  find  the
coefficients of  an element of a vector space when expressed  as a linear
combination in the current base (see <a href="chap009.htm#SECT010">Coefficients</a>).
<P>
The functions described  in  this  chapter  are implemented  in the  file
<code>LIBNAME/"vecspace.g"</code>.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap009.htm#SECT001">VectorSpace</a>
<LI> <A HREF="chap009.htm#SECT002">IsVectorSpace</a>
<LI> <A HREF="chap009.htm#SECT003">Vector Space Records</a>
<LI> <A HREF="chap009.htm#SECT004">Set Functions for Vector Spaces</a>
<LI> <A HREF="chap009.htm#SECT005">IsSubspace</a>
<LI> <A HREF="chap009.htm#SECT006">Base</a>
<LI> <A HREF="chap009.htm#SECT007">AddBase</a>
<LI> <A HREF="chap009.htm#SECT008">Dimension</a>
<LI> <A HREF="chap009.htm#SECT009">LinearCombination</a>
<LI> <A HREF="chap009.htm#SECT010">Coefficients</a>
</ol>
<A NAME="SECT001"><h2>9.1 VectorSpace</h2></a>
<P><P><P>
<code>VectorSpace( <var>generators</var>, <var>field</var> )</code>
<P>
Let <var>generators</var> be a list of objects generating a vector space  over the
field <var>field</var>. Then <code>VectorSpace</code>  returns this  vector space represented
as a <strong>GAP3</strong> record.
<P>
<pre>    gap> f := GF( 3^2 );
    GF(3^2)
    gap> m := [ [ f.one, f.one ], [ f.zero, f.zero ] ];
    [ [ Z(3)^0, Z(3)^0 ], [ 0*Z(3), 0*Z(3) ] ]
    gap> n := [ [ f.one, f.zero ], [ f.zero, f.one ] ];
    [ [ Z(3)^0, 0*Z(3) ], [ 0*Z(3), Z(3)^0 ] ]
    gap> VectorSpace( [ m, n ], f );
    VectorSpace( [ [ [ Z(3)^0, Z(3)^0 ], [ 0*Z(3), 0*Z(3) ] ], 
      [ [ Z(3)^0, 0*Z(3) ], [ 0*Z(3), Z(3)^0 ] ] ], GF(3^2) ) </pre>
<P>
<P>
<code>VectorSpace( <var>generators</var>, <var>field</var>, <var>zero</var> )</code>
<P>
<code>VectorSpace</code> returns the vector space generated by <var>generators</var> over the
field <var>field</var> having <var>zero</var> as  the uniquely determined  neutral element.
This call  of  <code>VectorSpace</code> always is  requested if <var>generators</var> is  the
empty list.
<P>
<pre>    gap> VectorSpace( [], f, [ [ f.zero, f.zero ], [ f.zero, f.zero ] ] );
    VectorSpace( [  ], GF(3^2), [ [ 0*Z(3), 0*Z(3) ], [ 0*Z(3), 0*Z(3) ]
     ] ) </pre>
<P><A NAME="SECT002"><h2>9.2 IsVectorSpace</h2></a>
<P><P><P>
<code>IsVectorSpace( <var>obj</var> )</code>
<P>
<code>IsVectorSpace</code> returns  <code>true</code>  if  <var>obj</var>, which  can  be  an object  of
arbitrary type, is a vector space and <code>false</code> otherwise.
<P><A NAME="SECT003"><h2>9.3 Vector Space Records</h2></a>
<P><P><P>
A vector space is  represented as a <strong>GAP3</strong> record  having several entries
to hold some necessary information about the vector space.
<P>
Basically  a  vector  space  record  is constructed  using  the  function
<code>VectorSpace</code> although one may create such a  record by hand. Furthermore
vector  space records  may be  returned  by functions  described  here or
somewhere else in this manual.
<P>
Once a vector space record is created you are free to add components, but
you should never alter existing entries, especially <code>generators</code>, <code>field</code>
and <code>zero</code>.
<P>
The following list  mentions  all components  that  are requested  for  a
vector space <var>V</var>.
<P>
<DL><DT><code>generators</code>:<DD> <BR> 
        a list of elements generating the vector space <var>V</var>.
</DL><P>
<DL><DT><code>field</code>:<DD> <BR> 
        the field over which the vector space <var>V</var> is written.
</DL><P>
<DL><DT><code>zero</code>:<DD> <BR> 
        the zero element of the vector space.
</DL><P>
<DL><DT><code>isDomain</code>:<DD> <BR> 
        always <code>true</code>, because vector spaces are domains.
</DL><P>
<DL><DT><code>isVectorSpace</code>:<DD> <BR> 
        always <code>true</code>, for obvious reasons.
</DL><P><P>
There are as well some optional components for a vector space record.
<P>
<DL><DT><code>base</code>:<DD> <BR> 
        a base for <var>V</var>, given as a list of elements of <var>V</var>.
</DL><P>
<DL><DT><code>dimension</code>:<DD> <BR> 
        the dimension of <var>V</var> which is the length of a base of <var>V</var>.
</DL><P><A NAME="SECT004"><h2>9.4 Set Functions for Vector Spaces</h2></a>
<P><P>
<A name = "I0"></a>

<A name = "I1"></a>

<A name = "I2"></a>

<A name = "I3"></a>

<P>
As  mentioned before,  vector spaces are  domains. So all  functions that
exist for domains may  also be  applied to vector  spaces.  This  and the
following chapters  give  further  information on  the implementation  of
these  functions  for  vector  spaces, as far  as  they  differ in  their
implementation from the general functions.
<P>
<P>
<code>Elements( <var>V</var> )</code>
<P>
The elements of  a vector space <var>V</var> are computed  by producing all linear
combinations of the generators of <var>V</var>.
<P>
<P>
<code>Size( <var>V</var> )</code>
<P>
The size of a vector space <var>V</var> is determined by calculating the dimension
of <var>V</var> and looking at the field over which it is written.
<P>
<P>
<code>IsFinite( <var>V</var> )</code>
<P>
A vector space in  <strong>GAP3</strong> is finite if it contains  only its zero element
or if the field over which it is written is finite. This characterisation
is true here, as in <strong>GAP3</strong> all vector spaces have a finite dimension.
<P>
<P>
<code>Intersection( <var>V</var>, <var>W</var> )</code>
<P>
The intersection of  vector  spaces is computed by finding a base for the
intersection  of  the  sets  of  their  elements.  One  may consider  the
algorithm  for finding a base of  a vector  space <var>V</var> as  another  way to
write <code>Intersection( <var>V</var>, <var>V</var> )</code>.
<P><A NAME="SECT005"><h2>9.5 IsSubspace</h2></a>
<P><P><P>
<code>IsSubspace( <var>V</var>, <var>W</var> )</code>
<P>
<code>IsSubspace</code> tests whether the  vector space <var>W</var> is a subspace of <var>V</var>. It
returns <code>true</code> if <var>W</var> lies in <var>V</var> and <code>false</code> if it does not.
<P>
The  answer to  the question  is  obtained by  testing  whether  all  the
generators of <var>W</var> lie in <var>V</var>, so  that, for  the general  case of  vector
space handling, a list of all the elements of <var>V</var> is constructed.
<P><A NAME="SECT006"><h2>9.6 Base</h2></a>
<P><P>
<A name = "I4"></a>

<P>
<code>Base( <var>V</var> )</code>
<P>
<code>Base</code> computes  a  base  of the  given vector space <var>V</var>.  The  result is
returned as a list of elements of the vector space <var>V</var>.
<P>
The base of a vector space is defined to be a minimal generating set.  It
can be  shown  that for a given vector space  <var>V</var> each base has  the same
number   of  elements,  which  is  called   the  dimension  of  <var>V</var>  (see
<a href="chap009.htm#SECT008">Dimension</a>).
<P>
Unfortunately, no better algorithm  is known to compute a base in general
than to browse  through the list of all elements  of the vector space. So
be careful when using this command on plain vector spaces.
<P>
<pre>    gap> f := GF(3);
    GF(3)
    gap> m1 := [[ f.one, f.one, f.zero, f.zero ]];
    [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ]
    gap> m2 := [[ f.one, f.one, f.one, f.zero ]]; 
    [ [ Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ] ]
    gap> V := VectorSpace( [ m1, m2, m1+m2 ], GF(3) );
    VectorSpace( [ [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ], 
      [ [ Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ] ], 
      [ [ Z(3), Z(3), Z(3)^0, 0*Z(3) ] ] ], GF(3) )
    gap> Base( V );
    [ [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ], 
      [ [ Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ] ] ]
    gap> Dimension( V );
    2 </pre>
<P><A NAME="SECT007"><h2>9.7 AddBase</h2></a>
<P><P>
<A name = "I5"></a>

<P>
<code>AddBase( <var>V</var>, <var>base</var> )</code>
<P>
<code>AddBase</code> attaches a  user-supplied base for the  vector space <var>V</var> to the
record that represents <var>V</var>.
<P>
Most  of  the  functions  for  vector  spaces make  use of  a  base  (see
<a href="chap009.htm#SECT009">LinearCombination</a>, <a href="chap009.htm#SECT010">Coefficients</a>). These  functions  get  access to  a
base using  the function <code>Base</code>, which  normally computes a base for  the
vector  space using an appropriate algorithm.  Once a base is computed it
will always be reused, no matter whether there is a more interesting base
available or not.
<P>
<code>AddBase</code> installs a given  <var>base</var> for  <var>V</var> by overwriting any other base
of the  vector space that has been installed  before.  So after <code>AddBase</code>
has successfully been used, <var>base</var> will be used whenever <code>Base</code> is called
with <var>V</var> as argument.
<P>
Calling <code>AddBase</code> with a <var>base</var> which is not a base for <var>V</var> might produce
unpredictable results in following computations.
<P>
<pre>    gap> f := GF(3);
    GF(3)
    gap> m1 := [[ f.one, f.one, f.zero, f.zero ]];
    [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ]
    gap> m2 := [[ f.one, f.one, f.one, f.zero ]]; 
    [ [ Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ] ]
    gap> V := VectorSpace( [ m1, m2, m1+m2 ], GF(3) );
    VectorSpace( [ [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ], 
      [ [ Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ] ], 
      [ [ Z(3), Z(3), Z(3)^0, 0*Z(3) ] ] ], GF(3) )
    gap> Base( V );
    [ [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ], 
      [ [ Z(3)^0, Z(3)^0, Z(3)^0, 0*Z(3) ] ] ]
    gap> AddBase( V, [ m1, m1+m2 ] );
    gap> Base( V );
    [ [ [ Z(3)^0, Z(3)^0, 0*Z(3), 0*Z(3) ] ], 
      [ [ Z(3), Z(3), Z(3)^0, 0*Z(3) ] ] ] </pre>
<P><A NAME="SECT008"><h2>9.8 Dimension</h2></a>
<P><P>
<A name = "I6"></a>

<P>
<code>Dimension( <var>V</var> )</code>
<P>
<code>Dimension</code> computes the dimension of the given vector space <var>V</var> over its
field.
<P>
The dimension of  a vector space <var>V</var> is defined to  be  the length  of  a
minimal generating set  of <var>V</var>,  which  is  called  a  base  of  <var>V</var> (see
<a href="chap009.htm#SECT006">Base</a>).
<P>
The implementation of <code>Dimension</code> strictly  follows its above definition,
so that this function will always determine a base of <var>V</var>.
<P>
<pre>    gap> f := GF( 3^4 );
    GF(3^4)
    gap> f.base;
    [ Z(3)^0, Z(3^4), Z(3^4)^2, Z(3^4)^3 ]
    gap> V := VectorSpace( f.base, GF( 3 ) );
    VectorSpace( [ Z(3)^0, Z(3^4), Z(3^4)^2, Z(3^4)^3 ], GF(3) )
    gap> Dimension( V );
    4 </pre>
<P><A NAME="SECT009"><h2>9.9 LinearCombination</h2></a>
<P><P>
<A name = "I7"></a>

<P>
<code>LinearCombination( <var>V</var>, <var>cf</var> )</code>
<P>
<code>LinearCombination</code> computes the linear combination  of the base elements
of the vector space <var>V</var> with coefficients <var>cf</var>.
<P>
<var>cf</var> has to  be a list of elements of <var>V</var>.field, the field over which the
vector space is written. Its length must be equal to the dimension of <var>V</var>
to make sure that one coefficient is  specified  for each element  of the
base.
<P>
<code>LinearCombination</code>  will use that base  of  <var>V</var> which  is returned  when
applying  the function  <code>Base</code> to  <var>V</var>  (see  <a href="chap009.htm#SECT006">Base</a>). To  perform linear
combinations  of different  bases use  <code>AddBase</code>  to  specify  which base
should be used (see <a href="chap009.htm#SECT007">AddBase</a>).
<P>
<pre>    gap> f := GF( 3^4 );
    GF(3^4)
    gap> f.base;
    [ Z(3)^0, Z(3^4), Z(3^4)^2, Z(3^4)^3 ]
    gap> V := VectorSpace( f.base, GF( 3 ) );
    VectorSpace( [ Z(3)^0, Z(3^4), Z(3^4)^2, Z(3^4)^3 ], GF(3) )
    gap> LinearCombination( V, [ Z(3), Z(3)^0, Z(3), 0*Z(3) ] );
    Z(3^4)^16
    gap> Coefficients( V, f.root ^ 16 );
    [ Z(3), Z(3)^0, Z(3), 0*Z(3) ] </pre>
<P><A NAME="SECT010"><h2>9.10 Coefficients</h2></a>
<P><P>
<A name = "I8"></a>

<P>
<code>Coefficients( <var>V</var>, <var>v</var> )</code>
<P>
<code>Coefficients</code> computes the coefficients that  have to  be used  to write
<var>v</var> as a linear combination in the base of <var>V</var>.
<P>
To make sure that this function produces the  correct result, <var>v</var>  has to
be  an  element  of  <var>V</var>. If  <var>v</var>  does not  lie in  <var>V</var>  the  result  is
unpredictable.
<P>
The  result  of  <code>Coefficients</code>  is returned as a list of elements of the
field  over which the vector space <var>V</var> is written. Of course,  the length
of this list equals the dimension of <var>V</var>.
<P>
<pre>    gap> f := GF( 3^4 );
    GF(3^4)
    gap> f.base;
    [ Z(3)^0, Z(3^4), Z(3^4)^2, Z(3^4)^3 ]
    gap> V := VectorSpace( f.base, GF( 3 ) );
    VectorSpace( [ Z(3)^0, Z(3^4), Z(3^4)^2, Z(3^4)^3 ], GF(3) )
    gap> Dimension( V );
    4
    gap> Coefficients( V, f.root ^ 16 );
    [ Z(3), Z(3)^0, Z(3), 0*Z(3) ] </pre>
<P><a href ="chap008.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap010.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>
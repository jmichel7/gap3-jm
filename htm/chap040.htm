<html><head><title>GAP3 Manual: 40 Finitely Presented Algebras</title></head>
<body bgcolor="ffffff">
<h1>40 Finitely Presented Algebras</h1>
<P><P><P>
This chapter contains the description of functions dealing with finitely
presented algebras.
The first section informs about the data structures
(see <a href="chap040.htm#SECT001">More about Finitely Presented Algebras</a>),
the next sections tell how to construct free and finitely presented algebras
(see <a href="chap040.htm#SECT002">FreeAlgebra</a>, <a href="chap040.htm#SECT003">FpAlgebra</a>), and what functions can be applied to them
(see <a href="chap040.htm#SECT004">IsFpAlgebra</a>, <a href="chap040.htm#SECT006">Functions for Finitely Presented Algebras</a>, <a href="chap040.htm#SECT005">Operators
for Finitely Presented Algebras</a>, <a href="chap040.htm#SECT007">PrintDefinitionFpAlgebra</a>),
and the final sections introduce functions for elements of finitely
presented algebras (see <a href="chap040.htm#SECT008">MappedExpression</a>, <a href="chap040.htm#SECT009">Elements of Finitely Presented
Algebras</a>, <a href="chap040.htm#SECT010">ElementAlgebra</a>, <a href="chap040.htm#SECT011">NumberAlgebraElement</a>).
<P>
For a detailed description of operations of finitely presented algebras on
modules, see chapter <a href="chap073.htm">Vector Enumeration</a>.
<P><P>
<H3> Subsections</H3>
<oL>
<LI> <A HREF="chap040.htm#SECT001">More about Finitely Presented Algebras</a>
<LI> <A HREF="chap040.htm#SECT002">FreeAlgebra</a>
<LI> <A HREF="chap040.htm#SECT003">FpAlgebra</a>
<LI> <A HREF="chap040.htm#SECT004">IsFpAlgebra</a>
<LI> <A HREF="chap040.htm#SECT005">Operators for Finitely Presented Algebras</a>
<LI> <A HREF="chap040.htm#SECT006">Functions for Finitely Presented Algebras</a>
<LI> <A HREF="chap040.htm#SECT007">PrintDefinitionFpAlgebra</a>
<LI> <A HREF="chap040.htm#SECT008">MappedExpression</a>
<LI> <A HREF="chap040.htm#SECT009">Elements of Finitely Presented Algebras</a>
<LI> <A HREF="chap040.htm#SECT010">ElementAlgebra</a>
<LI> <A HREF="chap040.htm#SECT011">NumberAlgebraElement</a>
</ol>
<A NAME="SECT001"><h2>40.1 More about Finitely Presented Algebras</h2></a>
<P><P><P>
<strong>Free Algebras</strong>
<P>
Let <I>X</I> be a finite set, and <I>F</I> a field.
The <strong>free algebra</strong> <I>A</I> on <I>X</I> over <I>F</I> can be regarded as the semigroup ring
of the free monoid on <I>X</I> over <I>F</I>.
Addition and multiplication of elements are performed by dealing with
sums of words in abstract generators, with coefficients in <I>F</I>.
<P>
Free algebras and also their subalgebras in <strong>GAP3</strong> are always <strong>unital</strong>,
that is, for an element <I>a</I> in a subalgebra <I>A</I> of a free algebra always
the element <I>a<sup>0</sup></I> lies in <I>A</I> (see <a href="chap039.htm#SECT002">Algebras and Unital Algebras</a>).
Thus the free algebra on the empty set over a field <I>F</I> is
defined to consist of all elements <I>f e</I> where <I>f</I> is in <I>F</I>, and <I>e</I> is
the multiplicative neutral element, corresponding to the empty word.
<P>
Free algebras are useful when dealing with other algebras, like matrix
algebras, since they allow to handle expressions in terms of the generators.
This is just a generalization of handling words in abstract generators and
concrete group elements in parallel, as is done for example in <code>MappedWord</code>
(see <a href="chap022.htm#SECT012">MappedWord</a>) or functions that construct images and preimages under
homomorphisms.  This mechanism is also provided for the records representing
matrices in the <strong>MeatAxe</strong> share library (see chapter <a href="chap069.htm">The MeatAxe</a>).
<P>
<P>
<P>
<strong>Finitely Presented Algebras</strong>
<P>
A <strong>finitely presented algebra</strong> is defined as quotient <I>A / I</I> of a free
algebra <I>A</I> by a two-sided ideal <I>I</I> in <I>A</I> that is generated by a finite set
<I>S</I> of elements in <I>F</I>.
<P>
Thus computations with finitely presented algebras are similar to those
with finitely presented groups.  For example, in general it is impossible to
decide whether two elements of the free algebra <I>A</I> are equal modulo <I>I</I>.
<P>
For finitely presented groups a permutation representation on the cosets
of a subgroup of finite index can be computed by the Todd-Coxeter coset
enumeration method.  An analogue of this method for finitely presented
algebras is Steve Linton's <strong>VE</strong> method that tries to compute a matrix
representation of the action on a quotient of a free module of the algebra.
This method is available in <strong>GAP3</strong> as a share library (see chapter
<a href="chap073.htm">Vector Enumeration</a>, and the references there), and this makes
finitely presented algebra in <strong>GAP3</strong> more than an object one can only use
for the obvious arithmetics with elements of free algebras.
<P>
<strong>GAP3</strong> only handles the data structures, all the work in done by
the standalone program.  Thus all functions for finitely presented algebras,
like <code>Size</code>, delegate the work to the <strong>VE</strong> program.
<P>
<strong>Note</strong> that (contrary to the situation in finitely presented groups, and
several places in <strong>VE</strong>) relators are meant to be equal to <strong>zero</strong>, not to
the identity.  Two examples for this.  If <code>x^2 - a.one</code> is a relator in
the presentation of the algebra <code>a</code>, with <code>x</code> a generator, then <code>x</code> is an
involution.  If <code>x^2</code> is a relator then <code>x</code> is nilpotent.  If the generator
<code>x</code> occurs in relators of the form <code>x * v - a.one</code> and <code>w * x - a.one</code>,
for <code>v</code> and <code>w</code> elements of the free algebra, then <code>x</code> is known to be
invertible.
<P>
The <strong>VE</strong> package is loaded automatically as soon as it is needed.
You can also load it explicitly using
<P>
<code>    gap> RequirePackage( "ve" ); </code>
<P>
<P>
<P>
<strong>Elements of Finitely Presented Algebras</strong>
<P>
The elements of finitely presented algebras in <strong>GAP3</strong> are records that
store lists of coefficients and of words in abstract generators.
Note that the elements of the ground field are not regarded as elements
of the algebra, especially the identity and zero element are denoted by
<code>a.one</code> and <code>a.zero</code>, respectively.
Functions and operators for elements of finitely presented algebras are
listed in <a href="chap040.htm#SECT009">Elements of Finitely Presented Algebras</a>.
<P>
<P>
<P>
<strong>Implementation of Functions for Finitely Presented Algebras</strong>
<P>
Every question about a finitely presented algebra <I>A</I> that cannot be answered
from the presentation directly is delegated to an isomorphic matrix algebra
<I>M</I> using the <strong>VE</strong> share library.  This may be impossible because the
dimension of an isomorphic matrix algebra is too large.  But for small <I>A</I>
it seems to be valuable.
<P>
For example, if one asks for the size of <I>A</I>, <strong>VE</strong> tries to find such a
matrix algebra <I>M</I>, and then <strong>GAP3</strong> computes its size.
<I>M</I> and the isomorphism between <I>A</I> and <I>M</I> are stored in the component
<code><var>A</var>.matAlgebraA</code>, so <strong>VE</strong> is called only once for <I>A</I>.
<P><A NAME="SECT002"><h2>40.2 FreeAlgebra</h2></a>
<P><P><P>
<code>FreeAlgebra( <var>F</var>, <var>rank</var> )</code><BR> 
<code>FreeAlgebra( <var>F</var>, <var>rank</var>, <var>name</var> )</code><BR> 
<code>FreeAlgebra( <var>F</var>, <var>name1</var>, <var>name2</var>, ... )</code>
<P>
return a free algebra with ground field <var>F</var>.  In the first two forms an
algebra on <var>rank</var> free generators is returned, their names will be
<code><var>name</var>.1</code>, ..., <code><var>name</var>.<var>rank</var></code>, the default for <var>name</var> is the string
<code>"a"</code>.
<P>
<pre>    gap> a:= FreeAlgebra( GF(2), 2 );
    UnitalAlgebra( GF(2), [ a.1, a.2 ] )
    gap> b:= FreeAlgebra( Rationals, "x", "y" );
    UnitalAlgebra( Rationals, [ x, y ] )
    gap> x:= b.1;
    x </pre>
<P>
Finitely presented algebras are constructed from free algebras via factoring
by a suitable ideal (see <a href="chap040.htm#SECT005">Operators for Finitely Presented Algebras</a>).
<P><A NAME="SECT003"><h2>40.3 FpAlgebra</h2></a>
<P><P><P>
<code>FpAlgebra( <var>A</var> )</code>
<P>
returns a finitely presented algebra isomorphic to the
algebra <var>A</var>.  At the moment this is implemented only for matrix algebras
and finitely presented algebras.
<P>
<pre>    gap> a:= FreeAlgebra( GF(2), 2 );
    UnitalAlgebra( GF(2), [ a.1, a.2 ] )
    gap> a:= a / [ a.one+a.1^2, a.one+a.2^2, a.one+(a.1*a.2)^3 ];;
    gap> a.name:= "a";; s:= Subalgebra( a, [ a.2 ] );;
    gap> f:= FpAlgebra( s );
    UnitalAlgebra( GF(2), [ a.1 ] )
    gap> PrintDefinitionFpAlgebra( f, "f" );
    f:= FreeAlgebra( GF(2), "a.1" );
    f:= f / [ f.one+f.1^2 ]; </pre>
<P>
<P>
<P>
<code>FpAlgebra( <var>F</var>, <var>fpgroup</var> )</code>
<P>
returns the <strong>group algebra</strong> of the finitely presented group <var>fpgroup</var> over
the field  <var>F</var>, this is the algebra of formal linear combinations of
elements of <var>fpgroup</var>, with coefficients in <var>F</var>; in this case the number of
algebra generators is twice the number of group generators, the first half
corresponding to the group generators, the second half to their inverses.
<P>
<pre>    gap> f:= FreeGroup( 2 );;
    gap> s3:= f / [ f.1^2, f.2^2, (f.1*f.2)^3 ];
    Group( f.1, f.2 )
    gap> a:= FpAlgebra( GF(2), s3 );
    UnitalAlgebra( GF(2), [ a.1, a.2, a.3, a.4 ] ) </pre>
<P><A NAME="SECT004"><h2>40.4 IsFpAlgebra</h2></a>
<P><P><P>
<code>IsFpAlgebra( <var>obj</var> )</code>
<P>
returns <code>true</code> if <var>obj</var> is a finitely presented algebra,
and <code>false</code> otherwise.
<P>
<pre>    gap> IsFpAlgebra( FreeAlgebra( GF(2), 0 ) );
    true
    gap> IsFpAlgebra( last );
    false </pre>
<P><A NAME="SECT005"><h2>40.5 Operators for Finitely Presented Algebras</h2></a>
<P><P><P>
<code><var>A</var> / <var>relators</var></code>
<P>
returns a finitely presented algebra that is the quotient of the free algebra
<var>A</var> (see <a href="chap040.htm#SECT002">FreeAlgebra</a>) by the two-sided ideal in <var>A</var> spanned by the elements
in the list <var>relators</var>.
<P>
This is the general method to construct finitely presented algebras in
<strong>GAP3</strong>.  For the special case of group algebras of finitely presented groups
see <a href="chap040.htm#SECT003">FpAlgebra</a>.
<P>
<P>
<P>
<code><var>A</var> ^ <var>n</var></code>
<P>
returns a free <var>A</var>-module of dimension <var>n</var> (see chapter <a href="chap042.htm">Modules</a>) for the
finitely presented algebra <var>A</var>.
<P>
<pre>    gap> f:= FreeAlgebra( Rationals, 2 );
    UnitalAlgebra( Rationals, [ a.1, a.2 ] )
    gap> a:= f / [ f.1^2 - f.one, f.2^2 - f.one, (f.1*f.2)^2 - f.one ];
    UnitalAlgebra( Rationals, [ a.1, a.2 ] )
    gap> a = f;
    false
    gap> a^2;
    Module( UnitalAlgebra( Rationals, [ a.1, a.2 ] ), 
    [ [ a.one, a.zero ], [ a.zero, a.one ] ] ) </pre>
<P>
<P>
<P>
<code><var>a</var> in <var>A</var></code>
<P>
returns <code>true</code> if <var>a</var> is an element of the finitely presented algebra <var>A</var>,
and <code>false</code> otherwise.  Note that the answer may require the computation of
an isomorphic matrix algebra if <var>A</var> is not a parent algebra.
<P>
<pre>    gap> a.1 in a;
    true
    gap> f.1 in a;
    false
    gap> 1 in a;
    false </pre>
<P><A NAME="SECT006"><h2>40.6 Functions for Finitely Presented Algebras</h2></a>
<P><P><P>
The following functions are overlaid in the operations record of finitely
presented algebras.
<P>
<DL><DT>The <strong>set theoretic functions</strong>:<DD> <BR> 
    <code>Elements</code>, <code>Intersection</code>, <code>IsFinite</code>, <code>IsSubset</code>, <code>Size</code>;
</DL><P>
<DL><DT>the <strong>vector space functions</strong>:<DD> <BR> 
    <code>Base</code>, <code>Coefficients</code>, and <code>Dimension</code>,
</DL><P>
Note that at the moment no basis records (see <a href="chap033.htm#SECT002">Row Space Bases</a>) for finitely
presented algebras are supported.
<P>
<DL><DT>and the <strong>algebra functions</strong>:<DD> <BR> 
    <code>Closure</code>, <code>IsAbelian</code>, <code>IsTrivial</code>, <code>Operation</code> (see <a href="chap039.htm#SECT022">Operation for
    Algebras</a>, <a href="chap073.htm#SECT001">Operation for Finitely Presented Algebras</a>, <a href="chap073.htm#SECT003">Examples of
    Vector Enumeration</a>), <code>Subalgebra</code>, and <code>TrivialSubalgebra</code>.
</DL><P>
<strong>Note</strong> that these functions try to compute a faithful matrix representation
of the algebra using the <strong>VE</strong> share library (see chapter <a href="chap073.htm">Vector
Enumeration</a>).
<P><A NAME="SECT007"><h2>40.7 PrintDefinitionFpAlgebra</h2></a>
<P><P><P>
<code>PrintDefinitionFpAlgebra( <var>A</var>, <var>name</var> )</code>
<P>
prints the assignment of the finitely presented algebra <var>A</var> to the variable
name <var>name</var>.  Using the call as an argument of <code>PrintTo</code> (see <a href="chap003.htm#SECT015">PrintTo</a>),
this can be used to save <var>A</var> to a file.
<P>
<pre>    gap> a:= FreeAlgebra( GF(2), "x", "y" );
    UnitalAlgebra( GF(2), [ x, y ] )
    gap> a:= a / [ a.1^2-a.one, a.2^2-a.one, (a.1*a.2)^3 - a.one ];
    UnitalAlgebra( GF(2), [ x, y ] )
    gap> PrintDefinitionFpAlgebra( a, "b" );
    b:= FreeAlgebra( GF(2), "x", "y" );
    b:= b / [ b.one+b.1^2, b.one+b.2^2, b.one+b.1*b.2*b.1*b.2*b.1*b.2 ];
    gap> PrintTo( "algebra", PrintDefinitionFpAlgebra( a, "b" ) ); </pre>
<P><A NAME="SECT008"><h2>40.8 MappedExpression</h2></a>
<P><P><P>
<code>MappedExpression( <var>expr</var>, <var>gens1</var>, <var>gens2</var> )</code>
<P>
For an arithmetic expression <var>expr</var> in terms of <var>gens1</var>,
<code>MappedExpression</code> returns the corresponding expression in terms of 
<var>gens2</var>.
<P>
<var>gens1</var> may be a list of abstract generators (in this case the result is the
same as the object returned by <a href="chap022.htm#SECT012">MappedWord</a> <code>MappedWord</code>), or of generators
of a finitely presented algebra.
<P>
<pre>    gap> a:= FreeAlgebra( Rationals, 2 );;
    gap> a:= a / [ a.1^2 - a.one, a.2^2 - a.one, (a.1*a.2)^2 - a.one ];;
    gap> matgens:= [ [[0,0,0,1],[0,0,1,0],[0,1,0,0],[1,0,0,0]],
    >                [[0,1,0,0],[1,0,0,0],[0,0,0,1],[0,0,1,0]] ];;
    gap> permgens:= [ (1,4)(2,3), (1,2)(3,4) ];;
    gap> MappedExpression( a.1^2 + a.1, a.generators, matgens );
    [ [ 1, 0, 0, 1 ], [ 0, 1, 1, 0 ], [ 0, 1, 1, 0 ], [ 1, 0, 0, 1 ] ]
    gap> MappedExpression( a.1 * a.2, a.generators, permgens );
    (1,3)(2,4) </pre>
<P>
Note that this can be done also in terms of (algebra or group) homomorphisms
(see <a href="chap039.htm#SECT024">Algebra Homomorphisms</a>).
<P>
<code>MappedExpression</code> may raise elements in <var>gens2</var> to the zero-th power.
<P><A NAME="SECT009"><h2>40.9 Elements of Finitely Presented Algebras</h2></a>
<P><P>
<A name = "I0"></a>

<P>
<strong>Zero and One of Finitely Presented Algebras</strong>
<P>
A finitely presented algebra <var>A</var> contains a zero element <code><var>A</var>.zero</code>.
If the number of generators of <var>A</var> is not zero, the multiplicative neutral
element of <var>A</var> is <code><var>A</var>.one</code>, which is the zero-th power of any nonzero
element of <var>A</var>.
<P>
<P>
<P>
<strong>Comparisons of Elements of Finitely Presented Algebras</strong>
<P>
<code><var>x</var> = <var>y</var></code><BR> 
<code><var>x</var> < <var>y</var></code>
<P>
Elements of the same algebra can be compared in order to form sets.
<strong>Note</strong> that probably it will be necessary to compute an isomorphic
matrix representation in order to decide equality if <var>x</var> and <var>y</var> are
not elements of a free algebra.
<P>
<pre>    gap> a:= FreeAlgebra( Rationals, 1 );;
    gap> a:= a / [ a.1^2 - a.one ];
    UnitalAlgebra( Rationals, [ a.1 ] )
    gap> [ a.1^3 = a.1, a.1^3 > a.1, a.1 > a.one, a.zero > a.one ];
    [ true, false, false, false ] </pre>
<P>
<P>
<P>
<strong>Arithmetic Operations for Elements of Finitely Presented Algebras</strong>
<P>
<code><var>x</var> + <var>y</var></code><BR> 
<code><var>x</var> - <var>y</var></code><BR> 
<code><var>x</var> * <var>y</var></code><BR> 
<code><var>x</var> ^ <var>n</var></code> <BR> 
<code><var>x</var> / <var>c</var></code>
<P>
The usual arithmetical operations for ring elements apply to elements of
finitely presented algebras.  Exponentiation <code>^</code> can be used to raise
an element <var>x</var> to the <var>n</var>-th power.  Division <code>/</code> is only defined for
denominators in the base field of the algebra.
<P>
<pre>    gap> a:= FreeAlgebra( Rationals, 2 );;
    gap> x:= a.1 - a.2;
    a.1+-1*a.2
    gap> x^2;
    a.1^2+-1*a.1*a.2+-1*a.2*a.1+a.2^2
    gap> y:= 4 * x - a.1;
    3*a.1+-4*a.2
    gap> y^2;
    9*a.1^2+-12*a.1*a.2+-12*a.2*a.1+16*a.2^2 </pre>
<P>
<P>
<P>
<code>IsFpAlgebraElement( <var>obj</var> )</code>
<P>
returns <code>true</code> if <var>obj</var> is an element of a finitely presented algebra,
and <code>false</code> otherwise.
<P>
<pre>    gap> IsFpAlgebraElement( a.zero );
    true
    gap> IsFpAlgebraElement( a.field.zero );
    false </pre>
<P>
<P>
<P>
<code>FpAlgebraElement( <var>A</var>, <var>coeff</var>, <var>words</var> )</code>
<P>
Elements of finitely presented algebras normally arise from arithmetical
operations.  It is, however, possible to construct directly the element
of the finitely presented algebra <var>A</var> that is the sum of the words in the
list <var>words</var>, with coefficients given by the list <var>coeff</var>, by calling
<code>FpAlgebraElement( <var>A</var>, <var>coeff</var>, <var>words</var> )</code>.  <strong>Note</strong> that this function
does <strong>not</strong> check whether some of the words are equal, or whether all
coefficients are nonzero.  So one should probably not use it.
<P>
<pre>    gap> a;
    UnitalAlgebra( Rationals, [ a.1, a.2 ] )
    gap> FpAlgebraElement( a, [ 1, 1 ], a.generators );
    a.1+a.2
    gap> FpAlgebraElement( a, [ 1, 1, 1 ], List( [ 1..3 ], i -> a.1^i ) );
    a.1+a.1^2+a.1^3 </pre>
<P><A NAME="SECT010"><h2>40.10 ElementAlgebra</h2></a>
<P><P><P>
<code>ElementAlgebra( <var>A</var>, <var>nr</var> )</code>
<P>
returns the <var>nr</var>-th element in terms of the generators of the free algebra
<var>A</var> over the finite field <var>F</var>, with respect to the following ordering.
<P>
We form the elements as linear combinations with coefficients in the base
field of <var>A</var>, with respect to the basis defined by the ordering of words
according to length and lexicographic order; this sequence starts as follows.
<P>
<I>a<sub>1</sub><sup>0</sup></I>, <I>a<sub>1</sub></I>, <I>a<sub>2</sub></I>, ..., <I>a<sub>n</sub></I>, <I>a<sub>1</sub><sup>2</sup></I>, <I>a<sub>1</sub> a<sub>2</sub></I>, <I>a<sub>1</sub> a<sub>3</sub></I>, ...,
<I>a<sub>1</sub> a<sub>n</sub></I>, <I>a<sub>2</sub> a<sub>1</sub></I>, ..., <I>a<sub>2</sub> a<sub>n</sub></I>, ..., <I>a<sub>n</sub><sup>2</sup></I>, <I>a<sub>1</sub><sup>3</sup></I>,
<I>a<sub>1</sub><sup>2</sup> a<sub>2</sub></I>, ..., <I>a<sub>1</sub><sup>2</sup> a<sub>n</sub></I>, <I>a<sub>1</sub> a<sub>2</sub> a<sub>1</sub></I>, ...
<P>
Let <I>n</I> be the number of generators of <var>A</var>, <I>q</I> the size of <var>F</var>,
and <I>&lt;nr&gt; = &sum;<sub>i=0</sub><sup>k</sup> a<sub>i</sub> q<sup>i</sup></I> the <I>q</I>-adic expression of <var>nr</var>.
Then the <I>a<sub>i</sub></I>-th element of <code><var>A</var>.field</code> is the coefficient of the
<I>i</I>-th base element in the required algebra element.
The ordering of field elements is the same as that defined in the
<strong>MeatAxe</strong> package, that is, <code>FFList( <var>F</var> )[ <var>m</var>+1 ]</code> (see <a href="chap039.htm#SECT029">FFList</a>) is
the <var>m</var>-th element of the field <var>F</var>.
<P>
<pre>    gap> a:= FreeAlgebra( GF(2), 2 );;
    gap> List( [ 10 .. 20 ], x -> ElementAlgebra( a, x ) );
    [ a.1+a.1^2, a.one+a.1+a.1^2, a.2+a.1^2, a.one+a.2+a.1^2, 
      a.1+a.2+a.1^2, a.one+a.1+a.2+a.1^2, a.1*a.2, a.one+a.1*a.2, 
      a.1+a.1*a.2, a.one+a.1+a.1*a.2, a.2+a.1*a.2 ]
    gap> ElementAlgebra( a, 0 );
    a.zero </pre>
<P>
The function can be applied also if <var>A</var> is an arbitrary finitely presented
algebra or a matrix algebra.  In these cases the result is the element of
the algebra obtained on replacing the generators of the corresponding free
algebra by the generators of <var>A</var>.
<P>
<strong>Note</strong> that the zero-th power of elements may be needed, which is not
necessarily an element of a matrix algebra.
<P>
<pre>    gap> a:= UnitalAlgebra( GF(2), GL(2,2).generators );
    UnitalAlgebra( GF(2), [ [ [ Z(2)^0, Z(2)^0 ], [ 0*Z(2), Z(2)^0 ] ], 
      [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, 0*Z(2) ] ] ] )
    gap> ElementAlgebra( a, 17 );
    [ [ 0*Z(2), Z(2)^0 ], [ Z(2)^0, Z(2)^0 ] ] </pre>
<P>
The number of an element <var>a</var> can be computed using <a href="chap040.htm#SECT011">NumberAlgebraElement</a>.
<P><A NAME="SECT011"><h2>40.11 NumberAlgebraElement</h2></a>
<P><P><P>
<code>NumberAlgebraElement( <var>a</var> )</code>
<P>
returns the number <var>n</var> such that the element <var>a</var> of the finitely presented
algebra <var>A</var> is the <var>n</var>-th element of <var>A</var> in the sense of <a href="chap040.htm#SECT010">ElementAlgebra</a>,
that is, <code><var>a</var> = ElementAlgebra( <var>A</var>, <var>n</var> )</code>.
<P>
<pre>    gap> a:= FreeAlgebra( GF(2), 2 );;
    gap> NumberAlgebraElement( ( a.1 + a.one )^4 );
    32769
    gap> NumberAlgebraElement( a.zero );
    0
    gap> NumberAlgebraElement( a.one );
    1 </pre>
<P>
Note that <code><var>A</var>.field</code> must be finite.
<P><a href ="chap039.htm">Previous</a> <a href = "index.htm">Up</a> <a href ="chap041.htm">Next</a><BR><a href = "theindex.htm">Index</a>
<P>
<address>gap3-jm<br>11 Mar 2019</address></body></html>